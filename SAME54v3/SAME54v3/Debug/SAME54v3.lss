
SAME54v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dc8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000b64  20000000  00002dc8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bkupram      00000000  47000000  47000000  00020b64  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00020b64  2**0
                  CONTENTS
  4 .bss          000000e8  20000b64  0000392c  00020b64  2**2
                  ALLOC
  5 .stack        00010004  20000c4c  00003a14  00020b64  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  00020b64  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020b8e  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000ff39  00000000  00000000  00020be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000102c  00000000  00000000  00030b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ad1  00000000  00000000  00031b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000220  00000000  00000000  0003261d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002d0  00000000  00000000  0003283d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a12a  00000000  00000000  00032b0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004349  00000000  00000000  0005cc37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00104130  00000000  00000000  00060f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000007f0  00000000  00000000  001650b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	50 0c 01 20 c1 06 00 00 bd 06 00 00 bd 06 00 00     P.. ............
      10:	bd 06 00 00 bd 06 00 00 bd 06 00 00 00 00 00 00     ................
	...
      2c:	bd 06 00 00 bd 06 00 00 00 00 00 00 bd 06 00 00     ................
      3c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      4c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      5c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      6c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      7c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 59 15 00 00     ............Y...
      8c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      9c:	49 0d 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     I...............
      ac:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      bc:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      cc:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      dc:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
      ec:	bd 06 00 00 00 00 00 00 bd 06 00 00 bd 06 00 00     ................
      fc:	bd 06 00 00 2d 04 00 00 bd 06 00 00 bd 06 00 00     ....-...........
     10c:	bd 06 00 00 6d 09 00 00 bd 06 00 00 bd 06 00 00     ....m...........
     11c:	bd 06 00 00 29 09 00 00 bd 06 00 00 bd 06 00 00     ....)...........
     12c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     13c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     14c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     15c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     16c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     17c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     18c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     19c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     1ac:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     1bc:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     1cc:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     1dc:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     1ec:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     1fc:	9d 1e 00 00 dd 0d 00 00 bd 06 00 00 bd 06 00 00     ................
     20c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     21c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     22c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     23c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     24c:	bd 06 00 00 bd 06 00 00 bd 06 00 00 bd 06 00 00     ................
     25c:	bd 06 00 00 bd 06 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000b64 	.word	0x20000b64
     280:	00000000 	.word	0x00000000
     284:	00002dc8 	.word	0x00002dc8

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00002dc8 	.word	0x00002dc8
     2c4:	20000b68 	.word	0x20000b68
     2c8:	00002dc8 	.word	0x00002dc8
     2cc:	00000000 	.word	0x00000000

000002d0 <COMM_Port_Setup>:
	PortGroup *porD = &(por->Group[3]);
	
	//12MHz crystal on board selected mapped to PB22/PB23
	
	/* SERCOM0 Uart Terminal */
	porA->PMUX[2].bit.PMUXE = 3;	//PA04 pad0 Tx
     2d0:	4b2b      	ldr	r3, [pc, #172]	; (380 <COMM_Port_Setup+0xb0>)
     2d2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     2d6:	2103      	movs	r1, #3
     2d8:	f361 0203 	bfi	r2, r1, #0, #4
     2dc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	porA->PINCFG[4].bit.PMUXEN = 1;	
     2e0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
     2e4:	f042 0201 	orr.w	r2, r2, #1
     2e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	porA->PMUX[2].bit.PMUXO = 3;	//PA05 pad1 Rx
     2ec:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
     2f0:	f361 1207 	bfi	r2, r1, #4, #4
     2f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	porA->PINCFG[5].bit.PMUXEN = 1;
     2f8:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
     2fc:	f042 0201 	orr.w	r2, r2, #1
     300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
		
	/* SERCOM6 SPI to DACs */
	porC->PMUX[2].bit.PMUXE = 2;	//PC04 pad0
     304:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
     308:	2102      	movs	r1, #2
     30a:	f361 0203 	bfi	r2, r1, #0, #4
     30e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	porC->PMUX[2].bit.PMUXO = 2;	//PC05 pad1
     312:	f893 2132 	ldrb.w	r2, [r3, #306]	; 0x132
     316:	f361 1207 	bfi	r2, r1, #4, #4
     31a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	porC->PMUX[3].bit.PMUXE = 2;	//PC06 pad2
     31e:	f893 2133 	ldrb.w	r2, [r3, #307]	; 0x133
     322:	f361 0203 	bfi	r2, r1, #0, #4
     326:	f883 2133 	strb.w	r2, [r3, #307]	; 0x133
	porC->PINCFG[4].bit.PMUXEN = 1;
     32a:	f893 2144 	ldrb.w	r2, [r3, #324]	; 0x144
     32e:	f042 0201 	orr.w	r2, r2, #1
     332:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
	porC->PINCFG[5].bit.PMUXEN = 1;
     336:	f893 2145 	ldrb.w	r2, [r3, #325]	; 0x145
     33a:	f042 0201 	orr.w	r2, r2, #1
     33e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	porC->PINCFG[6].bit.PMUXEN = 1;
     342:	f893 2146 	ldrb.w	r2, [r3, #326]	; 0x146
     346:	f042 0201 	orr.w	r2, r2, #1
     34a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	porC->DIRSET.reg |= SS0;	//SS0 for 1st DAC
     34e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     356:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	porC->DIRSET.reg |= SS1;	//SS1 for 2nd DAC
     35a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     35e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     362:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	porC->OUTSET.reg |= SS0;	//initialize SS0 high
     366:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
     36a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     36e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	porC->OUTSET.reg |= SS1;	//initialize SS1 high
     372:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
     376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     37a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
     37e:	4770      	bx	lr
     380:	41008000 	.word	0x41008000

00000384 <terminal_UART_setup>:
/* Setup UART for terminal
*/
void terminal_UART_setup(void){
	Sercom *ser = SERCOM0;
	SercomUsart *uart = &(ser->USART);
	uart->CTRLA.reg = 0;	//enable protected regs
     384:	2200      	movs	r2, #0
     386:	4b27      	ldr	r3, [pc, #156]	; (424 <terminal_UART_setup+0xa0>)
     388:	601a      	str	r2, [r3, #0]
	while(uart->SYNCBUSY.reg){}
     38a:	461a      	mov	r2, r3
     38c:	69d3      	ldr	r3, [r2, #28]
     38e:	2b00      	cmp	r3, #0
     390:	d1fc      	bne.n	38c <terminal_UART_setup+0x8>
	uart->CTRLA.bit.DORD = 1;	//LSB transferred first
     392:	4b24      	ldr	r3, [pc, #144]	; (424 <terminal_UART_setup+0xa0>)
     394:	681a      	ldr	r2, [r3, #0]
     396:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
     39a:	601a      	str	r2, [r3, #0]
	uart->CTRLA.bit.CMODE = 0;	//asynchronous mode
     39c:	681a      	ldr	r2, [r3, #0]
     39e:	f36f 721c 	bfc	r2, #28, #1
     3a2:	601a      	str	r2, [r3, #0]
	uart->CTRLA.bit.SAMPR = 0;	//16x oversampling using arithmetic
     3a4:	681a      	ldr	r2, [r3, #0]
     3a6:	f36f 324f 	bfc	r2, #13, #3
     3aa:	601a      	str	r2, [r3, #0]
	uart->CTRLA.bit.RXPO = 1;	//RX is pad1 PA05
     3ac:	681a      	ldr	r2, [r3, #0]
     3ae:	2101      	movs	r1, #1
     3b0:	f361 5215 	bfi	r2, r1, #20, #2
     3b4:	601a      	str	r2, [r3, #0]
	uart->CTRLA.bit.TXPO = 2;	//TX is pad0 PA04
     3b6:	681a      	ldr	r2, [r3, #0]
     3b8:	2002      	movs	r0, #2
     3ba:	f360 4211 	bfi	r2, r0, #16, #2
     3be:	601a      	str	r2, [r3, #0]
	uart->CTRLA.bit.MODE = 1;	//uart with internal clock
     3c0:	681a      	ldr	r2, [r3, #0]
     3c2:	f361 0284 	bfi	r2, r1, #2, #3
     3c6:	601a      	str	r2, [r3, #0]
	uart->CTRLB.bit.RXEN = 1;	//enable RX
     3c8:	685a      	ldr	r2, [r3, #4]
     3ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
     3ce:	605a      	str	r2, [r3, #4]
	uart->CTRLB.bit.TXEN = 1;	//enable TX
     3d0:	685a      	ldr	r2, [r3, #4]
     3d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     3d6:	605a      	str	r2, [r3, #4]
	uart->CTRLB.bit.PMODE = 0;	//even parity mode
     3d8:	685a      	ldr	r2, [r3, #4]
     3da:	f36f 324d 	bfc	r2, #13, #1
     3de:	605a      	str	r2, [r3, #4]
	uart->CTRLB.bit.SBMODE = 0;	//1 stop bit
     3e0:	685a      	ldr	r2, [r3, #4]
     3e2:	f36f 1286 	bfc	r2, #6, #1
     3e6:	605a      	str	r2, [r3, #4]
	uart->CTRLB.bit.CHSIZE = 0;	//8bit char size
     3e8:	685a      	ldr	r2, [r3, #4]
     3ea:	f36f 0202 	bfc	r2, #0, #3
     3ee:	605a      	str	r2, [r3, #4]
	while(uart->SYNCBUSY.reg){}
     3f0:	461a      	mov	r2, r3
     3f2:	69d3      	ldr	r3, [r2, #28]
     3f4:	2b00      	cmp	r3, #0
     3f6:	d1fc      	bne.n	3f2 <terminal_UART_setup+0x6e>
	uart->BAUD.reg = 55470;	//for fbaud 9600 at 1Mhz fref
     3f8:	4b0a      	ldr	r3, [pc, #40]	; (424 <terminal_UART_setup+0xa0>)
     3fa:	f64d 02ae 	movw	r2, #55470	; 0xd8ae
     3fe:	819a      	strh	r2, [r3, #12]
	uart->INTENSET.bit.RXC = 1;	//receive complete interr
     400:	7d9a      	ldrb	r2, [r3, #22]
     402:	f042 0204 	orr.w	r2, r2, #4
     406:	759a      	strb	r2, [r3, #22]
	NVIC->ISER[1] |= 1<<16;	//enable sercom0 RXC int
     408:	4907      	ldr	r1, [pc, #28]	; (428 <terminal_UART_setup+0xa4>)
     40a:	684a      	ldr	r2, [r1, #4]
     40c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     410:	604a      	str	r2, [r1, #4]
	uart->CTRLA.reg |= 1<<1;	//enable
     412:	681a      	ldr	r2, [r3, #0]
     414:	f042 0202 	orr.w	r2, r2, #2
     418:	601a      	str	r2, [r3, #0]
	while(uart->SYNCBUSY.reg){}
     41a:	461a      	mov	r2, r3
     41c:	69d3      	ldr	r3, [r2, #28]
     41e:	2b00      	cmp	r3, #0
     420:	d1fc      	bne.n	41c <terminal_UART_setup+0x98>
}
     422:	4770      	bx	lr
     424:	40003000 	.word	0x40003000
     428:	e000e100 	.word	0xe000e100

0000042c <SERCOM0_2_Handler>:

/* Handler for receiving from terminal UART */
void SERCOM0_2_Handler(void){	//for recieving
	Sercom *ser = SERCOM0;
	SercomUsart *uart = &(ser->USART);
	receive_key = uart->DATA.reg;
     42c:	4b09      	ldr	r3, [pc, #36]	; (454 <SERCOM0_2_Handler+0x28>)
     42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     430:	b2db      	uxtb	r3, r3
     432:	4a09      	ldr	r2, [pc, #36]	; (458 <SERCOM0_2_Handler+0x2c>)
     434:	7013      	strb	r3, [r2, #0]
	if(receive_key != 13){
     436:	7813      	ldrb	r3, [r2, #0]
     438:	b2db      	uxtb	r3, r3
     43a:	2b0d      	cmp	r3, #13
     43c:	d008      	beq.n	450 <SERCOM0_2_Handler+0x24>
		terminal_input_Array[receive_count++] = receive_key;
     43e:	4b07      	ldr	r3, [pc, #28]	; (45c <SERCOM0_2_Handler+0x30>)
     440:	681a      	ldr	r2, [r3, #0]
     442:	1c51      	adds	r1, r2, #1
     444:	6019      	str	r1, [r3, #0]
     446:	4b04      	ldr	r3, [pc, #16]	; (458 <SERCOM0_2_Handler+0x2c>)
     448:	781b      	ldrb	r3, [r3, #0]
     44a:	b2db      	uxtb	r3, r3
     44c:	4904      	ldr	r1, [pc, #16]	; (460 <SERCOM0_2_Handler+0x34>)
     44e:	548b      	strb	r3, [r1, r2]
     450:	4770      	bx	lr
     452:	bf00      	nop
     454:	40003000 	.word	0x40003000
     458:	20000bc8 	.word	0x20000bc8
     45c:	20000b80 	.word	0x20000b80
     460:	20000000 	.word	0x20000000

00000464 <SPI_setup>:

/* Setup SPI for DACs*/
void SPI_setup(void){
	Sercom *ser = SERCOM6;
	SercomSpi *spi = &(ser->SPI);
	spi->CTRLA.reg = 0<<1;	//disable first
     464:	2200      	movs	r2, #0
     466:	4b1a      	ldr	r3, [pc, #104]	; (4d0 <SPI_setup+0x6c>)
     468:	601a      	str	r2, [r3, #0]
	while(spi->SYNCBUSY.reg){}
     46a:	461a      	mov	r2, r3
     46c:	69d3      	ldr	r3, [r2, #28]
     46e:	2b00      	cmp	r3, #0
     470:	d1fc      	bne.n	46c <SPI_setup+0x8>
	spi->CTRLA.bit.DORD = 0;	//MSB first needed for AD5308
     472:	4b17      	ldr	r3, [pc, #92]	; (4d0 <SPI_setup+0x6c>)
     474:	681a      	ldr	r2, [r3, #0]
     476:	f36f 729e 	bfc	r2, #30, #1
     47a:	601a      	str	r2, [r3, #0]
	//spi->CTRLA.bit.DORD = 1;	//LSB first needed for AD5308
	spi->CTRLA.bit.DOPO = 0;	//DO=pad0 PC04, SCK=pad1 PC05, SS=pad2 PC06
     47c:	681a      	ldr	r2, [r3, #0]
     47e:	f36f 4211 	bfc	r2, #16, #2
     482:	601a      	str	r2, [r3, #0]
	spi->CTRLA.bit.FORM = 0;	//SPI frame form
     484:	681a      	ldr	r2, [r3, #0]
     486:	f36f 621b 	bfc	r2, #24, #4
     48a:	601a      	str	r2, [r3, #0]
	spi->CTRLA.bit.MODE = 3;	//master mode
     48c:	681a      	ldr	r2, [r3, #0]
     48e:	2103      	movs	r1, #3
     490:	f361 0284 	bfi	r2, r1, #2, #3
     494:	601a      	str	r2, [r3, #0]
	spi->CTRLB.bit.MSSEN = 0;	//software controlled SS
     496:	685a      	ldr	r2, [r3, #4]
     498:	f36f 324d 	bfc	r2, #13, #1
     49c:	605a      	str	r2, [r3, #4]
	spi->CTRLB.bit.CHSIZE = 0;	//8 bit char size
     49e:	685a      	ldr	r2, [r3, #4]
     4a0:	f36f 0202 	bfc	r2, #0, #3
     4a4:	605a      	str	r2, [r3, #4]
	while(spi->SYNCBUSY.reg){}
     4a6:	461a      	mov	r2, r3
     4a8:	69d3      	ldr	r3, [r2, #28]
     4aa:	2b00      	cmp	r3, #0
     4ac:	d1fc      	bne.n	4a8 <SPI_setup+0x44>
	//spi->BAUD.reg = 55470;	//9600bps at 1MHz
	spi->BAUD.reg = 51;	//9600bps at 1MHz
     4ae:	4b08      	ldr	r3, [pc, #32]	; (4d0 <SPI_setup+0x6c>)
     4b0:	2233      	movs	r2, #51	; 0x33
     4b2:	731a      	strb	r2, [r3, #12]
	spi->INTENSET.bit.TXC = 1;	//transmit complete
     4b4:	7d9a      	ldrb	r2, [r3, #22]
     4b6:	f042 0202 	orr.w	r2, r2, #2
     4ba:	759a      	strb	r2, [r3, #22]
	//NVIC->ISER[2] |= 1<<7;	//enable sercom6 TXC int
	spi->CTRLA.reg |= 1<<1;	//enable
     4bc:	681a      	ldr	r2, [r3, #0]
     4be:	f042 0202 	orr.w	r2, r2, #2
     4c2:	601a      	str	r2, [r3, #0]
	while(spi->SYNCBUSY.reg){}
     4c4:	461a      	mov	r2, r3
     4c6:	69d3      	ldr	r3, [r2, #28]
     4c8:	2b00      	cmp	r3, #0
     4ca:	d1fc      	bne.n	4c6 <SPI_setup+0x62>
	
}
     4cc:	4770      	bx	lr
     4ce:	bf00      	nop
     4d0:	43000800 	.word	0x43000800

000004d4 <write_terminal>:
	SercomSpi *spi = &(ser->SPI);
	spi->INTFLAG.bit.TXC = 1;
}*/

/* Writes to terminal using UART */
void write_terminal(char *a){
     4d4:	3801      	subs	r0, #1
	Sercom *ser = SERCOM0;
	SercomUsart *uart = &(ser->USART);
	
	while(*a){
		while(!(uart->INTFLAG.bit.DRE)){}
     4d6:	4b09      	ldr	r3, [pc, #36]	; (4fc <write_terminal+0x28>)
	while(*a){
     4d8:	e008      	b.n	4ec <write_terminal+0x18>
		while(!(uart->INTFLAG.bit.DRE)){}
     4da:	7e1a      	ldrb	r2, [r3, #24]
     4dc:	f012 0f01 	tst.w	r2, #1
     4e0:	d0fb      	beq.n	4da <write_terminal+0x6>
		uart->DATA.reg = *a++;
     4e2:	6299      	str	r1, [r3, #40]	; 0x28
		while((uart->INTFLAG.bit.TXC)==0){}	// waiting for transmit to complete
     4e4:	7e1a      	ldrb	r2, [r3, #24]
     4e6:	f012 0f02 	tst.w	r2, #2
     4ea:	d0fb      	beq.n	4e4 <write_terminal+0x10>
	while(*a){
     4ec:	f810 1f01 	ldrb.w	r1, [r0, #1]!
     4f0:	2900      	cmp	r1, #0
     4f2:	d1f2      	bne.n	4da <write_terminal+0x6>
	}
	uart->DATA.reg = 10;
     4f4:	220a      	movs	r2, #10
     4f6:	4b01      	ldr	r3, [pc, #4]	; (4fc <write_terminal+0x28>)
     4f8:	629a      	str	r2, [r3, #40]	; 0x28
     4fa:	4770      	bx	lr
     4fc:	40003000 	.word	0x40003000

00000500 <write_menu>:
}

void write_menu(char *a){
     500:	3801      	subs	r0, #1
	Sercom *ser = SERCOM0;
	SercomUsart *uart = &(ser->USART);
	
	while(*a != '#'){
		while(!(uart->INTFLAG.bit.DRE)){}
     502:	4b09      	ldr	r3, [pc, #36]	; (528 <write_menu+0x28>)
	while(*a != '#'){
     504:	e008      	b.n	518 <write_menu+0x18>
		while(!(uart->INTFLAG.bit.DRE)){}
     506:	7e1a      	ldrb	r2, [r3, #24]
     508:	f012 0f01 	tst.w	r2, #1
     50c:	d0fb      	beq.n	506 <write_menu+0x6>
		uart->DATA.reg = *a++;
     50e:	6299      	str	r1, [r3, #40]	; 0x28
		while((uart->INTFLAG.bit.TXC)==0){}	// waiting for transmit to complete
     510:	7e1a      	ldrb	r2, [r3, #24]
     512:	f012 0f02 	tst.w	r2, #2
     516:	d0fb      	beq.n	510 <write_menu+0x10>
	while(*a != '#'){
     518:	f810 1f01 	ldrb.w	r1, [r0, #1]!
     51c:	2923      	cmp	r1, #35	; 0x23
     51e:	d1f2      	bne.n	506 <write_menu+0x6>
	}
	uart->DATA.reg = 10;
     520:	220a      	movs	r2, #10
     522:	4b01      	ldr	r3, [pc, #4]	; (528 <write_menu+0x28>)
     524:	629a      	str	r2, [r3, #40]	; 0x28
     526:	4770      	bx	lr
     528:	40003000 	.word	0x40003000

0000052c <write_SPI>:
}

/* Writes through SPI protocol to DACs */
void write_SPI(char *a){
     52c:	b508      	push	{r3, lr}
	SercomSpi *spi = &(ser->SPI);
	Port *por = PORT;
	PortGroup *porB = &(por->Group[1]);
	PortGroup *porC = &(por->Group[2]);
	
	while( j<2 ){
     52e:	4b1a      	ldr	r3, [pc, #104]	; (598 <write_SPI+0x6c>)
     530:	685b      	ldr	r3, [r3, #4]
     532:	2b01      	cmp	r3, #1
     534:	dc14      	bgt.n	560 <write_SPI+0x34>
		
		spi->DATA.reg = DAC_array[j];
     536:	4918      	ldr	r1, [pc, #96]	; (598 <write_SPI+0x6c>)
     538:	4818      	ldr	r0, [pc, #96]	; (59c <write_SPI+0x70>)
     53a:	4b19      	ldr	r3, [pc, #100]	; (5a0 <write_SPI+0x74>)
     53c:	684a      	ldr	r2, [r1, #4]
     53e:	5c82      	ldrb	r2, [r0, r2]
     540:	b2d2      	uxtb	r2, r2
     542:	629a      	str	r2, [r3, #40]	; 0x28
		//spi->DATA.reg = 0xab;	//test
		while(spi->INTFLAG.bit.DRE == 0){}	//wait for DATA reg to be empty
     544:	7e1a      	ldrb	r2, [r3, #24]
     546:	f012 0f01 	tst.w	r2, #1
     54a:	d0fb      	beq.n	544 <write_SPI+0x18>
		while(spi->INTFLAG.bit.TXC == 0){}	//wait for tx to finish
     54c:	7e1a      	ldrb	r2, [r3, #24]
     54e:	f012 0f02 	tst.w	r2, #2
     552:	d0fb      	beq.n	54c <write_SPI+0x20>
		j++;	//increment counter
     554:	684a      	ldr	r2, [r1, #4]
     556:	3201      	adds	r2, #1
     558:	604a      	str	r2, [r1, #4]
	while( j<2 ){
     55a:	684a      	ldr	r2, [r1, #4]
     55c:	2a01      	cmp	r2, #1
     55e:	dded      	ble.n	53c <write_SPI+0x10>
		//porA->OUTCLR.reg = SS;	//pull SS down
		//wait(1);
		//porA->OUTSET.reg = SS;	//pull SS up
		//}
	}
	wait(1);
     560:	2001      	movs	r0, #1
     562:	4b10      	ldr	r3, [pc, #64]	; (5a4 <write_SPI+0x78>)
     564:	4798      	blx	r3
	////// pulse SS (load) to clk data into dacs for TLV only
	if(slaveSel == 0){
     566:	4b10      	ldr	r3, [pc, #64]	; (5a8 <write_SPI+0x7c>)
     568:	681b      	ldr	r3, [r3, #0]
     56a:	b153      	cbz	r3, 582 <write_SPI+0x56>
		porC->OUTCLR.reg = SS0;
		//wait(1);
		porC->OUTSET.reg = SS0;
	}
	else if(slaveSel == 1){
     56c:	4b0e      	ldr	r3, [pc, #56]	; (5a8 <write_SPI+0x7c>)
     56e:	681b      	ldr	r3, [r3, #0]
     570:	2b01      	cmp	r3, #1
     572:	d10c      	bne.n	58e <write_SPI+0x62>
		porB->OUTCLR.reg = SS0;
     574:	4b0d      	ldr	r3, [pc, #52]	; (5ac <write_SPI+0x80>)
     576:	2240      	movs	r2, #64	; 0x40
     578:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		//wait(1);
		porB->OUTSET.reg = SS0;
     57c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     580:	e005      	b.n	58e <write_SPI+0x62>
		porC->OUTCLR.reg = SS0;
     582:	4b0a      	ldr	r3, [pc, #40]	; (5ac <write_SPI+0x80>)
     584:	2240      	movs	r2, #64	; 0x40
     586:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		porC->OUTSET.reg = SS0;
     58a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	j = 0;
     58e:	2200      	movs	r2, #0
     590:	4b01      	ldr	r3, [pc, #4]	; (598 <write_SPI+0x6c>)
     592:	605a      	str	r2, [r3, #4]
     594:	bd08      	pop	{r3, pc}
     596:	bf00      	nop
     598:	20000b80 	.word	0x20000b80
     59c:	20000bd0 	.word	0x20000bd0
     5a0:	43000800 	.word	0x43000800
     5a4:	0000105d 	.word	0x0000105d
     5a8:	20000bc0 	.word	0x20000bc0
     5ac:	41008000 	.word	0x41008000

000005b0 <dacValue>:
	}
}

/* Selects the value written to the DAC after it has been selected */
void dacValue(void){
	if((*(terminal_input_array_ptr+1) >= 48) && (*(terminal_input_array_ptr+1) <= 57)){	//looking for number keys only
     5b0:	4b1d      	ldr	r3, [pc, #116]	; (628 <dacValue+0x78>)
     5b2:	681a      	ldr	r2, [r3, #0]
     5b4:	7853      	ldrb	r3, [r2, #1]
     5b6:	b2db      	uxtb	r3, r3
     5b8:	2b2f      	cmp	r3, #47	; 0x2f
     5ba:	d913      	bls.n	5e4 <dacValue+0x34>
     5bc:	7853      	ldrb	r3, [r2, #1]
     5be:	b2db      	uxtb	r3, r3
     5c0:	2b39      	cmp	r3, #57	; 0x39
     5c2:	d80f      	bhi.n	5e4 <dacValue+0x34>
		if((*(terminal_input_array_ptr+2) >= 48) && (*(terminal_input_array_ptr+2) <= 57)){	//looking for number keys only
     5c4:	7893      	ldrb	r3, [r2, #2]
     5c6:	b2db      	uxtb	r3, r3
     5c8:	2b2f      	cmp	r3, #47	; 0x2f
     5ca:	d90b      	bls.n	5e4 <dacValue+0x34>
     5cc:	7893      	ldrb	r3, [r2, #2]
     5ce:	b2db      	uxtb	r3, r3
     5d0:	2b39      	cmp	r3, #57	; 0x39
     5d2:	d807      	bhi.n	5e4 <dacValue+0x34>
			if((*(terminal_input_array_ptr+3) >= 48) && (*(terminal_input_array_ptr+3) <= 57)){	//looking for number keys only
     5d4:	78d3      	ldrb	r3, [r2, #3]
     5d6:	b2db      	uxtb	r3, r3
     5d8:	2b2f      	cmp	r3, #47	; 0x2f
     5da:	d903      	bls.n	5e4 <dacValue+0x34>
     5dc:	78d3      	ldrb	r3, [r2, #3]
     5de:	b2db      	uxtb	r3, r3
     5e0:	2b39      	cmp	r3, #57	; 0x39
     5e2:	d900      	bls.n	5e6 <dacValue+0x36>
     5e4:	4770      	bx	lr
void dacValue(void){
     5e6:	b500      	push	{lr}
     5e8:	b083      	sub	sp, #12
				volatile int value = (*(terminal_input_array_ptr+3) - 48) * 100;
     5ea:	78d3      	ldrb	r3, [r2, #3]
     5ec:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
     5f0:	2364      	movs	r3, #100	; 0x64
     5f2:	fb03 f301 	mul.w	r3, r3, r1
     5f6:	9301      	str	r3, [sp, #4]
				value += (*(terminal_input_array_ptr+4) - 48) * 10;
     5f8:	7913      	ldrb	r3, [r2, #4]
     5fa:	9901      	ldr	r1, [sp, #4]
     5fc:	3b30      	subs	r3, #48	; 0x30
     5fe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     602:	eb01 0343 	add.w	r3, r1, r3, lsl #1
     606:	9301      	str	r3, [sp, #4]
				value += *(terminal_input_array_ptr+5) - 48;
     608:	7953      	ldrb	r3, [r2, #5]
     60a:	9a01      	ldr	r2, [sp, #4]
     60c:	3b30      	subs	r3, #48	; 0x30
     60e:	4413      	add	r3, r2
     610:	9301      	str	r3, [sp, #4]
				DAC_array[1] = value;
     612:	9b01      	ldr	r3, [sp, #4]
     614:	b2db      	uxtb	r3, r3
     616:	4a05      	ldr	r2, [pc, #20]	; (62c <dacValue+0x7c>)
     618:	7053      	strb	r3, [r2, #1]
				//arrDACptr = arrDAC;
				write_SPI(DAC_array_ptr);
     61a:	4b05      	ldr	r3, [pc, #20]	; (630 <dacValue+0x80>)
     61c:	6818      	ldr	r0, [r3, #0]
     61e:	4b05      	ldr	r3, [pc, #20]	; (634 <dacValue+0x84>)
     620:	4798      	blx	r3
			}
		}
	}
	
     622:	b003      	add	sp, #12
     624:	f85d fb04 	ldr.w	pc, [sp], #4
     628:	20000bcc 	.word	0x20000bcc
     62c:	20000bd0 	.word	0x20000bd0
     630:	20000bc4 	.word	0x20000bc4
     634:	0000052d 	.word	0x0000052d

00000638 <DAC_select>:
	if((*(terminal_input_array_ptr+1) >= 48) && (*(terminal_input_array_ptr+1) <= 57)){	//looking for number keys only
     638:	4b1c      	ldr	r3, [pc, #112]	; (6ac <DAC_select+0x74>)
     63a:	681a      	ldr	r2, [r3, #0]
     63c:	7853      	ldrb	r3, [r2, #1]
     63e:	b2db      	uxtb	r3, r3
     640:	2b2f      	cmp	r3, #47	; 0x2f
     642:	d932      	bls.n	6aa <DAC_select+0x72>
     644:	7853      	ldrb	r3, [r2, #1]
     646:	b2db      	uxtb	r3, r3
     648:	2b39      	cmp	r3, #57	; 0x39
     64a:	d82e      	bhi.n	6aa <DAC_select+0x72>
		if((*(terminal_input_array_ptr+2) >= 48) && (*(terminal_input_array_ptr+2) <= 57)){	//looking for number keys only
     64c:	7893      	ldrb	r3, [r2, #2]
     64e:	b2db      	uxtb	r3, r3
     650:	2b2f      	cmp	r3, #47	; 0x2f
     652:	d92a      	bls.n	6aa <DAC_select+0x72>
     654:	7893      	ldrb	r3, [r2, #2]
     656:	b2db      	uxtb	r3, r3
     658:	2b39      	cmp	r3, #57	; 0x39
     65a:	d826      	bhi.n	6aa <DAC_select+0x72>
void DAC_select(void){
     65c:	b500      	push	{lr}
     65e:	b083      	sub	sp, #12
			volatile int zone = (*(terminal_input_array_ptr+1) - 48) * 10;
     660:	7853      	ldrb	r3, [r2, #1]
     662:	3b30      	subs	r3, #48	; 0x30
     664:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     668:	005b      	lsls	r3, r3, #1
     66a:	9301      	str	r3, [sp, #4]
			zone += *(terminal_input_array_ptr+2) - 48;
     66c:	7893      	ldrb	r3, [r2, #2]
     66e:	9a01      	ldr	r2, [sp, #4]
     670:	3b30      	subs	r3, #48	; 0x30
     672:	4413      	add	r3, r2
     674:	9301      	str	r3, [sp, #4]
			if(zone <= 7){
     676:	9b01      	ldr	r3, [sp, #4]
     678:	2b07      	cmp	r3, #7
     67a:	dc0c      	bgt.n	696 <DAC_select+0x5e>
				DAC_array[0] = 2 * zone;	// 2 * zone is to accomodate TLV only
     67c:	9b01      	ldr	r3, [sp, #4]
     67e:	005b      	lsls	r3, r3, #1
     680:	b2db      	uxtb	r3, r3
     682:	4a0b      	ldr	r2, [pc, #44]	; (6b0 <DAC_select+0x78>)
     684:	7013      	strb	r3, [r2, #0]
				slaveSel = 0;
     686:	2200      	movs	r2, #0
     688:	4b0a      	ldr	r3, [pc, #40]	; (6b4 <DAC_select+0x7c>)
     68a:	601a      	str	r2, [r3, #0]
			dacValue();
     68c:	4b0a      	ldr	r3, [pc, #40]	; (6b8 <DAC_select+0x80>)
     68e:	4798      	blx	r3
}
     690:	b003      	add	sp, #12
     692:	f85d fb04 	ldr.w	pc, [sp], #4
				DAC_array[0]= 2 * (zone - 8);	// 2 * zone is to accomodate TLV only
     696:	9b01      	ldr	r3, [sp, #4]
     698:	3b08      	subs	r3, #8
     69a:	005b      	lsls	r3, r3, #1
     69c:	b2db      	uxtb	r3, r3
     69e:	4a04      	ldr	r2, [pc, #16]	; (6b0 <DAC_select+0x78>)
     6a0:	7013      	strb	r3, [r2, #0]
				slaveSel = 1;
     6a2:	2201      	movs	r2, #1
     6a4:	4b03      	ldr	r3, [pc, #12]	; (6b4 <DAC_select+0x7c>)
     6a6:	601a      	str	r2, [r3, #0]
     6a8:	e7f0      	b.n	68c <DAC_select+0x54>
     6aa:	4770      	bx	lr
     6ac:	20000bcc 	.word	0x20000bcc
     6b0:	20000bd0 	.word	0x20000bd0
     6b4:	20000bc0 	.word	0x20000bc0
     6b8:	000005b1 	.word	0x000005b1

000006bc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     6bc:	e7fe      	b.n	6bc <Dummy_Handler>
	...

000006c0 <Reset_Handler>:
{
     6c0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     6c2:	4b17      	ldr	r3, [pc, #92]	; (720 <Reset_Handler+0x60>)
     6c4:	4a17      	ldr	r2, [pc, #92]	; (724 <Reset_Handler+0x64>)
     6c6:	429a      	cmp	r2, r3
     6c8:	d010      	beq.n	6ec <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     6ca:	4b17      	ldr	r3, [pc, #92]	; (728 <Reset_Handler+0x68>)
     6cc:	4a14      	ldr	r2, [pc, #80]	; (720 <Reset_Handler+0x60>)
     6ce:	429a      	cmp	r2, r3
     6d0:	d20c      	bcs.n	6ec <Reset_Handler+0x2c>
     6d2:	3b01      	subs	r3, #1
     6d4:	1a9b      	subs	r3, r3, r2
     6d6:	f023 0303 	bic.w	r3, r3, #3
     6da:	3304      	adds	r3, #4
     6dc:	4413      	add	r3, r2
     6de:	4911      	ldr	r1, [pc, #68]	; (724 <Reset_Handler+0x64>)
                        *pDest++ = *pSrc++;
     6e0:	f851 0b04 	ldr.w	r0, [r1], #4
     6e4:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     6e8:	429a      	cmp	r2, r3
     6ea:	d1f9      	bne.n	6e0 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     6ec:	4b0f      	ldr	r3, [pc, #60]	; (72c <Reset_Handler+0x6c>)
     6ee:	4a10      	ldr	r2, [pc, #64]	; (730 <Reset_Handler+0x70>)
     6f0:	429a      	cmp	r2, r3
     6f2:	d20a      	bcs.n	70a <Reset_Handler+0x4a>
     6f4:	3b01      	subs	r3, #1
     6f6:	1a9b      	subs	r3, r3, r2
     6f8:	f023 0303 	bic.w	r3, r3, #3
     6fc:	3304      	adds	r3, #4
     6fe:	4413      	add	r3, r2
                *pDest++ = 0;
     700:	2100      	movs	r1, #0
     702:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     706:	4293      	cmp	r3, r2
     708:	d1fb      	bne.n	702 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     70a:	4a0a      	ldr	r2, [pc, #40]	; (734 <Reset_Handler+0x74>)
     70c:	4b0a      	ldr	r3, [pc, #40]	; (738 <Reset_Handler+0x78>)
     70e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
     712:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     714:	4b09      	ldr	r3, [pc, #36]	; (73c <Reset_Handler+0x7c>)
     716:	4798      	blx	r3
        main();
     718:	4b09      	ldr	r3, [pc, #36]	; (740 <Reset_Handler+0x80>)
     71a:	4798      	blx	r3
     71c:	e7fe      	b.n	71c <Reset_Handler+0x5c>
     71e:	bf00      	nop
     720:	20000000 	.word	0x20000000
     724:	00002dc8 	.word	0x00002dc8
     728:	20000b64 	.word	0x20000b64
     72c:	20000c4c 	.word	0x20000c4c
     730:	20000b64 	.word	0x20000b64
     734:	e000ed00 	.word	0xe000ed00
     738:	00000000 	.word	0x00000000
     73c:	00002c29 	.word	0x00002c29
     740:	00001171 	.word	0x00001171

00000744 <SystemInit>:
 *         Initialize the System and update the SystemCoreClock variable.
 */
void SystemInit(void)
{
	// Keep the default device state after reset
	SystemCoreClock = __SYSTEM_CLOCK;
     744:	4a01      	ldr	r2, [pc, #4]	; (74c <SystemInit+0x8>)
     746:	4b02      	ldr	r3, [pc, #8]	; (750 <SystemInit+0xc>)
     748:	601a      	str	r2, [r3, #0]
     74a:	4770      	bx	lr
     74c:	02dc6c00 	.word	0x02dc6c00
     750:	2000000c 	.word	0x2000000c

00000754 <laser_port_setup>:
	PortGroup *porD = &(por->Group[3]);
	
	//12MHz crystal on board selected mapped to PB22/PB23
	
	/* SERCOM2 Laser1 */
	porB->PMUX[13].bit.PMUXE = 2;	//PB26 pad0 Tx
     754:	4b1f      	ldr	r3, [pc, #124]	; (7d4 <laser_port_setup+0x80>)
     756:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
     75a:	2102      	movs	r1, #2
     75c:	f361 0203 	bfi	r2, r1, #0, #4
     760:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	porB->PINCFG[26].bit.PMUXEN = 1;	
     764:	f893 20da 	ldrb.w	r2, [r3, #218]	; 0xda
     768:	f042 0201 	orr.w	r2, r2, #1
     76c:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
	porB->PMUX[13].bit.PMUXO = 2;	//PB27 pad1 Rx
     770:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
     774:	f361 1207 	bfi	r2, r1, #4, #4
     778:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
	porB->PINCFG[27].bit.PMUXEN = 1;
     77c:	f893 20db 	ldrb.w	r2, [r3, #219]	; 0xdb
     780:	f042 0201 	orr.w	r2, r2, #1
     784:	f883 20db 	strb.w	r2, [r3, #219]	; 0xdb
		
	/* SERCOM1 Laser0 */
	porC->PMUX[13].bit.PMUXO = 2;	//PC27 pad0 Tx
     788:	f893 213d 	ldrb.w	r2, [r3, #317]	; 0x13d
     78c:	f361 1207 	bfi	r2, r1, #4, #4
     790:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	porC->PINCFG[27].bit.PMUXEN = 1;	
     794:	f893 215b 	ldrb.w	r2, [r3, #347]	; 0x15b
     798:	f042 0201 	orr.w	r2, r2, #1
     79c:	f883 215b 	strb.w	r2, [r3, #347]	; 0x15b
	porC->PMUX[14].bit.PMUXO = 2;	//PC28 pad1 Rxm
     7a0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
     7a4:	f361 1207 	bfi	r2, r1, #4, #4
     7a8:	f883 213e 	strb.w	r2, [r3, #318]	; 0x13e
	
	porC->PINCFG[28].bit.PMUXEN = 1;
     7ac:	f893 215c 	ldrb.w	r2, [r3, #348]	; 0x15c
     7b0:	f042 0201 	orr.w	r2, r2, #1
     7b4:	f883 215c 	strb.w	r2, [r3, #348]	; 0x15c
	
	/* EXTINT[11] for Interlock/key */
	porA->PMUX[13].bit.PMUXO = 0;	//PA27 EXTINT[11]
     7b8:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
     7bc:	f36f 1207 	bfc	r2, #4, #4
     7c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	porA->PINCFG[27].bit.PMUXEN = 1;
     7c4:	f893 205b 	ldrb.w	r2, [r3, #91]	; 0x5b
     7c8:	f042 0201 	orr.w	r2, r2, #1
     7cc:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
     7d0:	4770      	bx	lr
     7d2:	bf00      	nop
     7d4:	41008000 	.word	0x41008000

000007d8 <laser0_control_UART_setup>:

/* Setup of UART for laser 0 contorl */
void laser0_control_UART_setup(void){
	Sercom *ser = SERCOM1;
	SercomUsart *uart0 = &(ser->USART);
	uart0->CTRLA.reg = 0;	//enable protected regs
     7d8:	2200      	movs	r2, #0
     7da:	4b27      	ldr	r3, [pc, #156]	; (878 <laser0_control_UART_setup+0xa0>)
     7dc:	601a      	str	r2, [r3, #0]
	while(uart0->SYNCBUSY.reg){}
     7de:	461a      	mov	r2, r3
     7e0:	69d3      	ldr	r3, [r2, #28]
     7e2:	2b00      	cmp	r3, #0
     7e4:	d1fc      	bne.n	7e0 <laser0_control_UART_setup+0x8>
	uart0->CTRLA.bit.DORD = 1;	//LSB transferred first
     7e6:	4b24      	ldr	r3, [pc, #144]	; (878 <laser0_control_UART_setup+0xa0>)
     7e8:	681a      	ldr	r2, [r3, #0]
     7ea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
     7ee:	601a      	str	r2, [r3, #0]
	uart0->CTRLA.bit.CMODE = 0;	//asynchronous mode
     7f0:	681a      	ldr	r2, [r3, #0]
     7f2:	f36f 721c 	bfc	r2, #28, #1
     7f6:	601a      	str	r2, [r3, #0]
	uart0->CTRLA.bit.SAMPR = 0;	//16x oversampling using arithmetic
     7f8:	681a      	ldr	r2, [r3, #0]
     7fa:	f36f 324f 	bfc	r2, #13, #3
     7fe:	601a      	str	r2, [r3, #0]
	uart0->CTRLA.bit.RXPO = 1;	//RX is pad1 PC28
     800:	681a      	ldr	r2, [r3, #0]
     802:	2101      	movs	r1, #1
     804:	f361 5215 	bfi	r2, r1, #20, #2
     808:	601a      	str	r2, [r3, #0]
	uart0->CTRLA.bit.TXPO = 2;	//TX is pad0 PC27
     80a:	681a      	ldr	r2, [r3, #0]
     80c:	2002      	movs	r0, #2
     80e:	f360 4211 	bfi	r2, r0, #16, #2
     812:	601a      	str	r2, [r3, #0]
	uart0->CTRLA.bit.MODE = 1;	//uart with internal clock
     814:	681a      	ldr	r2, [r3, #0]
     816:	f361 0284 	bfi	r2, r1, #2, #3
     81a:	601a      	str	r2, [r3, #0]
	uart0->CTRLB.bit.RXEN = 1;	//enable RX
     81c:	685a      	ldr	r2, [r3, #4]
     81e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
     822:	605a      	str	r2, [r3, #4]
	uart0->CTRLB.bit.TXEN = 1;	//enable TX
     824:	685a      	ldr	r2, [r3, #4]
     826:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     82a:	605a      	str	r2, [r3, #4]
	uart0->CTRLB.bit.PMODE = 0;	//even parity mode
     82c:	685a      	ldr	r2, [r3, #4]
     82e:	f36f 324d 	bfc	r2, #13, #1
     832:	605a      	str	r2, [r3, #4]
	uart0->CTRLB.bit.SBMODE = 0;	//1 stop bit
     834:	685a      	ldr	r2, [r3, #4]
     836:	f36f 1286 	bfc	r2, #6, #1
     83a:	605a      	str	r2, [r3, #4]
	uart0->CTRLB.bit.CHSIZE = 0;	//8bit char size
     83c:	685a      	ldr	r2, [r3, #4]
     83e:	f36f 0202 	bfc	r2, #0, #3
     842:	605a      	str	r2, [r3, #4]
	while(uart0->SYNCBUSY.reg){}
     844:	461a      	mov	r2, r3
     846:	69d3      	ldr	r3, [r2, #28]
     848:	2b00      	cmp	r3, #0
     84a:	d1fc      	bne.n	846 <laser0_control_UART_setup+0x6e>
	uart0->BAUD.reg = 63858;	//for fbaud 19200 at 12Mhz fref
     84c:	4b0a      	ldr	r3, [pc, #40]	; (878 <laser0_control_UART_setup+0xa0>)
     84e:	f64f 1272 	movw	r2, #63858	; 0xf972
     852:	819a      	strh	r2, [r3, #12]
	uart0->INTENSET.bit.RXC = 1;	//receive complete interr
     854:	7d9a      	ldrb	r2, [r3, #22]
     856:	f042 0204 	orr.w	r2, r2, #4
     85a:	759a      	strb	r2, [r3, #22]
	NVIC->ISER[1] |= 1<<20;	//enable sercom1 RXC int
     85c:	4907      	ldr	r1, [pc, #28]	; (87c <laser0_control_UART_setup+0xa4>)
     85e:	684a      	ldr	r2, [r1, #4]
     860:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
     864:	604a      	str	r2, [r1, #4]
	uart0->CTRLA.reg |= 1<<1;	//enable
     866:	681a      	ldr	r2, [r3, #0]
     868:	f042 0202 	orr.w	r2, r2, #2
     86c:	601a      	str	r2, [r3, #0]
	while(uart0->SYNCBUSY.reg){}
     86e:	461a      	mov	r2, r3
     870:	69d3      	ldr	r3, [r2, #28]
     872:	2b00      	cmp	r3, #0
     874:	d1fc      	bne.n	870 <laser0_control_UART_setup+0x98>
	
}
     876:	4770      	bx	lr
     878:	40003400 	.word	0x40003400
     87c:	e000e100 	.word	0xe000e100

00000880 <laser1_control_UART_setup>:

/* Setup of UART for laser 1 contorl */
void laser1_control_UART_setup(void){
 	Sercom *ser = SERCOM2;
	SercomUsart *uart1 = &(ser->USART);
	uart1->CTRLA.reg = 0;	//enable protected regs
     880:	2200      	movs	r2, #0
     882:	4b27      	ldr	r3, [pc, #156]	; (920 <laser1_control_UART_setup+0xa0>)
     884:	601a      	str	r2, [r3, #0]
	while(uart1->SYNCBUSY.reg){}
     886:	461a      	mov	r2, r3
     888:	69d3      	ldr	r3, [r2, #28]
     88a:	2b00      	cmp	r3, #0
     88c:	d1fc      	bne.n	888 <laser1_control_UART_setup+0x8>
	uart1->CTRLA.bit.DORD = 1;	//LSB transferred first
     88e:	4b24      	ldr	r3, [pc, #144]	; (920 <laser1_control_UART_setup+0xa0>)
     890:	681a      	ldr	r2, [r3, #0]
     892:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
     896:	601a      	str	r2, [r3, #0]
	uart1->CTRLA.bit.CMODE = 0;	//asynchronous mode
     898:	681a      	ldr	r2, [r3, #0]
     89a:	f36f 721c 	bfc	r2, #28, #1
     89e:	601a      	str	r2, [r3, #0]
	uart1->CTRLA.bit.SAMPR = 0;	//16x oversampling using arithmetic
     8a0:	681a      	ldr	r2, [r3, #0]
     8a2:	f36f 324f 	bfc	r2, #13, #3
     8a6:	601a      	str	r2, [r3, #0]
	uart1->CTRLA.bit.RXPO = 1;	//RX is pad1 PB31	//pB17(testing)
     8a8:	681a      	ldr	r2, [r3, #0]
     8aa:	2101      	movs	r1, #1
     8ac:	f361 5215 	bfi	r2, r1, #20, #2
     8b0:	601a      	str	r2, [r3, #0]
	uart1->CTRLA.bit.TXPO = 2;	//TX is pad0 PB30	//pB16(testing)
     8b2:	681a      	ldr	r2, [r3, #0]
     8b4:	2002      	movs	r0, #2
     8b6:	f360 4211 	bfi	r2, r0, #16, #2
     8ba:	601a      	str	r2, [r3, #0]
	uart1->CTRLA.bit.MODE = 1;	//uart with internal clock
     8bc:	681a      	ldr	r2, [r3, #0]
     8be:	f361 0284 	bfi	r2, r1, #2, #3
     8c2:	601a      	str	r2, [r3, #0]
	uart1->CTRLB.bit.RXEN = 1;	//enable RX
     8c4:	685a      	ldr	r2, [r3, #4]
     8c6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
     8ca:	605a      	str	r2, [r3, #4]
	uart1->CTRLB.bit.TXEN = 1;	//enable TX
     8cc:	685a      	ldr	r2, [r3, #4]
     8ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     8d2:	605a      	str	r2, [r3, #4]
	uart1->CTRLB.bit.PMODE = 0;	//even parity mode
     8d4:	685a      	ldr	r2, [r3, #4]
     8d6:	f36f 324d 	bfc	r2, #13, #1
     8da:	605a      	str	r2, [r3, #4]
	uart1->CTRLB.bit.SBMODE = 0;	//1 stop bit
     8dc:	685a      	ldr	r2, [r3, #4]
     8de:	f36f 1286 	bfc	r2, #6, #1
     8e2:	605a      	str	r2, [r3, #4]
	uart1->CTRLB.bit.CHSIZE = 0;	//8bit char size
     8e4:	685a      	ldr	r2, [r3, #4]
     8e6:	f36f 0202 	bfc	r2, #0, #3
     8ea:	605a      	str	r2, [r3, #4]
	while(uart1->SYNCBUSY.reg){}
     8ec:	461a      	mov	r2, r3
     8ee:	69d3      	ldr	r3, [r2, #28]
     8f0:	2b00      	cmp	r3, #0
     8f2:	d1fc      	bne.n	8ee <laser1_control_UART_setup+0x6e>
	uart1->BAUD.reg = 63858;	//for fbaud 19200 at 12Mhz fref
     8f4:	4b0a      	ldr	r3, [pc, #40]	; (920 <laser1_control_UART_setup+0xa0>)
     8f6:	f64f 1272 	movw	r2, #63858	; 0xf972
     8fa:	819a      	strh	r2, [r3, #12]
	uart1->INTENSET.bit.RXC = 1;	//receive complete interr
     8fc:	7d9a      	ldrb	r2, [r3, #22]
     8fe:	f042 0204 	orr.w	r2, r2, #4
     902:	759a      	strb	r2, [r3, #22]
	NVIC->ISER[2] |= 1<<12;	//enable sercom7 RXC int
     904:	4907      	ldr	r1, [pc, #28]	; (924 <laser1_control_UART_setup+0xa4>)
     906:	688a      	ldr	r2, [r1, #8]
     908:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
     90c:	608a      	str	r2, [r1, #8]
	uart1->CTRLA.reg |= 1<<1;	//enable
     90e:	681a      	ldr	r2, [r3, #0]
     910:	f042 0202 	orr.w	r2, r2, #2
     914:	601a      	str	r2, [r3, #0]
	while(uart1->SYNCBUSY.reg){}
     916:	461a      	mov	r2, r3
     918:	69d3      	ldr	r3, [r2, #28]
     91a:	2b00      	cmp	r3, #0
     91c:	d1fc      	bne.n	918 <laser1_control_UART_setup+0x98>
	
}
     91e:	4770      	bx	lr
     920:	41012000 	.word	0x41012000
     924:	e000e100 	.word	0xe000e100

00000928 <SERCOM2_2_Handler>:



/* Handler for laser 1 rxc */
void SERCOM2_2_Handler(void){
     928:	b508      	push	{r3, lr}
	Sercom *ser = SERCOM2;
	SercomUsart *uart1 = &(ser->USART);
	static int i = 0;
	if(uart1->DATA.reg != 13){
     92a:	4b0b      	ldr	r3, [pc, #44]	; (958 <SERCOM2_2_Handler+0x30>)
     92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     92e:	2b0d      	cmp	r3, #13
     930:	d009      	beq.n	946 <SERCOM2_2_Handler+0x1e>
		laser1_response_array[i++] = uart1->DATA.reg;
     932:	4b0a      	ldr	r3, [pc, #40]	; (95c <SERCOM2_2_Handler+0x34>)
     934:	681a      	ldr	r2, [r3, #0]
     936:	1c51      	adds	r1, r2, #1
     938:	6019      	str	r1, [r3, #0]
     93a:	4b07      	ldr	r3, [pc, #28]	; (958 <SERCOM2_2_Handler+0x30>)
     93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     93e:	b2db      	uxtb	r3, r3
     940:	4907      	ldr	r1, [pc, #28]	; (960 <SERCOM2_2_Handler+0x38>)
     942:	548b      	strb	r3, [r1, r2]
     944:	bd08      	pop	{r3, pc}
	}
	else{
		i = 0;
     946:	2200      	movs	r2, #0
     948:	4b04      	ldr	r3, [pc, #16]	; (95c <SERCOM2_2_Handler+0x34>)
     94a:	601a      	str	r2, [r3, #0]
		write_terminal(laser1_response_array_ptr);
     94c:	4b05      	ldr	r3, [pc, #20]	; (964 <SERCOM2_2_Handler+0x3c>)
     94e:	6818      	ldr	r0, [r3, #0]
     950:	4b05      	ldr	r3, [pc, #20]	; (968 <SERCOM2_2_Handler+0x40>)
     952:	4798      	blx	r3
     954:	bd08      	pop	{r3, pc}
     956:	bf00      	nop
     958:	41012000 	.word	0x41012000
     95c:	20000b88 	.word	0x20000b88
     960:	20000bd4 	.word	0x20000bd4
     964:	20000be8 	.word	0x20000be8
     968:	000004d5 	.word	0x000004d5

0000096c <SERCOM1_2_Handler>:
	}
}

/* Handler for laser 0 rxc */
void SERCOM1_2_Handler(void){
     96c:	b508      	push	{r3, lr}
	Sercom *ser = SERCOM1;
	SercomUsart *uart0 = &(ser->USART);
	static int i = 0;
	if(uart0->DATA.reg != 13){
     96e:	4b0b      	ldr	r3, [pc, #44]	; (99c <SERCOM1_2_Handler+0x30>)
     970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     972:	2b0d      	cmp	r3, #13
     974:	d009      	beq.n	98a <SERCOM1_2_Handler+0x1e>
		laser0_response_array[i++] = uart0->DATA.reg;
     976:	4b0a      	ldr	r3, [pc, #40]	; (9a0 <SERCOM1_2_Handler+0x34>)
     978:	685a      	ldr	r2, [r3, #4]
     97a:	1c51      	adds	r1, r2, #1
     97c:	6059      	str	r1, [r3, #4]
     97e:	4b07      	ldr	r3, [pc, #28]	; (99c <SERCOM1_2_Handler+0x30>)
     980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     982:	b2db      	uxtb	r3, r3
     984:	4907      	ldr	r1, [pc, #28]	; (9a4 <SERCOM1_2_Handler+0x38>)
     986:	548b      	strb	r3, [r1, r2]
     988:	bd08      	pop	{r3, pc}
	}
	else{
		i = 0;
     98a:	2200      	movs	r2, #0
     98c:	4b04      	ldr	r3, [pc, #16]	; (9a0 <SERCOM1_2_Handler+0x34>)
     98e:	605a      	str	r2, [r3, #4]
		write_terminal(laser0_response_array_ptr);
     990:	4b05      	ldr	r3, [pc, #20]	; (9a8 <SERCOM1_2_Handler+0x3c>)
     992:	6818      	ldr	r0, [r3, #0]
     994:	4b05      	ldr	r3, [pc, #20]	; (9ac <SERCOM1_2_Handler+0x40>)
     996:	4798      	blx	r3
     998:	bd08      	pop	{r3, pc}
     99a:	bf00      	nop
     99c:	40003400 	.word	0x40003400
     9a0:	20000b88 	.word	0x20000b88
     9a4:	20000bec 	.word	0x20000bec
     9a8:	20000c04 	.word	0x20000c04
     9ac:	000004d5 	.word	0x000004d5

000009b0 <write_laser>:
* Note all commands to laser are terminated by carriage return ASCI 13 
* Note all arguments are delimited by space ASCI 32 
* Note there are no arguments when getting laser info
*/
void write_laser(char a, char *b){
	if(a == '0'){
     9b0:	2830      	cmp	r0, #48	; 0x30
     9b2:	d002      	beq.n	9ba <write_laser+0xa>
			while((uart0->INTFLAG.bit.TXC)==0){}	// waiting for transmit to complete
		}
		//uart0->DATA.reg = 13;
	}
	
	else if(a == '1'){
     9b4:	2831      	cmp	r0, #49	; 0x31
     9b6:	d011      	beq.n	9dc <write_laser+0x2c>
     9b8:	4770      	bx	lr
     9ba:	3901      	subs	r1, #1
			while(!(uart0->INTFLAG.bit.DRE)){}
     9bc:	4b10      	ldr	r3, [pc, #64]	; (a00 <write_laser+0x50>)
     9be:	e008      	b.n	9d2 <write_laser+0x22>
     9c0:	7e1a      	ldrb	r2, [r3, #24]
     9c2:	f012 0f01 	tst.w	r2, #1
     9c6:	d0fb      	beq.n	9c0 <write_laser+0x10>
			uart0->DATA.reg = *b++;
     9c8:	6298      	str	r0, [r3, #40]	; 0x28
			while((uart0->INTFLAG.bit.TXC)==0){}	// waiting for transmit to complete
     9ca:	7e1a      	ldrb	r2, [r3, #24]
     9cc:	f012 0f02 	tst.w	r2, #2
     9d0:	d0fb      	beq.n	9ca <write_laser+0x1a>
		while(*b){
     9d2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     9d6:	2800      	cmp	r0, #0
     9d8:	d1f2      	bne.n	9c0 <write_laser+0x10>
     9da:	4770      	bx	lr
     9dc:	3901      	subs	r1, #1
 		Sercom *ser = SERCOM2;
		SercomUsart *uart1 = &(ser->USART);
		 
		while(*b){
			while(!(uart1->INTFLAG.bit.DRE)){}
     9de:	4b09      	ldr	r3, [pc, #36]	; (a04 <write_laser+0x54>)
     9e0:	e008      	b.n	9f4 <write_laser+0x44>
     9e2:	7e1a      	ldrb	r2, [r3, #24]
     9e4:	f012 0f01 	tst.w	r2, #1
     9e8:	d0fb      	beq.n	9e2 <write_laser+0x32>
			uart1->DATA.reg = *b++;
     9ea:	6298      	str	r0, [r3, #40]	; 0x28
			while((uart1->INTFLAG.bit.TXC)==0){}	// waiting for transmit to complete
     9ec:	7e1a      	ldrb	r2, [r3, #24]
     9ee:	f012 0f02 	tst.w	r2, #2
     9f2:	d0fb      	beq.n	9ec <write_laser+0x3c>
		while(*b){
     9f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     9f8:	2800      	cmp	r0, #0
     9fa:	d1f2      	bne.n	9e2 <write_laser+0x32>
     9fc:	e7dc      	b.n	9b8 <write_laser+0x8>
     9fe:	bf00      	nop
     a00:	40003400 	.word	0x40003400
     a04:	41012000 	.word	0x41012000

00000a08 <laser_info_com>:
void laser_info_com(void){
     a08:	b508      	push	{r3, lr}
	char temp = *(terminal_input_array_ptr+2);
     a0a:	4b72      	ldr	r3, [pc, #456]	; (bd4 <laser_info_com+0x1cc>)
     a0c:	6819      	ldr	r1, [r3, #0]
     a0e:	788b      	ldrb	r3, [r1, #2]
     a10:	b2db      	uxtb	r3, r3
	if(*(terminal_input_array_ptr+1) == '0'){	
     a12:	784a      	ldrb	r2, [r1, #1]
     a14:	b2d2      	uxtb	r2, r2
     a16:	2a30      	cmp	r2, #48	; 0x30
     a18:	d005      	beq.n	a26 <laser_info_com+0x1e>
	if(*(terminal_input_array_ptr+1) == '1'){	
     a1a:	784a      	ldrb	r2, [r1, #1]
     a1c:	b2d2      	uxtb	r2, r2
     a1e:	2a31      	cmp	r2, #49	; 0x31
     a20:	f000 80be 	beq.w	ba0 <laser_info_com+0x198>
     a24:	bd08      	pop	{r3, pc}
		switch(temp){
     a26:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
     a2a:	2a08      	cmp	r2, #8
     a2c:	d8f5      	bhi.n	a1a <laser_info_com+0x12>
     a2e:	e8df f012 	tbh	[pc, r2, lsl #1]
     a32:	0009      	.short	0x0009
     a34:	002f001c 	.word	0x002f001c
     a38:	00550042 	.word	0x00550042
     a3c:	007b0068 	.word	0x007b0068
     a40:	00a3008f 	.word	0x00a3008f
			laser_command_ptr = laser_Icommand0;
     a44:	4964      	ldr	r1, [pc, #400]	; (bd8 <laser_info_com+0x1d0>)
     a46:	4b65      	ldr	r3, [pc, #404]	; (bdc <laser_info_com+0x1d4>)
     a48:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     a4a:	2030      	movs	r0, #48	; 0x30
     a4c:	4b64      	ldr	r3, [pc, #400]	; (be0 <laser_info_com+0x1d8>)
     a4e:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     a50:	4b60      	ldr	r3, [pc, #384]	; (bd4 <laser_info_com+0x1cc>)
     a52:	681b      	ldr	r3, [r3, #0]
     a54:	785b      	ldrb	r3, [r3, #1]
     a56:	b2db      	uxtb	r3, r3
     a58:	2b31      	cmp	r3, #49	; 0x31
     a5a:	d1e3      	bne.n	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand0;
     a5c:	495e      	ldr	r1, [pc, #376]	; (bd8 <laser_info_com+0x1d0>)
     a5e:	4b5f      	ldr	r3, [pc, #380]	; (bdc <laser_info_com+0x1d4>)
     a60:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     a62:	2031      	movs	r0, #49	; 0x31
     a64:	4b5e      	ldr	r3, [pc, #376]	; (be0 <laser_info_com+0x1d8>)
     a66:	4798      	blx	r3
			break;
     a68:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_Icommand1;
     a6a:	495e      	ldr	r1, [pc, #376]	; (be4 <laser_info_com+0x1dc>)
     a6c:	4b5b      	ldr	r3, [pc, #364]	; (bdc <laser_info_com+0x1d4>)
     a6e:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     a70:	2030      	movs	r0, #48	; 0x30
     a72:	4b5b      	ldr	r3, [pc, #364]	; (be0 <laser_info_com+0x1d8>)
     a74:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     a76:	4b57      	ldr	r3, [pc, #348]	; (bd4 <laser_info_com+0x1cc>)
     a78:	681b      	ldr	r3, [r3, #0]
     a7a:	785b      	ldrb	r3, [r3, #1]
     a7c:	b2db      	uxtb	r3, r3
     a7e:	2b31      	cmp	r3, #49	; 0x31
     a80:	d1d0      	bne.n	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand1;
     a82:	4958      	ldr	r1, [pc, #352]	; (be4 <laser_info_com+0x1dc>)
     a84:	4b55      	ldr	r3, [pc, #340]	; (bdc <laser_info_com+0x1d4>)
     a86:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     a88:	2031      	movs	r0, #49	; 0x31
     a8a:	4b55      	ldr	r3, [pc, #340]	; (be0 <laser_info_com+0x1d8>)
     a8c:	4798      	blx	r3
			break;
     a8e:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_Icommand2;
     a90:	4955      	ldr	r1, [pc, #340]	; (be8 <laser_info_com+0x1e0>)
     a92:	4b52      	ldr	r3, [pc, #328]	; (bdc <laser_info_com+0x1d4>)
     a94:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     a96:	2030      	movs	r0, #48	; 0x30
     a98:	4b51      	ldr	r3, [pc, #324]	; (be0 <laser_info_com+0x1d8>)
     a9a:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     a9c:	4b4d      	ldr	r3, [pc, #308]	; (bd4 <laser_info_com+0x1cc>)
     a9e:	681b      	ldr	r3, [r3, #0]
     aa0:	785b      	ldrb	r3, [r3, #1]
     aa2:	b2db      	uxtb	r3, r3
     aa4:	2b31      	cmp	r3, #49	; 0x31
     aa6:	d1bd      	bne.n	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand2;
     aa8:	494f      	ldr	r1, [pc, #316]	; (be8 <laser_info_com+0x1e0>)
     aaa:	4b4c      	ldr	r3, [pc, #304]	; (bdc <laser_info_com+0x1d4>)
     aac:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     aae:	2031      	movs	r0, #49	; 0x31
     ab0:	4b4b      	ldr	r3, [pc, #300]	; (be0 <laser_info_com+0x1d8>)
     ab2:	4798      	blx	r3
			break;
     ab4:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_Icommand3;
     ab6:	494d      	ldr	r1, [pc, #308]	; (bec <laser_info_com+0x1e4>)
     ab8:	4b48      	ldr	r3, [pc, #288]	; (bdc <laser_info_com+0x1d4>)
     aba:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     abc:	2030      	movs	r0, #48	; 0x30
     abe:	4b48      	ldr	r3, [pc, #288]	; (be0 <laser_info_com+0x1d8>)
     ac0:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     ac2:	4b44      	ldr	r3, [pc, #272]	; (bd4 <laser_info_com+0x1cc>)
     ac4:	681b      	ldr	r3, [r3, #0]
     ac6:	785b      	ldrb	r3, [r3, #1]
     ac8:	b2db      	uxtb	r3, r3
     aca:	2b31      	cmp	r3, #49	; 0x31
     acc:	d1aa      	bne.n	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand3;
     ace:	4947      	ldr	r1, [pc, #284]	; (bec <laser_info_com+0x1e4>)
     ad0:	4b42      	ldr	r3, [pc, #264]	; (bdc <laser_info_com+0x1d4>)
     ad2:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     ad4:	2031      	movs	r0, #49	; 0x31
     ad6:	4b42      	ldr	r3, [pc, #264]	; (be0 <laser_info_com+0x1d8>)
     ad8:	4798      	blx	r3
			break;
     ada:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_Icommand4;
     adc:	4944      	ldr	r1, [pc, #272]	; (bf0 <laser_info_com+0x1e8>)
     ade:	4b3f      	ldr	r3, [pc, #252]	; (bdc <laser_info_com+0x1d4>)
     ae0:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     ae2:	2030      	movs	r0, #48	; 0x30
     ae4:	4b3e      	ldr	r3, [pc, #248]	; (be0 <laser_info_com+0x1d8>)
     ae6:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     ae8:	4b3a      	ldr	r3, [pc, #232]	; (bd4 <laser_info_com+0x1cc>)
     aea:	681b      	ldr	r3, [r3, #0]
     aec:	785b      	ldrb	r3, [r3, #1]
     aee:	b2db      	uxtb	r3, r3
     af0:	2b31      	cmp	r3, #49	; 0x31
     af2:	d197      	bne.n	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand4;
     af4:	493e      	ldr	r1, [pc, #248]	; (bf0 <laser_info_com+0x1e8>)
     af6:	4b39      	ldr	r3, [pc, #228]	; (bdc <laser_info_com+0x1d4>)
     af8:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     afa:	2031      	movs	r0, #49	; 0x31
     afc:	4b38      	ldr	r3, [pc, #224]	; (be0 <laser_info_com+0x1d8>)
     afe:	4798      	blx	r3
			break;
     b00:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_Icommand5;
     b02:	493c      	ldr	r1, [pc, #240]	; (bf4 <laser_info_com+0x1ec>)
     b04:	4b35      	ldr	r3, [pc, #212]	; (bdc <laser_info_com+0x1d4>)
     b06:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     b08:	2030      	movs	r0, #48	; 0x30
     b0a:	4b35      	ldr	r3, [pc, #212]	; (be0 <laser_info_com+0x1d8>)
     b0c:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     b0e:	4b31      	ldr	r3, [pc, #196]	; (bd4 <laser_info_com+0x1cc>)
     b10:	681b      	ldr	r3, [r3, #0]
     b12:	785b      	ldrb	r3, [r3, #1]
     b14:	b2db      	uxtb	r3, r3
     b16:	2b31      	cmp	r3, #49	; 0x31
     b18:	d184      	bne.n	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand5;
     b1a:	4936      	ldr	r1, [pc, #216]	; (bf4 <laser_info_com+0x1ec>)
     b1c:	4b2f      	ldr	r3, [pc, #188]	; (bdc <laser_info_com+0x1d4>)
     b1e:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     b20:	2031      	movs	r0, #49	; 0x31
     b22:	4b2f      	ldr	r3, [pc, #188]	; (be0 <laser_info_com+0x1d8>)
     b24:	4798      	blx	r3
			break;
     b26:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_Icommand6;
     b28:	4933      	ldr	r1, [pc, #204]	; (bf8 <laser_info_com+0x1f0>)
     b2a:	4b2c      	ldr	r3, [pc, #176]	; (bdc <laser_info_com+0x1d4>)
     b2c:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     b2e:	2030      	movs	r0, #48	; 0x30
     b30:	4b2b      	ldr	r3, [pc, #172]	; (be0 <laser_info_com+0x1d8>)
     b32:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     b34:	4b27      	ldr	r3, [pc, #156]	; (bd4 <laser_info_com+0x1cc>)
     b36:	681b      	ldr	r3, [r3, #0]
     b38:	785b      	ldrb	r3, [r3, #1]
     b3a:	b2db      	uxtb	r3, r3
     b3c:	2b31      	cmp	r3, #49	; 0x31
     b3e:	f47f af71 	bne.w	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand6;
     b42:	492d      	ldr	r1, [pc, #180]	; (bf8 <laser_info_com+0x1f0>)
     b44:	4b25      	ldr	r3, [pc, #148]	; (bdc <laser_info_com+0x1d4>)
     b46:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     b48:	2031      	movs	r0, #49	; 0x31
     b4a:	4b25      	ldr	r3, [pc, #148]	; (be0 <laser_info_com+0x1d8>)
     b4c:	4798      	blx	r3
			break;
     b4e:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_Icommand7;
     b50:	492a      	ldr	r1, [pc, #168]	; (bfc <laser_info_com+0x1f4>)
     b52:	4b22      	ldr	r3, [pc, #136]	; (bdc <laser_info_com+0x1d4>)
     b54:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     b56:	2030      	movs	r0, #48	; 0x30
     b58:	4b21      	ldr	r3, [pc, #132]	; (be0 <laser_info_com+0x1d8>)
     b5a:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     b5c:	4b1d      	ldr	r3, [pc, #116]	; (bd4 <laser_info_com+0x1cc>)
     b5e:	681b      	ldr	r3, [r3, #0]
     b60:	785b      	ldrb	r3, [r3, #1]
     b62:	b2db      	uxtb	r3, r3
     b64:	2b31      	cmp	r3, #49	; 0x31
     b66:	f47f af5d 	bne.w	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand7;
     b6a:	4924      	ldr	r1, [pc, #144]	; (bfc <laser_info_com+0x1f4>)
     b6c:	4b1b      	ldr	r3, [pc, #108]	; (bdc <laser_info_com+0x1d4>)
     b6e:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     b70:	2031      	movs	r0, #49	; 0x31
     b72:	4b1b      	ldr	r3, [pc, #108]	; (be0 <laser_info_com+0x1d8>)
     b74:	4798      	blx	r3
			break;
     b76:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_Icommand8;
     b78:	4921      	ldr	r1, [pc, #132]	; (c00 <laser_info_com+0x1f8>)
     b7a:	4b18      	ldr	r3, [pc, #96]	; (bdc <laser_info_com+0x1d4>)
     b7c:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     b7e:	2030      	movs	r0, #48	; 0x30
     b80:	4b17      	ldr	r3, [pc, #92]	; (be0 <laser_info_com+0x1d8>)
     b82:	4798      	blx	r3
	if(*(terminal_input_array_ptr+1) == '1'){	
     b84:	4b13      	ldr	r3, [pc, #76]	; (bd4 <laser_info_com+0x1cc>)
     b86:	681b      	ldr	r3, [r3, #0]
     b88:	785b      	ldrb	r3, [r3, #1]
     b8a:	b2db      	uxtb	r3, r3
     b8c:	2b31      	cmp	r3, #49	; 0x31
     b8e:	f47f af49 	bne.w	a24 <laser_info_com+0x1c>
			laser_command_ptr = laser_Icommand8;
     b92:	491b      	ldr	r1, [pc, #108]	; (c00 <laser_info_com+0x1f8>)
     b94:	4b11      	ldr	r3, [pc, #68]	; (bdc <laser_info_com+0x1d4>)
     b96:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     b98:	2031      	movs	r0, #49	; 0x31
     b9a:	4b11      	ldr	r3, [pc, #68]	; (be0 <laser_info_com+0x1d8>)
     b9c:	4798      	blx	r3
}
     b9e:	e741      	b.n	a24 <laser_info_com+0x1c>
		switch(temp){
     ba0:	3b30      	subs	r3, #48	; 0x30
     ba2:	2b08      	cmp	r3, #8
     ba4:	f63f af3e 	bhi.w	a24 <laser_info_com+0x1c>
     ba8:	a201      	add	r2, pc, #4	; (adr r2, bb0 <laser_info_com+0x1a8>)
     baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bae:	bf00      	nop
     bb0:	00000a5d 	.word	0x00000a5d
     bb4:	00000a83 	.word	0x00000a83
     bb8:	00000aa9 	.word	0x00000aa9
     bbc:	00000acf 	.word	0x00000acf
     bc0:	00000af5 	.word	0x00000af5
     bc4:	00000b1b 	.word	0x00000b1b
     bc8:	00000b43 	.word	0x00000b43
     bcc:	00000b6b 	.word	0x00000b6b
     bd0:	00000b93 	.word	0x00000b93
     bd4:	20000bcc 	.word	0x20000bcc
     bd8:	20000010 	.word	0x20000010
     bdc:	20000c00 	.word	0x20000c00
     be0:	000009b1 	.word	0x000009b1
     be4:	20000018 	.word	0x20000018
     be8:	2000001c 	.word	0x2000001c
     bec:	20000024 	.word	0x20000024
     bf0:	2000002c 	.word	0x2000002c
     bf4:	20000030 	.word	0x20000030
     bf8:	20000034 	.word	0x20000034
     bfc:	2000003c 	.word	0x2000003c
     c00:	20000040 	.word	0x20000040

00000c04 <laser_com>:
void laser_com(void){
     c04:	b508      	push	{r3, lr}
	if(*(terminal_input_array_ptr+1) == '0'){
     c06:	4b1b      	ldr	r3, [pc, #108]	; (c74 <laser_com+0x70>)
     c08:	681a      	ldr	r2, [r3, #0]
     c0a:	7853      	ldrb	r3, [r2, #1]
     c0c:	b2db      	uxtb	r3, r3
     c0e:	2b30      	cmp	r3, #48	; 0x30
     c10:	d004      	beq.n	c1c <laser_com+0x18>
	else if(*(terminal_input_array_ptr+1) == '1'){
     c12:	7853      	ldrb	r3, [r2, #1]
     c14:	b2db      	uxtb	r3, r3
     c16:	2b31      	cmp	r3, #49	; 0x31
     c18:	d016      	beq.n	c48 <laser_com+0x44>
     c1a:	bd08      	pop	{r3, pc}
		if(*(terminal_input_array_ptr+2) == '0'){
     c1c:	7893      	ldrb	r3, [r2, #2]
     c1e:	b2db      	uxtb	r3, r3
     c20:	2b30      	cmp	r3, #48	; 0x30
     c22:	d00a      	beq.n	c3a <laser_com+0x36>
		else if(*(terminal_input_array_ptr+2) == '1'){
     c24:	7893      	ldrb	r3, [r2, #2]
     c26:	b2db      	uxtb	r3, r3
     c28:	2b31      	cmp	r3, #49	; 0x31
     c2a:	d1f6      	bne.n	c1a <laser_com+0x16>
			laser_command_ptr = laser_command1;
     c2c:	4912      	ldr	r1, [pc, #72]	; (c78 <laser_com+0x74>)
     c2e:	4b13      	ldr	r3, [pc, #76]	; (c7c <laser_com+0x78>)
     c30:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     c32:	2030      	movs	r0, #48	; 0x30
     c34:	4b12      	ldr	r3, [pc, #72]	; (c80 <laser_com+0x7c>)
     c36:	4798      	blx	r3
     c38:	bd08      	pop	{r3, pc}
			laser_command_ptr = laser_command0;
     c3a:	4912      	ldr	r1, [pc, #72]	; (c84 <laser_com+0x80>)
     c3c:	4b0f      	ldr	r3, [pc, #60]	; (c7c <laser_com+0x78>)
     c3e:	6019      	str	r1, [r3, #0]
			write_laser('0', laser_command_ptr);
     c40:	2030      	movs	r0, #48	; 0x30
     c42:	4b0f      	ldr	r3, [pc, #60]	; (c80 <laser_com+0x7c>)
     c44:	4798      	blx	r3
     c46:	bd08      	pop	{r3, pc}
		if(*(terminal_input_array_ptr+2) == '0'){
     c48:	7893      	ldrb	r3, [r2, #2]
     c4a:	b2db      	uxtb	r3, r3
     c4c:	2b30      	cmp	r3, #48	; 0x30
     c4e:	d00a      	beq.n	c66 <laser_com+0x62>
		else if(*(terminal_input_array_ptr+2) == '1'){
     c50:	7893      	ldrb	r3, [r2, #2]
     c52:	b2db      	uxtb	r3, r3
     c54:	2b31      	cmp	r3, #49	; 0x31
     c56:	d1e0      	bne.n	c1a <laser_com+0x16>
			laser_command_ptr = laser_command1;
     c58:	4907      	ldr	r1, [pc, #28]	; (c78 <laser_com+0x74>)
     c5a:	4b08      	ldr	r3, [pc, #32]	; (c7c <laser_com+0x78>)
     c5c:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     c5e:	2031      	movs	r0, #49	; 0x31
     c60:	4b07      	ldr	r3, [pc, #28]	; (c80 <laser_com+0x7c>)
     c62:	4798      	blx	r3
}
     c64:	e7d9      	b.n	c1a <laser_com+0x16>
			laser_command_ptr = laser_command0;
     c66:	4907      	ldr	r1, [pc, #28]	; (c84 <laser_com+0x80>)
     c68:	4b04      	ldr	r3, [pc, #16]	; (c7c <laser_com+0x78>)
     c6a:	6019      	str	r1, [r3, #0]
			write_laser('1', laser_command_ptr);
     c6c:	2031      	movs	r0, #49	; 0x31
     c6e:	4b04      	ldr	r3, [pc, #16]	; (c80 <laser_com+0x7c>)
     c70:	4798      	blx	r3
     c72:	bd08      	pop	{r3, pc}
     c74:	20000bcc 	.word	0x20000bcc
     c78:	2000004c 	.word	0x2000004c
     c7c:	20000c00 	.word	0x20000c00
     c80:	000009b1 	.word	0x000009b1
     c84:	20000048 	.word	0x20000048

00000c88 <laser_start_seq>:
		//uart1->DATA.reg = 13;
	}
	
} 
/* Laser Start Sequence */
void laser_start_seq(void){
     c88:	b570      	push	{r4, r5, r6, lr}
	laser_command_ptr = laser_Scommand0;	//disable auto start
     c8a:	4d0e      	ldr	r5, [pc, #56]	; (cc4 <laser_start_seq+0x3c>)
     c8c:	4e0e      	ldr	r6, [pc, #56]	; (cc8 <laser_start_seq+0x40>)
     c8e:	f106 0144 	add.w	r1, r6, #68	; 0x44
     c92:	6029      	str	r1, [r5, #0]
	write_laser('0', laser_command_ptr);
     c94:	2030      	movs	r0, #48	; 0x30
     c96:	4c0d      	ldr	r4, [pc, #52]	; (ccc <laser_start_seq+0x44>)
     c98:	47a0      	blx	r4
	write_laser('1', laser_command_ptr);
     c9a:	6829      	ldr	r1, [r5, #0]
     c9c:	2031      	movs	r0, #49	; 0x31
     c9e:	47a0      	blx	r4
	laser_command_ptr = laser_Scommand1;	//disable direct ctrl
     ca0:	f106 0150 	add.w	r1, r6, #80	; 0x50
     ca4:	6029      	str	r1, [r5, #0]
	write_laser('0', laser_command_ptr);
     ca6:	2030      	movs	r0, #48	; 0x30
     ca8:	47a0      	blx	r4
	write_laser('1', laser_command_ptr);
     caa:	6829      	ldr	r1, [r5, #0]
     cac:	2031      	movs	r0, #49	; 0x31
     cae:	47a0      	blx	r4
	laser_command_ptr = laser_command0;	//turn off lasers as a precautionary measure
     cb0:	f106 0138 	add.w	r1, r6, #56	; 0x38
     cb4:	6029      	str	r1, [r5, #0]
	write_laser('0', laser_command_ptr);
     cb6:	2030      	movs	r0, #48	; 0x30
     cb8:	47a0      	blx	r4
	write_laser('1', laser_command_ptr);
     cba:	6829      	ldr	r1, [r5, #0]
     cbc:	2031      	movs	r0, #49	; 0x31
     cbe:	47a0      	blx	r4
     cc0:	bd70      	pop	{r4, r5, r6, pc}
     cc2:	bf00      	nop
     cc4:	20000c00 	.word	0x20000c00
     cc8:	20000010 	.word	0x20000010
     ccc:	000009b1 	.word	0x000009b1

00000cd0 <laser_key_EIC_setup>:
/******************************************************
*  If laser is beig turned on or interlock is set
*  key must be toggled 
*  ***************************************************/
void laser_key_EIC_setup(void){
	EIC->CTRLA.reg = 0;
     cd0:	2200      	movs	r2, #0
     cd2:	4b1b      	ldr	r3, [pc, #108]	; (d40 <laser_key_EIC_setup+0x70>)
     cd4:	701a      	strb	r2, [r3, #0]
	while(EIC->SYNCBUSY.reg){}
     cd6:	461a      	mov	r2, r3
     cd8:	6853      	ldr	r3, [r2, #4]
     cda:	2b00      	cmp	r3, #0
     cdc:	d1fc      	bne.n	cd8 <laser_key_EIC_setup+0x8>
	EIC->CTRLA.bit.CKSEL = 0;	//EIC is clocked by GCLK
     cde:	4b18      	ldr	r3, [pc, #96]	; (d40 <laser_key_EIC_setup+0x70>)
     ce0:	781a      	ldrb	r2, [r3, #0]
     ce2:	f36f 1204 	bfc	r2, #4, #1
     ce6:	701a      	strb	r2, [r3, #0]
	EIC->INTENSET.reg |= 1<<11;	
     ce8:	691a      	ldr	r2, [r3, #16]
     cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
     cee:	611a      	str	r2, [r3, #16]
	EIC->ASYNCH.reg |= 1<<11;	//asynchronous mode
     cf0:	699a      	ldr	r2, [r3, #24]
     cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
     cf6:	619a      	str	r2, [r3, #24]
	//EIC->CONFIG[1].bit.SENSE3 = 1;	//rising edge detection
	
	/* Debouncing */
	EIC->CONFIG[1].bit.SENSE3 = 3;	//both edge detection
     cf8:	6a1a      	ldr	r2, [r3, #32]
     cfa:	2103      	movs	r1, #3
     cfc:	f361 320e 	bfi	r2, r1, #12, #3
     d00:	621a      	str	r2, [r3, #32]
	EIC->ASYNCH.reg |= 0;	//synchronous mode
     d02:	699a      	ldr	r2, [r3, #24]
     d04:	619a      	str	r2, [r3, #24]
	EIC->DEBOUNCEN.reg |= 1<<11;
     d06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
     d0c:	631a      	str	r2, [r3, #48]	; 0x30
	EIC->DPRESCALER.bit.TICKON = 1;	//use prescaled clk (low freq)
     d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     d10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     d14:	635a      	str	r2, [r3, #52]	; 0x34
	EIC->DPRESCALER.bit.STATES1 = 1;	//use 3 low freq samples to validate transistion
     d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     d18:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     d1c:	635a      	str	r2, [r3, #52]	; 0x34
	EIC->DPRESCALER.bit.PRESCALER1 = 6;	//divide EIC by 64
     d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     d20:	2106      	movs	r1, #6
     d22:	f361 1206 	bfi	r2, r1, #4, #3
     d26:	635a      	str	r2, [r3, #52]	; 0x34
	
	EIC->CTRLA.reg = 1<<1;	//enable
     d28:	2202      	movs	r2, #2
     d2a:	701a      	strb	r2, [r3, #0]
	while(EIC->SYNCBUSY.reg){}	
     d2c:	461a      	mov	r2, r3
     d2e:	6853      	ldr	r3, [r2, #4]
     d30:	2b00      	cmp	r3, #0
     d32:	d1fc      	bne.n	d2e <laser_key_EIC_setup+0x5e>
	NVIC->ISER[0] |= 1<<23;	//enable the NVIC handler 
     d34:	4a03      	ldr	r2, [pc, #12]	; (d44 <laser_key_EIC_setup+0x74>)
     d36:	6813      	ldr	r3, [r2, #0]
     d38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
     d3c:	6013      	str	r3, [r2, #0]
     d3e:	4770      	bx	lr
     d40:	40002800 	.word	0x40002800
     d44:	e000e100 	.word	0xe000e100

00000d48 <EIC_11_Handler>:
*  Handler acknowledges key toggling to turn on lasers
*  Writes commands to clear fault and turn laser ON
*  Delay ~ 1s after turn ON/OFF command to actual laser turn ON/OFF
*  ***************************************************/
void EIC_11_Handler(void){
	EIC->INTFLAG.reg = 1<<11;	//clear int flag
     d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
     d4c:	4b05      	ldr	r3, [pc, #20]	; (d64 <EIC_11_Handler+0x1c>)
     d4e:	615a      	str	r2, [r3, #20]
	Tc *tc = TC5;
	TcCount16 *tc5 = &tc->COUNT16;
	tc5->CTRLBSET.bit.CMD = 1;	//force retrigger of 1s timer
     d50:	4a05      	ldr	r2, [pc, #20]	; (d68 <EIC_11_Handler+0x20>)
     d52:	7953      	ldrb	r3, [r2, #5]
     d54:	2101      	movs	r1, #1
     d56:	f361 1347 	bfi	r3, r1, #5, #3
     d5a:	7153      	strb	r3, [r2, #5]
	while(tc5->SYNCBUSY.reg){}	//wait for sync of disable
     d5c:	6913      	ldr	r3, [r2, #16]
     d5e:	2b00      	cmp	r3, #0
     d60:	d1fc      	bne.n	d5c <EIC_11_Handler+0x14>
// 		EIC_pinstate = true;
// 	}
// 	else if(EIC->PINSTATE.reg == 0){
// 		EIC_pinstate = false;
// 	}
}
     d62:	4770      	bx	lr
     d64:	40002800 	.word	0x40002800
     d68:	42001800 	.word	0x42001800

00000d6c <laser_key_delay_timer_setup>:

/* TC5 Creates a delay of ~1s when laser key is toggled until turn ON/OFF */
void laser_key_delay_timer_setup(void){	
	Tc *tc = TC5;
	TcCount16 *tc5 = &tc->COUNT16;
	tc5->CTRLA.reg = 0;	//disable the TC5
     d6c:	2200      	movs	r2, #0
     d6e:	4b19      	ldr	r3, [pc, #100]	; (dd4 <laser_key_delay_timer_setup+0x68>)
     d70:	601a      	str	r2, [r3, #0]
	while(tc5->SYNCBUSY.reg){}	//wait for sync of disable
     d72:	461a      	mov	r2, r3
     d74:	6913      	ldr	r3, [r2, #16]
     d76:	2b00      	cmp	r3, #0
     d78:	d1fc      	bne.n	d74 <laser_key_delay_timer_setup+0x8>
	tc5->CTRLA.bit.PRESCALER = 4;	//divide by 2^n;
     d7a:	4b16      	ldr	r3, [pc, #88]	; (dd4 <laser_key_delay_timer_setup+0x68>)
     d7c:	681a      	ldr	r2, [r3, #0]
     d7e:	2104      	movs	r1, #4
     d80:	f361 220a 	bfi	r2, r1, #8, #3
     d84:	601a      	str	r2, [r3, #0]
	tc5->CTRLA.bit.MODE = 0;	//16 bit mode
     d86:	681a      	ldr	r2, [r3, #0]
     d88:	f36f 0283 	bfc	r2, #2, #2
     d8c:	601a      	str	r2, [r3, #0]
	tc5->CTRLBSET.bit.ONESHOT = 1;	//turn on one shot mode
     d8e:	795a      	ldrb	r2, [r3, #5]
     d90:	430a      	orrs	r2, r1
     d92:	715a      	strb	r2, [r3, #5]
	while(tc5->SYNCBUSY.reg){}	//wait for sync of disable
     d94:	461a      	mov	r2, r3
     d96:	6913      	ldr	r3, [r2, #16]
     d98:	2b00      	cmp	r3, #0
     d9a:	d1fc      	bne.n	d96 <laser_key_delay_timer_setup+0x2a>
	tc5->INTENSET.bit.OVF = 1;	//enable the overflow interrupt
     d9c:	4a0d      	ldr	r2, [pc, #52]	; (dd4 <laser_key_delay_timer_setup+0x68>)
     d9e:	7a53      	ldrb	r3, [r2, #9]
     da0:	f043 0301 	orr.w	r3, r3, #1
     da4:	7253      	strb	r3, [r2, #9]
	while(tc5->SYNCBUSY.reg){}	//wait for sync of disable
     da6:	6913      	ldr	r3, [r2, #16]
     da8:	2b00      	cmp	r3, #0
     daa:	d1fc      	bne.n	da6 <laser_key_delay_timer_setup+0x3a>
	tc5->CTRLA.reg |= 1<<1;	//enable the TC5
     dac:	4a09      	ldr	r2, [pc, #36]	; (dd4 <laser_key_delay_timer_setup+0x68>)
     dae:	6813      	ldr	r3, [r2, #0]
     db0:	f043 0302 	orr.w	r3, r3, #2
     db4:	6013      	str	r3, [r2, #0]
	while(tc5->SYNCBUSY.reg){}	//wait for sync of disable
     db6:	6913      	ldr	r3, [r2, #16]
     db8:	2b00      	cmp	r3, #0
     dba:	d1fc      	bne.n	db6 <laser_key_delay_timer_setup+0x4a>
	tc5->CTRLBSET.bit.CMD = 2;	//stop. This is here because it starts counting right away and it needs to start by EIC
     dbc:	4a05      	ldr	r2, [pc, #20]	; (dd4 <laser_key_delay_timer_setup+0x68>)
     dbe:	7953      	ldrb	r3, [r2, #5]
     dc0:	2102      	movs	r1, #2
     dc2:	f361 1347 	bfi	r3, r1, #5, #3
     dc6:	7153      	strb	r3, [r2, #5]
	NVIC->ISER[3] |= 1<<16;	//enable the NVIC handler for TC5
     dc8:	4a03      	ldr	r2, [pc, #12]	; (dd8 <laser_key_delay_timer_setup+0x6c>)
     dca:	68d3      	ldr	r3, [r2, #12]
     dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
     dd0:	60d3      	str	r3, [r2, #12]
     dd2:	4770      	bx	lr
     dd4:	42001800 	.word	0x42001800
     dd8:	e000e100 	.word	0xe000e100

00000ddc <TC5_Handler>:
}

void TC5_Handler(void){
     ddc:	b570      	push	{r4, r5, r6, lr}
	Tc *tc = TC5;
	TcCount16 *tc5 = &tc->COUNT16;
	tc5->INTFLAG.bit.OVF = 1;	//clear the int flag
     dde:	4a15      	ldr	r2, [pc, #84]	; (e34 <TC5_Handler+0x58>)
     de0:	7a93      	ldrb	r3, [r2, #10]
     de2:	f043 0301 	orr.w	r3, r3, #1
     de6:	7293      	strb	r3, [r2, #10]
	while(tc5->SYNCBUSY.reg){}	//wait for sync of disable
     de8:	6913      	ldr	r3, [r2, #16]
     dea:	2b00      	cmp	r3, #0
     dec:	d1fc      	bne.n	de8 <TC5_Handler+0xc>
		
	/* Write to lasers to restart */
	//if(EIC_pinstate){
		if(EIC->PINSTATE.reg == 0x800){
     dee:	4b12      	ldr	r3, [pc, #72]	; (e38 <TC5_Handler+0x5c>)
     df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
     df6:	d009      	beq.n	e0c <TC5_Handler+0x30>
		write_laser('1', laser_command_ptr);
	}
	
	else{
		/* Turn Laser OFF */
		laser_command_ptr = laser_command0;
     df8:	4d10      	ldr	r5, [pc, #64]	; (e3c <TC5_Handler+0x60>)
     dfa:	4911      	ldr	r1, [pc, #68]	; (e40 <TC5_Handler+0x64>)
     dfc:	6029      	str	r1, [r5, #0]
		write_laser('0', laser_command_ptr);
     dfe:	2030      	movs	r0, #48	; 0x30
     e00:	4c10      	ldr	r4, [pc, #64]	; (e44 <TC5_Handler+0x68>)
     e02:	47a0      	blx	r4
		write_laser('1', laser_command_ptr);
     e04:	6829      	ldr	r1, [r5, #0]
     e06:	2031      	movs	r0, #49	; 0x31
     e08:	47a0      	blx	r4
     e0a:	bd70      	pop	{r4, r5, r6, pc}
		laser_command_ptr = laser_command2;
     e0c:	4e0b      	ldr	r6, [pc, #44]	; (e3c <TC5_Handler+0x60>)
     e0e:	4c0e      	ldr	r4, [pc, #56]	; (e48 <TC5_Handler+0x6c>)
     e10:	f104 015c 	add.w	r1, r4, #92	; 0x5c
     e14:	6031      	str	r1, [r6, #0]
		write_laser('0', laser_command_ptr);
     e16:	2030      	movs	r0, #48	; 0x30
     e18:	4d0a      	ldr	r5, [pc, #40]	; (e44 <TC5_Handler+0x68>)
     e1a:	47a8      	blx	r5
		write_laser('1', laser_command_ptr);		
     e1c:	6831      	ldr	r1, [r6, #0]
     e1e:	2031      	movs	r0, #49	; 0x31
     e20:	47a8      	blx	r5
		laser_command_ptr = laser_command1;
     e22:	f104 013c 	add.w	r1, r4, #60	; 0x3c
     e26:	6031      	str	r1, [r6, #0]
		write_laser('0', laser_command_ptr);
     e28:	2030      	movs	r0, #48	; 0x30
     e2a:	47a8      	blx	r5
		write_laser('1', laser_command_ptr);
     e2c:	6831      	ldr	r1, [r6, #0]
     e2e:	2031      	movs	r0, #49	; 0x31
     e30:	47a8      	blx	r5
     e32:	bd70      	pop	{r4, r5, r6, pc}
     e34:	42001800 	.word	0x42001800
     e38:	40002800 	.word	0x40002800
     e3c:	20000c00 	.word	0x20000c00
     e40:	20000048 	.word	0x20000048
     e44:	000009b1 	.word	0x000009b1
     e48:	20000010 	.word	0x20000010

00000e4c <clock_setup>:
}

/* CLock source is 12MHz divided to 1MHz */
void clock_setup(void){
	/* 12MHz crystal on board selected mapped to PB22/PB23 */
	OSCCTRL->XOSCCTRL[1].bit.ENALC = 1;	//enables auto loop ctrl to control amp of osc
     e4c:	4b32      	ldr	r3, [pc, #200]	; (f18 <clock_setup+0xcc>)
     e4e:	699a      	ldr	r2, [r3, #24]
     e50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
     e54:	619a      	str	r2, [r3, #24]
	OSCCTRL->XOSCCTRL[1].bit.IMULT = 4;
     e56:	699a      	ldr	r2, [r3, #24]
     e58:	2104      	movs	r1, #4
     e5a:	f361 22ce 	bfi	r2, r1, #11, #4
     e5e:	619a      	str	r2, [r3, #24]
	OSCCTRL->XOSCCTRL[1].bit.IPTAT = 3;
     e60:	699a      	ldr	r2, [r3, #24]
     e62:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
     e66:	619a      	str	r2, [r3, #24]
	OSCCTRL->XOSCCTRL[1].bit.ONDEMAND = 1;
     e68:	699a      	ldr	r2, [r3, #24]
     e6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     e6e:	619a      	str	r2, [r3, #24]
	OSCCTRL->XOSCCTRL[1].bit.RUNSTDBY = 1;
     e70:	699a      	ldr	r2, [r3, #24]
     e72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     e76:	619a      	str	r2, [r3, #24]
	OSCCTRL->XOSCCTRL[1].bit.XTALEN = 1;	//select ext crystal osc mode
     e78:	699a      	ldr	r2, [r3, #24]
     e7a:	430a      	orrs	r2, r1
     e7c:	619a      	str	r2, [r3, #24]
	OSCCTRL->XOSCCTRL[1].bit.ENABLE = 1;
     e7e:	699a      	ldr	r2, [r3, #24]
     e80:	f042 0202 	orr.w	r2, r2, #2
     e84:	619a      	str	r2, [r3, #24]
	
	GCLK->GENCTRL[0].reg = GCLK_GENCTRL_SRC_XOSC1 | GCLK_GENCTRL_RUNSTDBY | !(GCLK_GENCTRL_DIVSEL) | GCLK_GENCTRL_OE | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_DIV(12);	//divide by 12 = 1MHz
     e86:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
     e8a:	4a24      	ldr	r2, [pc, #144]	; (f1c <clock_setup+0xd0>)
     e8c:	621a      	str	r2, [r3, #32]
	GCLK->GENCTRL[1].reg = GCLK_GENCTRL_SRC_XOSC1 | GCLK_GENCTRL_RUNSTDBY | !(GCLK_GENCTRL_DIVSEL) | GCLK_GENCTRL_OE | GCLK_GENCTRL_GENEN | GCLK_GENCTRL_DIV(1);	//divide by 1 = 12MHz
     e8e:	f5a2 2230 	sub.w	r2, r2, #720896	; 0xb0000
     e92:	625a      	str	r2, [r3, #36]	; 0x24
	while(GCLK->SYNCBUSY.reg){}	//wait for sync
     e94:	461a      	mov	r2, r3
     e96:	6853      	ldr	r3, [r2, #4]
     e98:	2b00      	cmp	r3, #0
     e9a:	d1fc      	bne.n	e96 <clock_setup+0x4a>
	
	GCLK->PCHCTRL[7].bit.CHEN = 0;	//disable for safety first
     e9c:	4b20      	ldr	r3, [pc, #128]	; (f20 <clock_setup+0xd4>)
     e9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
     ea2:	f36f 1286 	bfc	r2, #6, #1
     ea6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	GCLK->PCHCTRL[7].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0;	//SERCOM0
     eaa:	2240      	movs	r2, #64	; 0x40
     eac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	GCLK->PCHCTRL[36].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0;	//SERCOM6
     eb0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	GCLK->PCHCTRL[30].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0;	//TC4/TC5
     eb4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	GCLK->PCHCTRL[40].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0;	//ADC0
     eb8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	GCLK->PCHCTRL[41].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0;	//ADC1
     ebc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	GCLK->PCHCTRL[4].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK0;	//EIC
     ec0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	GCLK->PCHCTRL[8].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK1;	//SERCOM1
     ec4:	2241      	movs	r2, #65	; 0x41
     ec6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GCLK->PCHCTRL[23].reg = GCLK_PCHCTRL_CHEN | GCLK_PCHCTRL_GEN_GCLK1;	//SERCOM2
     eca:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc


	MCLK->CPUDIV.reg = 1;	//divide by 1
     ece:	f5a3 53a0 	sub.w	r3, r3, #5120	; 0x1400
     ed2:	2201      	movs	r2, #1
     ed4:	715a      	strb	r2, [r3, #5]
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_SERCOM0;	//unmask sercom0
     ed6:	695a      	ldr	r2, [r3, #20]
     ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
     edc:	615a      	str	r2, [r3, #20]
	MCLK->APBDMASK.reg |= MCLK_APBDMASK_SERCOM6;	//unmask sercom6
     ede:	6a1a      	ldr	r2, [r3, #32]
     ee0:	f042 0204 	orr.w	r2, r2, #4
     ee4:	621a      	str	r2, [r3, #32]
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC4;	//unmask TC4
     ee6:	69da      	ldr	r2, [r3, #28]
     ee8:	f042 0220 	orr.w	r2, r2, #32
     eec:	61da      	str	r2, [r3, #28]
	MCLK->APBCMASK.reg |= MCLK_APBCMASK_TC5;	//unmask TC5
     eee:	69da      	ldr	r2, [r3, #28]
     ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     ef4:	61da      	str	r2, [r3, #28]
	MCLK->APBDMASK.reg |= MCLK_APBDMASK_ADC1 | MCLK_APBDMASK_ADC0;//unmask ADC1
     ef6:	6a1a      	ldr	r2, [r3, #32]
     ef8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
     efc:	621a      	str	r2, [r3, #32]
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_EIC;	//unmask EIC
     efe:	695a      	ldr	r2, [r3, #20]
     f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     f04:	615a      	str	r2, [r3, #20]
	MCLK->APBAMASK.reg |= MCLK_APBAMASK_SERCOM1;	//unmask sercom1
     f06:	695a      	ldr	r2, [r3, #20]
     f08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     f0c:	615a      	str	r2, [r3, #20]
	MCLK->APBBMASK.reg |= MCLK_APBBMASK_SERCOM2;	//unmask sercom2
     f0e:	699a      	ldr	r2, [r3, #24]
     f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
     f14:	619a      	str	r2, [r3, #24]
     f16:	4770      	bx	lr
     f18:	40001000 	.word	0x40001000
     f1c:	000c2901 	.word	0x000c2901
     f20:	40001c00 	.word	0x40001c00

00000f24 <port_control>:
void port_control(void){
	
		Port *por = PORT;
		PortGroup *porB = &(por->Group[1]);
		
	if((*(terminal_input_array_ptr+1) >= 48) && (*(terminal_input_array_ptr+1) <= 57)){	//looking for number keys only
     f24:	4b4b      	ldr	r3, [pc, #300]	; (1054 <port_control+0x130>)
     f26:	681a      	ldr	r2, [r3, #0]
     f28:	7853      	ldrb	r3, [r2, #1]
     f2a:	b2db      	uxtb	r3, r3
     f2c:	2b2f      	cmp	r3, #47	; 0x2f
     f2e:	d92f      	bls.n	f90 <port_control+0x6c>
     f30:	7853      	ldrb	r3, [r2, #1]
     f32:	b2db      	uxtb	r3, r3
     f34:	2b39      	cmp	r3, #57	; 0x39
     f36:	d82b      	bhi.n	f90 <port_control+0x6c>
		if((*(terminal_input_array_ptr+2) >= 48) && (*(terminal_input_array_ptr+2) <= 57)){	//looking for number keys only
     f38:	7893      	ldrb	r3, [r2, #2]
     f3a:	b2db      	uxtb	r3, r3
     f3c:	2b2f      	cmp	r3, #47	; 0x2f
     f3e:	d927      	bls.n	f90 <port_control+0x6c>
     f40:	7893      	ldrb	r3, [r2, #2]
     f42:	b2db      	uxtb	r3, r3
     f44:	2b39      	cmp	r3, #57	; 0x39
     f46:	d823      	bhi.n	f90 <port_control+0x6c>
void port_control(void){
     f48:	b082      	sub	sp, #8
			volatile int zone = (*(terminal_input_array_ptr+1) - 48) * 10;
     f4a:	7853      	ldrb	r3, [r2, #1]
     f4c:	3b30      	subs	r3, #48	; 0x30
     f4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     f52:	005b      	lsls	r3, r3, #1
     f54:	9301      	str	r3, [sp, #4]
			zone += *(terminal_input_array_ptr+2) - 48;
     f56:	7893      	ldrb	r3, [r2, #2]
     f58:	9901      	ldr	r1, [sp, #4]
     f5a:	3b30      	subs	r3, #48	; 0x30
     f5c:	440b      	add	r3, r1
     f5e:	9301      	str	r3, [sp, #4]
			
			switch(zone){
     f60:	9b01      	ldr	r3, [sp, #4]
     f62:	2b03      	cmp	r3, #3
     f64:	d813      	bhi.n	f8e <port_control+0x6a>
     f66:	e8df f003 	tbb	[pc, r3]
     f6a:	2002      	.short	0x2002
     f6c:	583c      	.short	0x583c
				case 0:
				if(*(terminal_input_array_ptr+3) == 'L' || *(terminal_input_array_ptr+3) == 'l'){
     f6e:	78d3      	ldrb	r3, [r2, #3]
     f70:	b2db      	uxtb	r3, r3
     f72:	2b4c      	cmp	r3, #76	; 0x4c
     f74:	d00d      	beq.n	f92 <port_control+0x6e>
     f76:	78d3      	ldrb	r3, [r2, #3]
     f78:	b2db      	uxtb	r3, r3
     f7a:	2b6c      	cmp	r3, #108	; 0x6c
     f7c:	d009      	beq.n	f92 <port_control+0x6e>
					porB->OUTCLR.reg = D00;
				}
				else if(*(terminal_input_array_ptr+3) == 'H' || *(terminal_input_array_ptr+3) == 'h'){
     f7e:	78d3      	ldrb	r3, [r2, #3]
     f80:	b2db      	uxtb	r3, r3
     f82:	2b48      	cmp	r3, #72	; 0x48
     f84:	d00b      	beq.n	f9e <port_control+0x7a>
     f86:	78d3      	ldrb	r3, [r2, #3]
     f88:	b2db      	uxtb	r3, r3
     f8a:	2b68      	cmp	r3, #104	; 0x68
     f8c:	d007      	beq.n	f9e <port_control+0x7a>
				default:
				break;
			}
		}
	}
}
     f8e:	b002      	add	sp, #8
     f90:	4770      	bx	lr
					porB->OUTCLR.reg = D00;
     f92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     f96:	4b30      	ldr	r3, [pc, #192]	; (1058 <port_control+0x134>)
     f98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     f9c:	e7f7      	b.n	f8e <port_control+0x6a>
					porB->OUTSET.reg = D00;
     f9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
     fa2:	4b2d      	ldr	r3, [pc, #180]	; (1058 <port_control+0x134>)
     fa4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     fa8:	e7f1      	b.n	f8e <port_control+0x6a>
				if(*(terminal_input_array_ptr+3) == 'L' || *(terminal_input_array_ptr+3) == 'l'){
     faa:	78d3      	ldrb	r3, [r2, #3]
     fac:	b2db      	uxtb	r3, r3
     fae:	2b4c      	cmp	r3, #76	; 0x4c
     fb0:	d011      	beq.n	fd6 <port_control+0xb2>
     fb2:	78d3      	ldrb	r3, [r2, #3]
     fb4:	b2db      	uxtb	r3, r3
     fb6:	2b6c      	cmp	r3, #108	; 0x6c
     fb8:	d00d      	beq.n	fd6 <port_control+0xb2>
				else if(*(terminal_input_array_ptr+3) == 'H' || *(terminal_input_array_ptr+3) == 'h'){
     fba:	78d3      	ldrb	r3, [r2, #3]
     fbc:	b2db      	uxtb	r3, r3
     fbe:	2b48      	cmp	r3, #72	; 0x48
     fc0:	d003      	beq.n	fca <port_control+0xa6>
     fc2:	78d3      	ldrb	r3, [r2, #3]
     fc4:	b2db      	uxtb	r3, r3
     fc6:	2b68      	cmp	r3, #104	; 0x68
     fc8:	d1e1      	bne.n	f8e <port_control+0x6a>
					porB->OUTSET.reg = D01;
     fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     fce:	4b22      	ldr	r3, [pc, #136]	; (1058 <port_control+0x134>)
     fd0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
     fd4:	e7db      	b.n	f8e <port_control+0x6a>
					porB->OUTCLR.reg = D01;
     fd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     fda:	4b1f      	ldr	r3, [pc, #124]	; (1058 <port_control+0x134>)
     fdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
     fe0:	e7d5      	b.n	f8e <port_control+0x6a>
				if(*(terminal_input_array_ptr+3) == 'L' || *(terminal_input_array_ptr+3) == 'l'){
     fe2:	78d3      	ldrb	r3, [r2, #3]
     fe4:	b2db      	uxtb	r3, r3
     fe6:	2b4c      	cmp	r3, #76	; 0x4c
     fe8:	d011      	beq.n	100e <port_control+0xea>
     fea:	78d3      	ldrb	r3, [r2, #3]
     fec:	b2db      	uxtb	r3, r3
     fee:	2b6c      	cmp	r3, #108	; 0x6c
     ff0:	d00d      	beq.n	100e <port_control+0xea>
				else if(*(terminal_input_array_ptr+3) == 'H' || *(terminal_input_array_ptr+3) == 'h'){
     ff2:	78d3      	ldrb	r3, [r2, #3]
     ff4:	b2db      	uxtb	r3, r3
     ff6:	2b48      	cmp	r3, #72	; 0x48
     ff8:	d003      	beq.n	1002 <port_control+0xde>
     ffa:	78d3      	ldrb	r3, [r2, #3]
     ffc:	b2db      	uxtb	r3, r3
     ffe:	2b68      	cmp	r3, #104	; 0x68
    1000:	d1c5      	bne.n	f8e <port_control+0x6a>
					porB->OUTSET.reg = D02;
    1002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1006:	4b14      	ldr	r3, [pc, #80]	; (1058 <port_control+0x134>)
    1008:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    100c:	e7bf      	b.n	f8e <port_control+0x6a>
					porB->OUTCLR.reg = D02;
    100e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    1012:	4b11      	ldr	r3, [pc, #68]	; (1058 <port_control+0x134>)
    1014:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1018:	e7b9      	b.n	f8e <port_control+0x6a>
				if(*(terminal_input_array_ptr+3) == 'L' || *(terminal_input_array_ptr+3) == 'l'){
    101a:	78d3      	ldrb	r3, [r2, #3]
    101c:	b2db      	uxtb	r3, r3
    101e:	2b4c      	cmp	r3, #76	; 0x4c
    1020:	d011      	beq.n	1046 <port_control+0x122>
    1022:	78d3      	ldrb	r3, [r2, #3]
    1024:	b2db      	uxtb	r3, r3
    1026:	2b6c      	cmp	r3, #108	; 0x6c
    1028:	d00d      	beq.n	1046 <port_control+0x122>
				else if(*(terminal_input_array_ptr+3) == 'H' || *(terminal_input_array_ptr+3) == 'h'){
    102a:	78d3      	ldrb	r3, [r2, #3]
    102c:	b2db      	uxtb	r3, r3
    102e:	2b48      	cmp	r3, #72	; 0x48
    1030:	d003      	beq.n	103a <port_control+0x116>
    1032:	78d3      	ldrb	r3, [r2, #3]
    1034:	b2db      	uxtb	r3, r3
    1036:	2b68      	cmp	r3, #104	; 0x68
    1038:	d1a9      	bne.n	f8e <port_control+0x6a>
					porB->OUTSET.reg = D03;
    103a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    103e:	4b06      	ldr	r3, [pc, #24]	; (1058 <port_control+0x134>)
    1040:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
    1044:	e7a3      	b.n	f8e <port_control+0x6a>
					porB->OUTCLR.reg = D03;
    1046:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    104a:	4b03      	ldr	r3, [pc, #12]	; (1058 <port_control+0x134>)
    104c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1050:	e79d      	b.n	f8e <port_control+0x6a>
    1052:	bf00      	nop
    1054:	20000bcc 	.word	0x20000bcc
    1058:	41008000 	.word	0x41008000

0000105c <wait>:

void wait(volatile int d){
    105c:	b082      	sub	sp, #8
    105e:	9001      	str	r0, [sp, #4]
	int count = 0;
	while (count < d*1000){
    1060:	9a01      	ldr	r2, [sp, #4]
    1062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    1066:	fb03 f302 	mul.w	r3, r3, r2
    106a:	2b00      	cmp	r3, #0
    106c:	dd08      	ble.n	1080 <wait+0x24>
    106e:	2200      	movs	r2, #0
    1070:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
		count++;
    1074:	3201      	adds	r2, #1
	while (count < d*1000){
    1076:	9b01      	ldr	r3, [sp, #4]
    1078:	fb01 f303 	mul.w	r3, r1, r3
    107c:	4293      	cmp	r3, r2
    107e:	dcf9      	bgt.n	1074 <wait+0x18>
	}
}
    1080:	b002      	add	sp, #8
    1082:	4770      	bx	lr

00001084 <convert>:

/* Converts an int into a char so that it can be displayed*/

void convert(int *a){
    1084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int y = *a;
    1088:	6801      	ldr	r1, [r0, #0]
	int i = 100;   //divisor
	int j = 0;  //array counter
	int m = 1;  //counter
	int n = 100;    //increment to divisor
    108a:	2564      	movs	r5, #100	; 0x64
	int m = 1;  //counter
    108c:	2001      	movs	r0, #1
	int j = 0;  //array counter
    108e:	2400      	movs	r4, #0
	int i = 100;   //divisor
    1090:	462a      	mov	r2, r5
				i = 10;
				n = 10;
			}
			if(j == 2){
				i = 1;
				n = 1;
    1092:	4607      	mov	r7, r0
				convert_array[j++] = 'A';
    1094:	4e32      	ldr	r6, [pc, #200]	; (1160 <convert+0xdc>)
    1096:	f04f 0b41 	mov.w	fp, #65	; 0x41
				convert_array[j++] = '9';
    109a:	f04f 0a39 	mov.w	sl, #57	; 0x39
				convert_array[j++] = '8';
    109e:	f04f 0938 	mov.w	r9, #56	; 0x38
				convert_array[j++] = '7';
    10a2:	f04f 0837 	mov.w	r8, #55	; 0x37
				convert_array[j++] = '6';
    10a6:	f04f 0c36 	mov.w	ip, #54	; 0x36
				convert_array[j++] = '5';
    10aa:	f04f 0e35 	mov.w	lr, #53	; 0x35
    10ae:	e01d      	b.n	10ec <convert+0x68>
			m = 1;
    10b0:	4620      	mov	r0, r4
				n = 10;
    10b2:	250a      	movs	r5, #10
				i = 10;
    10b4:	462a      	mov	r2, r5
    10b6:	e019      	b.n	10ec <convert+0x68>
				n = 1;
    10b8:	463d      	mov	r5, r7
			m = 1;
    10ba:	4638      	mov	r0, r7
				i = 1;
    10bc:	463a      	mov	r2, r7
    10be:	e015      	b.n	10ec <convert+0x68>
			int p = (m-1);
    10c0:	3801      	subs	r0, #1
			switch(p) {
    10c2:	2809      	cmp	r0, #9
    10c4:	d83f      	bhi.n	1146 <convert+0xc2>
    10c6:	e8df f000 	tbb	[pc, r0]
    10ca:	1a05      	.short	0x1a05
    10cc:	2a26221e 	.word	0x2a26221e
    10d0:	3a36322e 	.word	0x3a36322e
				convert_array[j++] = '0';
    10d4:	2330      	movs	r3, #48	; 0x30
    10d6:	5533      	strb	r3, [r6, r4]
    10d8:	3401      	adds	r4, #1
			y = y - (n*(m-1));
    10da:	fb05 1110 	mls	r1, r5, r0, r1
			if(j == 1){
    10de:	2c01      	cmp	r4, #1
    10e0:	d0e6      	beq.n	10b0 <convert+0x2c>
			if(j == 2){
    10e2:	2c02      	cmp	r4, #2
    10e4:	d0e8      	beq.n	10b8 <convert+0x34>
			m = 1;
    10e6:	2001      	movs	r0, #1
	while(j <= 3){
    10e8:	2c03      	cmp	r4, #3
    10ea:	dc30      	bgt.n	114e <convert+0xca>
		int b = y % i;
    10ec:	fb91 f3f2 	sdiv	r3, r1, r2
    10f0:	fb02 1313 	mls	r3, r2, r3, r1
		if(b == y) {
    10f4:	428b      	cmp	r3, r1
    10f6:	d0e3      	beq.n	10c0 <convert+0x3c>
			}
			
		}
		else{
			m++;
    10f8:	3001      	adds	r0, #1
			i = i + n;
    10fa:	442a      	add	r2, r5
    10fc:	e7f4      	b.n	10e8 <convert+0x64>
				convert_array[j++] = '1';
    10fe:	2331      	movs	r3, #49	; 0x31
    1100:	5533      	strb	r3, [r6, r4]
    1102:	3401      	adds	r4, #1
				break;
    1104:	e7e9      	b.n	10da <convert+0x56>
				convert_array[j++] = '2';
    1106:	2332      	movs	r3, #50	; 0x32
    1108:	5533      	strb	r3, [r6, r4]
    110a:	3401      	adds	r4, #1
				break;
    110c:	e7e5      	b.n	10da <convert+0x56>
				convert_array[j++] = '3';
    110e:	2333      	movs	r3, #51	; 0x33
    1110:	5533      	strb	r3, [r6, r4]
    1112:	3401      	adds	r4, #1
				break;
    1114:	e7e1      	b.n	10da <convert+0x56>
				convert_array[j++] = '4';
    1116:	2334      	movs	r3, #52	; 0x34
    1118:	5533      	strb	r3, [r6, r4]
    111a:	3401      	adds	r4, #1
				break;
    111c:	e7dd      	b.n	10da <convert+0x56>
				convert_array[j++] = '5';
    111e:	f806 e004 	strb.w	lr, [r6, r4]
    1122:	3401      	adds	r4, #1
				break;
    1124:	e7d9      	b.n	10da <convert+0x56>
				convert_array[j++] = '6';
    1126:	f806 c004 	strb.w	ip, [r6, r4]
    112a:	3401      	adds	r4, #1
				break;
    112c:	e7d5      	b.n	10da <convert+0x56>
				convert_array[j++] = '7';
    112e:	f806 8004 	strb.w	r8, [r6, r4]
    1132:	3401      	adds	r4, #1
				break;
    1134:	e7d1      	b.n	10da <convert+0x56>
				convert_array[j++] = '8';
    1136:	f806 9004 	strb.w	r9, [r6, r4]
    113a:	3401      	adds	r4, #1
				break;
    113c:	e7cd      	b.n	10da <convert+0x56>
				convert_array[j++] = '9';
    113e:	f806 a004 	strb.w	sl, [r6, r4]
    1142:	3401      	adds	r4, #1
				break;
    1144:	e7c9      	b.n	10da <convert+0x56>
				convert_array[j++] = 'A';
    1146:	f806 b004 	strb.w	fp, [r6, r4]
    114a:	3401      	adds	r4, #1
				break;
    114c:	e7c5      	b.n	10da <convert+0x56>
		}
	}
	convert_array[3] = 0;	//force pointer to end here
    114e:	2200      	movs	r2, #0
    1150:	4b03      	ldr	r3, [pc, #12]	; (1160 <convert+0xdc>)
    1152:	70da      	strb	r2, [r3, #3]
	write_terminal(convert_array_ptr);
    1154:	4b03      	ldr	r3, [pc, #12]	; (1164 <convert+0xe0>)
    1156:	6818      	ldr	r0, [r3, #0]
    1158:	4b03      	ldr	r3, [pc, #12]	; (1168 <convert+0xe4>)
    115a:	4798      	blx	r3
    115c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1160:	20000c08 	.word	0x20000c08
    1164:	20000c0c 	.word	0x20000c0c
    1168:	000004d5 	.word	0x000004d5
    116c:	00000000 	.word	0x00000000

00001170 <main>:
int main(void){
    1170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1174:	b088      	sub	sp, #32
    SystemInit();	
    1176:	4b92      	ldr	r3, [pc, #584]	; (13c0 <main+0x250>)
    1178:	4798      	blx	r3
	clock_setup();
    117a:	4b92      	ldr	r3, [pc, #584]	; (13c4 <main+0x254>)
    117c:	4798      	blx	r3
	porB->DIRSET.reg = D00 | D01 | D02 | D03;	//PB26, PB27, PB28, PB29 //digital outputs
    117e:	f04f 5270 	mov.w	r2, #1006632960	; 0x3c000000
    1182:	4b91      	ldr	r3, [pc, #580]	; (13c8 <main+0x258>)
    1184:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	terminal_UART_setup();	
    1188:	4b90      	ldr	r3, [pc, #576]	; (13cc <main+0x25c>)
    118a:	4798      	blx	r3
	SPI_setup();	
    118c:	4b90      	ldr	r3, [pc, #576]	; (13d0 <main+0x260>)
    118e:	4798      	blx	r3
	ADC_0_Setup();
    1190:	4b90      	ldr	r3, [pc, #576]	; (13d4 <main+0x264>)
    1192:	4798      	blx	r3
	ADC_1_Setup();
    1194:	4b90      	ldr	r3, [pc, #576]	; (13d8 <main+0x268>)
    1196:	4798      	blx	r3
	rtd_TC_Setup();
    1198:	4b90      	ldr	r3, [pc, #576]	; (13dc <main+0x26c>)
    119a:	4798      	blx	r3
	rtd_port_setup();
    119c:	4b90      	ldr	r3, [pc, #576]	; (13e0 <main+0x270>)
    119e:	4798      	blx	r3
	COMM_Port_Setup();
    11a0:	4b90      	ldr	r3, [pc, #576]	; (13e4 <main+0x274>)
    11a2:	4798      	blx	r3
	laser0_control_UART_setup();
    11a4:	4b90      	ldr	r3, [pc, #576]	; (13e8 <main+0x278>)
    11a6:	4798      	blx	r3
	laser1_control_UART_setup();
    11a8:	4b90      	ldr	r3, [pc, #576]	; (13ec <main+0x27c>)
    11aa:	4798      	blx	r3
 	laser_port_setup();
    11ac:	4b90      	ldr	r3, [pc, #576]	; (13f0 <main+0x280>)
    11ae:	4798      	blx	r3
	laser_key_EIC_setup ();
    11b0:	4b90      	ldr	r3, [pc, #576]	; (13f4 <main+0x284>)
    11b2:	4798      	blx	r3
	laser_key_delay_timer_setup();
    11b4:	4b90      	ldr	r3, [pc, #576]	; (13f8 <main+0x288>)
    11b6:	4798      	blx	r3
 	laser_start_seq();
    11b8:	4b90      	ldr	r3, [pc, #576]	; (13fc <main+0x28c>)
    11ba:	4798      	blx	r3
	motor_port_setup();
    11bc:	4b90      	ldr	r3, [pc, #576]	; (1400 <main+0x290>)
    11be:	4798      	blx	r3
	motor_EIC_setup();
    11c0:	4b90      	ldr	r3, [pc, #576]	; (1404 <main+0x294>)
    11c2:	4798      	blx	r3
	volatile char start_array[] = "Start\n";
    11c4:	4b90      	ldr	r3, [pc, #576]	; (1408 <main+0x298>)
    11c6:	e893 0003 	ldmia.w	r3, {r0, r1}
    11ca:	9006      	str	r0, [sp, #24]
    11cc:	f8ad 101c 	strh.w	r1, [sp, #28]
    11d0:	0c09      	lsrs	r1, r1, #16
    11d2:	f88d 101e 	strb.w	r1, [sp, #30]
	write_terminal(start_array_ptr);
    11d6:	a806      	add	r0, sp, #24
    11d8:	4b8c      	ldr	r3, [pc, #560]	; (140c <main+0x29c>)
    11da:	4798      	blx	r3
	RTD_array_ptr = RTD_array;
    11dc:	4a8c      	ldr	r2, [pc, #560]	; (1410 <main+0x2a0>)
    11de:	4b8d      	ldr	r3, [pc, #564]	; (1414 <main+0x2a4>)
    11e0:	601a      	str	r2, [r3, #0]
	terminal_input_array_ptr = terminal_input_Array;
    11e2:	4a8d      	ldr	r2, [pc, #564]	; (1418 <main+0x2a8>)
    11e4:	4b8d      	ldr	r3, [pc, #564]	; (141c <main+0x2ac>)
    11e6:	601a      	str	r2, [r3, #0]
	menu_ptr = menu_array;
    11e8:	4a8d      	ldr	r2, [pc, #564]	; (1420 <main+0x2b0>)
    11ea:	4b8e      	ldr	r3, [pc, #568]	; (1424 <main+0x2b4>)
    11ec:	601a      	str	r2, [r3, #0]
	DAC_array_ptr = DAC_array;
    11ee:	4a8e      	ldr	r2, [pc, #568]	; (1428 <main+0x2b8>)
    11f0:	4b8e      	ldr	r3, [pc, #568]	; (142c <main+0x2bc>)
    11f2:	601a      	str	r2, [r3, #0]
	convert_array_ptr = convert_array;
    11f4:	4a8e      	ldr	r2, [pc, #568]	; (1430 <main+0x2c0>)
    11f6:	4b8f      	ldr	r3, [pc, #572]	; (1434 <main+0x2c4>)
    11f8:	601a      	str	r2, [r3, #0]
	laser0_response_array_ptr = laser0_response_array;
    11fa:	4a8f      	ldr	r2, [pc, #572]	; (1438 <main+0x2c8>)
    11fc:	4b8f      	ldr	r3, [pc, #572]	; (143c <main+0x2cc>)
    11fe:	601a      	str	r2, [r3, #0]
	laser1_response_array_ptr = laser1_response_array;
    1200:	4a8f      	ldr	r2, [pc, #572]	; (1440 <main+0x2d0>)
    1202:	4b90      	ldr	r3, [pc, #576]	; (1444 <main+0x2d4>)
    1204:	601a      	str	r2, [r3, #0]
	volatile bool hone_check = false; 
    1206:	2300      	movs	r3, #0
    1208:	f88d 3017 	strb.w	r3, [sp, #23]
		if(receive_key == 13){	//look for carriage return
    120c:	4c8e      	ldr	r4, [pc, #568]	; (1448 <main+0x2d8>)
			if(((*terminal_input_array_ptr == 'm') || (*terminal_input_array_ptr == 'M')) && (receive_count = 1)){	
    120e:	f8df 820c 	ldr.w	r8, [pc, #524]	; 141c <main+0x2ac>
				volatile float result = (((float)ADC_result / 255) * 5);	//CHANGED float got changed from double
    1212:	f8df a284 	ldr.w	sl, [pc, #644]	; 1498 <main+0x328>
    1216:	f8df 9284 	ldr.w	r9, [pc, #644]	; 149c <main+0x32c>
				result = (result - 1.375)/ .0225;
    121a:	2600      	movs	r6, #0
    121c:	4f8b      	ldr	r7, [pc, #556]	; (144c <main+0x2dc>)
    121e:	e009      	b.n	1234 <main+0xc4>
			if(((*terminal_input_array_ptr == 'm') || (*terminal_input_array_ptr == 'M')) && (receive_count = 1)){	
    1220:	4d8b      	ldr	r5, [pc, #556]	; (1450 <main+0x2e0>)
    1222:	2301      	movs	r3, #1
    1224:	602b      	str	r3, [r5, #0]
				write_menu(menu_ptr);
    1226:	4b7f      	ldr	r3, [pc, #508]	; (1424 <main+0x2b4>)
    1228:	6818      	ldr	r0, [r3, #0]
    122a:	4b8a      	ldr	r3, [pc, #552]	; (1454 <main+0x2e4>)
    122c:	4798      	blx	r3
				receive_count = 0;
    122e:	2300      	movs	r3, #0
    1230:	602b      	str	r3, [r5, #0]
				receive_key = 0;
    1232:	7023      	strb	r3, [r4, #0]
		if(receive_key == 13){	//look for carriage return
    1234:	7823      	ldrb	r3, [r4, #0]
    1236:	b2db      	uxtb	r3, r3
    1238:	2b0d      	cmp	r3, #13
    123a:	d1fb      	bne.n	1234 <main+0xc4>
			if(((*terminal_input_array_ptr == 'm') || (*terminal_input_array_ptr == 'M')) && (receive_count = 1)){	
    123c:	f8d8 3000 	ldr.w	r3, [r8]
    1240:	781a      	ldrb	r2, [r3, #0]
    1242:	b2d2      	uxtb	r2, r2
    1244:	2a6d      	cmp	r2, #109	; 0x6d
    1246:	d0eb      	beq.n	1220 <main+0xb0>
    1248:	781a      	ldrb	r2, [r3, #0]
    124a:	b2d2      	uxtb	r2, r2
    124c:	2a4d      	cmp	r2, #77	; 0x4d
    124e:	d0e7      	beq.n	1220 <main+0xb0>
			else if(((*terminal_input_array_ptr == 't') || (*terminal_input_array_ptr == 'T')) && (receive_count = 1)){	
    1250:	781a      	ldrb	r2, [r3, #0]
    1252:	b2d2      	uxtb	r2, r2
    1254:	2a74      	cmp	r2, #116	; 0x74
    1256:	d040      	beq.n	12da <main+0x16a>
    1258:	781a      	ldrb	r2, [r3, #0]
    125a:	b2d2      	uxtb	r2, r2
    125c:	2a54      	cmp	r2, #84	; 0x54
    125e:	d03c      	beq.n	12da <main+0x16a>
			else if(((*terminal_input_array_ptr == 'c') || (*terminal_input_array_ptr == 'C')) && (receive_count = 1)){
    1260:	781a      	ldrb	r2, [r3, #0]
    1262:	b2d2      	uxtb	r2, r2
    1264:	2a63      	cmp	r2, #99	; 0x63
    1266:	d079      	beq.n	135c <main+0x1ec>
    1268:	781a      	ldrb	r2, [r3, #0]
    126a:	b2d2      	uxtb	r2, r2
    126c:	2a43      	cmp	r2, #67	; 0x43
    126e:	d075      	beq.n	135c <main+0x1ec>
			else if(((*terminal_input_array_ptr == 'k') || (*terminal_input_array_ptr == 'K')) && (receive_count = 4)){	
    1270:	781a      	ldrb	r2, [r3, #0]
    1272:	b2d2      	uxtb	r2, r2
    1274:	2a6b      	cmp	r2, #107	; 0x6b
    1276:	d07a      	beq.n	136e <main+0x1fe>
    1278:	781a      	ldrb	r2, [r3, #0]
    127a:	b2d2      	uxtb	r2, r2
    127c:	2a4b      	cmp	r2, #75	; 0x4b
    127e:	d076      	beq.n	136e <main+0x1fe>
			else if(((*terminal_input_array_ptr == 'd') || (*terminal_input_array_ptr == 'D')) && (receive_count = 5)){	
    1280:	781a      	ldrb	r2, [r3, #0]
    1282:	b2d2      	uxtb	r2, r2
    1284:	2a64      	cmp	r2, #100	; 0x64
    1286:	d07b      	beq.n	1380 <main+0x210>
    1288:	781a      	ldrb	r2, [r3, #0]
    128a:	b2d2      	uxtb	r2, r2
    128c:	2a44      	cmp	r2, #68	; 0x44
    128e:	d077      	beq.n	1380 <main+0x210>
			else if(((*terminal_input_array_ptr == 'e') || (*terminal_input_array_ptr == 'E')) && (receive_count = 3)){
    1290:	781a      	ldrb	r2, [r3, #0]
    1292:	b2d2      	uxtb	r2, r2
    1294:	2a65      	cmp	r2, #101	; 0x65
    1296:	d07c      	beq.n	1392 <main+0x222>
    1298:	781a      	ldrb	r2, [r3, #0]
    129a:	b2d2      	uxtb	r2, r2
    129c:	2a45      	cmp	r2, #69	; 0x45
    129e:	d078      	beq.n	1392 <main+0x222>
			else if(((*terminal_input_array_ptr == 'l') || (*terminal_input_array_ptr == 'L')) && (receive_count = 3)){
    12a0:	781a      	ldrb	r2, [r3, #0]
    12a2:	b2d2      	uxtb	r2, r2
    12a4:	2a6c      	cmp	r2, #108	; 0x6c
    12a6:	d07d      	beq.n	13a4 <main+0x234>
    12a8:	781a      	ldrb	r2, [r3, #0]
    12aa:	b2d2      	uxtb	r2, r2
    12ac:	2a4c      	cmp	r2, #76	; 0x4c
    12ae:	d079      	beq.n	13a4 <main+0x234>
			else if(((*terminal_input_array_ptr == 'f') || (*terminal_input_array_ptr == 'F')) && (receive_count = 2)){
    12b0:	781a      	ldrb	r2, [r3, #0]
    12b2:	b2d2      	uxtb	r2, r2
    12b4:	2a66      	cmp	r2, #102	; 0x66
    12b6:	f000 80f3 	beq.w	14a0 <main+0x330>
    12ba:	781b      	ldrb	r3, [r3, #0]
    12bc:	b2db      	uxtb	r3, r3
    12be:	2b46      	cmp	r3, #70	; 0x46
    12c0:	f000 80ee 	beq.w	14a0 <main+0x330>
				volatile char Invalid_message_Arr[] = "\n?\n";
    12c4:	a808      	add	r0, sp, #32
    12c6:	4b64      	ldr	r3, [pc, #400]	; (1458 <main+0x2e8>)
    12c8:	f840 3d10 	str.w	r3, [r0, #-16]!
				write_terminal(Invalid_message_Ptr);
    12cc:	4b4f      	ldr	r3, [pc, #316]	; (140c <main+0x29c>)
    12ce:	4798      	blx	r3
				receive_count = 0;
    12d0:	2300      	movs	r3, #0
    12d2:	4a5f      	ldr	r2, [pc, #380]	; (1450 <main+0x2e0>)
    12d4:	6013      	str	r3, [r2, #0]
				receive_key = 0;
    12d6:	7023      	strb	r3, [r4, #0]
    12d8:	e7ac      	b.n	1234 <main+0xc4>
			else if(((*terminal_input_array_ptr == 't') || (*terminal_input_array_ptr == 'T')) && (receive_count = 1)){	
    12da:	2201      	movs	r2, #1
    12dc:	4b5c      	ldr	r3, [pc, #368]	; (1450 <main+0x2e0>)
    12de:	601a      	str	r2, [r3, #0]
				ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN6;	//AIN6=PB04
    12e0:	f641 0206 	movw	r2, #6150	; 0x1806
    12e4:	4b5d      	ldr	r3, [pc, #372]	; (145c <main+0x2ec>)
    12e6:	809a      	strh	r2, [r3, #4]
				while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    12e8:	461a      	mov	r2, r3
    12ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
    12ec:	f013 0f04 	tst.w	r3, #4
    12f0:	d1fb      	bne.n	12ea <main+0x17a>
				ADC1->SWTRIG.reg = 1;	//trigger ADC to start conversion	//CHANGED
    12f2:	2201      	movs	r2, #1
    12f4:	4b59      	ldr	r3, [pc, #356]	; (145c <main+0x2ec>)
    12f6:	751a      	strb	r2, [r3, #20]
				while(ADC1->INTFLAG.bit.RESRDY == 0){}	//wait for conversion
    12f8:	461a      	mov	r2, r3
    12fa:	f892 302e 	ldrb.w	r3, [r2, #46]	; 0x2e
    12fe:	f013 0f01 	tst.w	r3, #1
    1302:	d0fa      	beq.n	12fa <main+0x18a>
				volatile int ADC_result = ADC1->RESULT.reg;	//read ADC conversion result
    1304:	4b55      	ldr	r3, [pc, #340]	; (145c <main+0x2ec>)
    1306:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    130a:	b29b      	uxth	r3, r3
    130c:	9301      	str	r3, [sp, #4]
				volatile float result = (((float)ADC_result / 255) * 5);	//CHANGED float got changed from double
    130e:	9801      	ldr	r0, [sp, #4]
    1310:	4b53      	ldr	r3, [pc, #332]	; (1460 <main+0x2f0>)
    1312:	4798      	blx	r3
    1314:	4651      	mov	r1, sl
    1316:	4b53      	ldr	r3, [pc, #332]	; (1464 <main+0x2f4>)
    1318:	4798      	blx	r3
    131a:	4649      	mov	r1, r9
    131c:	4b52      	ldr	r3, [pc, #328]	; (1468 <main+0x2f8>)
    131e:	4798      	blx	r3
    1320:	9002      	str	r0, [sp, #8]
				result = (result - 1.375)/ .0225;
    1322:	9802      	ldr	r0, [sp, #8]
    1324:	4b51      	ldr	r3, [pc, #324]	; (146c <main+0x2fc>)
    1326:	4798      	blx	r3
    1328:	4632      	mov	r2, r6
    132a:	463b      	mov	r3, r7
    132c:	4d50      	ldr	r5, [pc, #320]	; (1470 <main+0x300>)
    132e:	47a8      	blx	r5
    1330:	a321      	add	r3, pc, #132	; (adr r3, 13b8 <main+0x248>)
    1332:	e9d3 2300 	ldrd	r2, r3, [r3]
    1336:	4d4f      	ldr	r5, [pc, #316]	; (1474 <main+0x304>)
    1338:	47a8      	blx	r5
    133a:	4b4f      	ldr	r3, [pc, #316]	; (1478 <main+0x308>)
    133c:	4798      	blx	r3
    133e:	9002      	str	r0, [sp, #8]
				int temp = (int)result;
    1340:	9802      	ldr	r0, [sp, #8]
    1342:	4b4e      	ldr	r3, [pc, #312]	; (147c <main+0x30c>)
    1344:	4798      	blx	r3
    1346:	ab08      	add	r3, sp, #32
    1348:	f843 0d14 	str.w	r0, [r3, #-20]!
				convert(temp1);
    134c:	4618      	mov	r0, r3
    134e:	4b4c      	ldr	r3, [pc, #304]	; (1480 <main+0x310>)
    1350:	4798      	blx	r3
				receive_count = 0;
    1352:	2300      	movs	r3, #0
    1354:	4a3e      	ldr	r2, [pc, #248]	; (1450 <main+0x2e0>)
    1356:	6013      	str	r3, [r2, #0]
				receive_key = 0;
    1358:	7023      	strb	r3, [r4, #0]
			else if(((*terminal_input_array_ptr == 't') || (*terminal_input_array_ptr == 'T')) && (receive_count = 1)){	
    135a:	e76b      	b.n	1234 <main+0xc4>
			else if(((*terminal_input_array_ptr == 'c') || (*terminal_input_array_ptr == 'C')) && (receive_count = 1)){
    135c:	4d3c      	ldr	r5, [pc, #240]	; (1450 <main+0x2e0>)
    135e:	2301      	movs	r3, #1
    1360:	602b      	str	r3, [r5, #0]
				display_RTDs();
    1362:	4b48      	ldr	r3, [pc, #288]	; (1484 <main+0x314>)
    1364:	4798      	blx	r3
				receive_count = 0;
    1366:	2300      	movs	r3, #0
    1368:	602b      	str	r3, [r5, #0]
				receive_key = 0;
    136a:	7023      	strb	r3, [r4, #0]
    136c:	e762      	b.n	1234 <main+0xc4>
			else if(((*terminal_input_array_ptr == 'k') || (*terminal_input_array_ptr == 'K')) && (receive_count = 4)){	
    136e:	4a38      	ldr	r2, [pc, #224]	; (1450 <main+0x2e0>)
    1370:	2304      	movs	r3, #4
    1372:	6013      	str	r3, [r2, #0]
				receive_count = 0;
    1374:	2300      	movs	r3, #0
    1376:	6013      	str	r3, [r2, #0]
				receive_key = 0;
    1378:	7023      	strb	r3, [r4, #0]
				port_control();
    137a:	4b43      	ldr	r3, [pc, #268]	; (1488 <main+0x318>)
    137c:	4798      	blx	r3
    137e:	e759      	b.n	1234 <main+0xc4>
			else if(((*terminal_input_array_ptr == 'd') || (*terminal_input_array_ptr == 'D')) && (receive_count = 5)){	
    1380:	4a33      	ldr	r2, [pc, #204]	; (1450 <main+0x2e0>)
    1382:	2305      	movs	r3, #5
    1384:	6013      	str	r3, [r2, #0]
				receive_count = 0;
    1386:	2300      	movs	r3, #0
    1388:	6013      	str	r3, [r2, #0]
				receive_key = 0;
    138a:	7023      	strb	r3, [r4, #0]
				DAC_select();
    138c:	4b3f      	ldr	r3, [pc, #252]	; (148c <main+0x31c>)
    138e:	4798      	blx	r3
    1390:	e750      	b.n	1234 <main+0xc4>
			else if(((*terminal_input_array_ptr == 'e') || (*terminal_input_array_ptr == 'E')) && (receive_count = 3)){
    1392:	4a2f      	ldr	r2, [pc, #188]	; (1450 <main+0x2e0>)
    1394:	2303      	movs	r3, #3
    1396:	6013      	str	r3, [r2, #0]
				receive_count = 0;
    1398:	2300      	movs	r3, #0
    139a:	6013      	str	r3, [r2, #0]
				receive_key = 0;
    139c:	7023      	strb	r3, [r4, #0]
				laser_info_com();
    139e:	4b3c      	ldr	r3, [pc, #240]	; (1490 <main+0x320>)
    13a0:	4798      	blx	r3
    13a2:	e747      	b.n	1234 <main+0xc4>
			else if(((*terminal_input_array_ptr == 'l') || (*terminal_input_array_ptr == 'L')) && (receive_count = 3)){
    13a4:	4a2a      	ldr	r2, [pc, #168]	; (1450 <main+0x2e0>)
    13a6:	2303      	movs	r3, #3
    13a8:	6013      	str	r3, [r2, #0]
				receive_count = 0;
    13aa:	2300      	movs	r3, #0
    13ac:	6013      	str	r3, [r2, #0]
				receive_key = 0;
    13ae:	7023      	strb	r3, [r4, #0]
				laser_com();
    13b0:	4b38      	ldr	r3, [pc, #224]	; (1494 <main+0x324>)
    13b2:	4798      	blx	r3
    13b4:	e73e      	b.n	1234 <main+0xc4>
    13b6:	bf00      	nop
    13b8:	70a3d70a 	.word	0x70a3d70a
    13bc:	3f970a3d 	.word	0x3f970a3d
    13c0:	00000745 	.word	0x00000745
    13c4:	00000e4d 	.word	0x00000e4d
    13c8:	41008000 	.word	0x41008000
    13cc:	00000385 	.word	0x00000385
    13d0:	00000465 	.word	0x00000465
    13d4:	00001bf5 	.word	0x00001bf5
    13d8:	00001b79 	.word	0x00001b79
    13dc:	00001c71 	.word	0x00001c71
    13e0:	00001a79 	.word	0x00001a79
    13e4:	000002d1 	.word	0x000002d1
    13e8:	000007d9 	.word	0x000007d9
    13ec:	00000881 	.word	0x00000881
    13f0:	00000755 	.word	0x00000755
    13f4:	00000cd1 	.word	0x00000cd1
    13f8:	00000d6d 	.word	0x00000d6d
    13fc:	00000c89 	.word	0x00000c89
    1400:	000014d9 	.word	0x000014d9
    1404:	00001505 	.word	0x00001505
    1408:	00002d98 	.word	0x00002d98
    140c:	000004d5 	.word	0x000004d5
    1410:	20000ba0 	.word	0x20000ba0
    1414:	20000c24 	.word	0x20000c24
    1418:	20000000 	.word	0x20000000
    141c:	20000bcc 	.word	0x20000bcc
    1420:	20000070 	.word	0x20000070
    1424:	20000c10 	.word	0x20000c10
    1428:	20000bd0 	.word	0x20000bd0
    142c:	20000bc4 	.word	0x20000bc4
    1430:	20000c08 	.word	0x20000c08
    1434:	20000c0c 	.word	0x20000c0c
    1438:	20000bec 	.word	0x20000bec
    143c:	20000c04 	.word	0x20000c04
    1440:	20000bd4 	.word	0x20000bd4
    1444:	20000be8 	.word	0x20000be8
    1448:	20000bc8 	.word	0x20000bc8
    144c:	3ff60000 	.word	0x3ff60000
    1450:	20000b80 	.word	0x20000b80
    1454:	00000501 	.word	0x00000501
    1458:	000a3f0a 	.word	0x000a3f0a
    145c:	43002000 	.word	0x43002000
    1460:	00002895 	.word	0x00002895
    1464:	00002aa5 	.word	0x00002aa5
    1468:	0000293d 	.word	0x0000293d
    146c:	000021b5 	.word	0x000021b5
    1470:	00001ef5 	.word	0x00001ef5
    1474:	000024b1 	.word	0x000024b1
    1478:	00002681 	.word	0x00002681
    147c:	00002bdd 	.word	0x00002bdd
    1480:	00001085 	.word	0x00001085
    1484:	00001ecd 	.word	0x00001ecd
    1488:	00000f25 	.word	0x00000f25
    148c:	00000639 	.word	0x00000639
    1490:	00000a09 	.word	0x00000a09
    1494:	00000c05 	.word	0x00000c05
    1498:	437f0000 	.word	0x437f0000
    149c:	40a00000 	.word	0x40a00000
			else if(((*terminal_input_array_ptr == 'f') || (*terminal_input_array_ptr == 'F')) && (receive_count = 2)){
    14a0:	4a0a      	ldr	r2, [pc, #40]	; (14cc <main+0x35c>)
    14a2:	2302      	movs	r3, #2
    14a4:	6013      	str	r3, [r2, #0]
				receive_count = 0;
    14a6:	2300      	movs	r3, #0
    14a8:	6013      	str	r3, [r2, #0]
				receive_key = 0;
    14aa:	7023      	strb	r3, [r4, #0]
				if(!hone_check){
    14ac:	f89d 3017 	ldrb.w	r3, [sp, #23]
    14b0:	b12b      	cbz	r3, 14be <main+0x34e>
				select_aper(*(terminal_input_array_ptr+1));
    14b2:	f8d8 3000 	ldr.w	r3, [r8]
    14b6:	7858      	ldrb	r0, [r3, #1]
    14b8:	4b05      	ldr	r3, [pc, #20]	; (14d0 <main+0x360>)
    14ba:	4798      	blx	r3
    14bc:	e6ba      	b.n	1234 <main+0xc4>
					motor_hone();
    14be:	4b05      	ldr	r3, [pc, #20]	; (14d4 <main+0x364>)
    14c0:	4798      	blx	r3
					hone_check = true;
    14c2:	2301      	movs	r3, #1
    14c4:	f88d 3017 	strb.w	r3, [sp, #23]
    14c8:	e7f3      	b.n	14b2 <main+0x342>
    14ca:	bf00      	nop
    14cc:	20000b80 	.word	0x20000b80
    14d0:	000018a9 	.word	0x000018a9
    14d4:	00001845 	.word	0x00001845

000014d8 <motor_port_setup>:
	//PortGroup *porB = &(por->Group[1]);
	//PortGroup *porC = &(por->Group[2]);
	PortGroup *porD = &(por->Group[3]);
	
	/* EIC pitch and catch */
	porA->PMUX[3].bit.PMUXE = 0;	//PA06 EXTINT[6]
    14d8:	4b09      	ldr	r3, [pc, #36]	; (1500 <motor_port_setup+0x28>)
    14da:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
    14de:	f36f 0203 	bfc	r2, #0, #4
    14e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	porA->PINCFG[6].bit.PMUXEN = 1;
    14e6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
    14ea:	f042 0201 	orr.w	r2, r2, #1
    14ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	
	/* Motor */
	porD->DIRSET.reg = A | B | EN | BRAKE;
    14f2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
    14f6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	porD->OUTCLR.reg = A | B | BRAKE | EN;
    14fa:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    14fe:	4770      	bx	lr
    1500:	41008000 	.word	0x41008000

00001504 <motor_EIC_setup>:

}

/* Pitch and catch EIC for Honing */
void motor_EIC_setup(void){
	EIC->CTRLA.reg = 0;
    1504:	2200      	movs	r2, #0
    1506:	4b12      	ldr	r3, [pc, #72]	; (1550 <motor_EIC_setup+0x4c>)
    1508:	701a      	strb	r2, [r3, #0]
	while(EIC->SYNCBUSY.reg){}
    150a:	461a      	mov	r2, r3
    150c:	6853      	ldr	r3, [r2, #4]
    150e:	2b00      	cmp	r3, #0
    1510:	d1fc      	bne.n	150c <motor_EIC_setup+0x8>
	EIC->CTRLA.bit.CKSEL = 0;	//EIC is clocked by GCLK
    1512:	4b0f      	ldr	r3, [pc, #60]	; (1550 <motor_EIC_setup+0x4c>)
    1514:	781a      	ldrb	r2, [r3, #0]
    1516:	f36f 1204 	bfc	r2, #4, #1
    151a:	701a      	strb	r2, [r3, #0]
	EIC->INTENSET.reg |= 1<<6;
    151c:	691a      	ldr	r2, [r3, #16]
    151e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1522:	611a      	str	r2, [r3, #16]
	EIC->ASYNCH.reg |= 1<<6;	//asynchronous mode
    1524:	699a      	ldr	r2, [r3, #24]
    1526:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    152a:	619a      	str	r2, [r3, #24]
	EIC->CONFIG[0].bit.SENSE6 = 4;	//high level detection
    152c:	69da      	ldr	r2, [r3, #28]
    152e:	2104      	movs	r1, #4
    1530:	f361 621a 	bfi	r2, r1, #24, #3
    1534:	61da      	str	r2, [r3, #28]
	EIC->CTRLA.reg = 1<<1;	//enable
    1536:	2202      	movs	r2, #2
    1538:	701a      	strb	r2, [r3, #0]
	while(EIC->SYNCBUSY.reg){}
    153a:	461a      	mov	r2, r3
    153c:	6853      	ldr	r3, [r2, #4]
    153e:	2b00      	cmp	r3, #0
    1540:	d1fc      	bne.n	153c <motor_EIC_setup+0x38>
	NVIC->ISER[0] |= 1<<18;	//enable the NVIC handler
    1542:	4a04      	ldr	r2, [pc, #16]	; (1554 <motor_EIC_setup+0x50>)
    1544:	6813      	ldr	r3, [r2, #0]
    1546:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    154a:	6013      	str	r3, [r2, #0]
    154c:	4770      	bx	lr
    154e:	bf00      	nop
    1550:	40002800 	.word	0x40002800
    1554:	e000e100 	.word	0xe000e100

00001558 <EIC_6_Handler>:
}

/* Pitch and catch EIC handler for Honing */
void EIC_6_Handler(void){
	EIC->INTFLAG.reg = 1<<6;	//clear int flag
    1558:	2240      	movs	r2, #64	; 0x40
    155a:	4b04      	ldr	r3, [pc, #16]	; (156c <EIC_6_Handler+0x14>)
    155c:	615a      	str	r2, [r3, #20]
	catch = true;
    155e:	2201      	movs	r2, #1
    1560:	4b03      	ldr	r3, [pc, #12]	; (1570 <EIC_6_Handler+0x18>)
    1562:	701a      	strb	r2, [r3, #0]
	//steps = count;
	state = 0;
    1564:	2200      	movs	r2, #0
    1566:	4b03      	ldr	r3, [pc, #12]	; (1574 <EIC_6_Handler+0x1c>)
    1568:	601a      	str	r2, [r3, #0]
    156a:	4770      	bx	lr
    156c:	40002800 	.word	0x40002800
    1570:	20000b94 	.word	0x20000b94
    1574:	20000c18 	.word	0x20000c18

00001578 <wait_motor>:
		default:
		break;
	}
}

void wait_motor(volatile int d){
    1578:	b082      	sub	sp, #8
    157a:	9001      	str	r0, [sp, #4]
	int count = 0;
	while (count < d*10){
    157c:	9b01      	ldr	r3, [sp, #4]
    157e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1582:	005b      	lsls	r3, r3, #1
    1584:	2b00      	cmp	r3, #0
    1586:	dd07      	ble.n	1598 <wait_motor+0x20>
    1588:	2200      	movs	r2, #0
		count++;
    158a:	3201      	adds	r2, #1
	while (count < d*10){
    158c:	9b01      	ldr	r3, [sp, #4]
    158e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1592:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
    1596:	dbf8      	blt.n	158a <wait_motor+0x12>
	}
}
    1598:	b002      	add	sp, #8
    159a:	4770      	bx	lr

0000159c <motor_state_machine>:

void motor_state_machine(int a, int b){
    159c:	b570      	push	{r4, r5, r6, lr}
    159e:	b082      	sub	sp, #8
	Port *por = PORT;
	PortGroup *porD = &(por->Group[3]);
	volatile static int i = 100;
	state = a;
    15a0:	4b90      	ldr	r3, [pc, #576]	; (17e4 <motor_state_machine+0x248>)
    15a2:	6018      	str	r0, [r3, #0]
	steps = b;
    15a4:	4b90      	ldr	r3, [pc, #576]	; (17e8 <motor_state_machine+0x24c>)
    15a6:	6019      	str	r1, [r3, #0]
	motor_on = true;
    15a8:	2201      	movs	r2, #1
    15aa:	4b90      	ldr	r3, [pc, #576]	; (17ec <motor_state_machine+0x250>)
    15ac:	705a      	strb	r2, [r3, #1]
	//bool decell_done = false;
	volatile int phase = 0;
    15ae:	2300      	movs	r3, #0
    15b0:	9301      	str	r3, [sp, #4]
	
	porD->OUTSET.reg = EN;
    15b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    15b6:	4b8e      	ldr	r3, [pc, #568]	; (17f0 <motor_state_machine+0x254>)
    15b8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	while(motor_on){
    15bc:	4c8b      	ldr	r4, [pc, #556]	; (17ec <motor_state_machine+0x250>)
		
		switch(state){
    15be:	4d89      	ldr	r5, [pc, #548]	; (17e4 <motor_state_machine+0x248>)
	while(motor_on){
    15c0:	e00f      	b.n	15e2 <motor_state_machine+0x46>
			
			/* Brake State */
			case 0:
			count = 0;
    15c2:	2300      	movs	r3, #0
    15c4:	6063      	str	r3, [r4, #4]
			porD->OUTSET.reg = BRAKE;
    15c6:	4e8a      	ldr	r6, [pc, #552]	; (17f0 <motor_state_machine+0x254>)
    15c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    15cc:	f8c6 3198 	str.w	r3, [r6, #408]	; 0x198
			wait_motor(10);
    15d0:	200a      	movs	r0, #10
    15d2:	4b88      	ldr	r3, [pc, #544]	; (17f4 <motor_state_machine+0x258>)
    15d4:	4798      	blx	r3
			porD->OUTCLR.reg = EN;
    15d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
    15da:	f8c6 3194 	str.w	r3, [r6, #404]	; 0x194
			state = 5;	//go to idle state
    15de:	2305      	movs	r3, #5
    15e0:	602b      	str	r3, [r5, #0]
	while(motor_on){
    15e2:	7863      	ldrb	r3, [r4, #1]
    15e4:	2b00      	cmp	r3, #0
    15e6:	f000 8122 	beq.w	182e <motor_state_machine+0x292>
		switch(state){
    15ea:	682b      	ldr	r3, [r5, #0]
    15ec:	2b05      	cmp	r3, #5
    15ee:	d8f8      	bhi.n	15e2 <motor_state_machine+0x46>
    15f0:	a201      	add	r2, pc, #4	; (adr r2, 15f8 <motor_state_machine+0x5c>)
    15f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15f6:	bf00      	nop
    15f8:	000015c3 	.word	0x000015c3
    15fc:	00001611 	.word	0x00001611
    1600:	0000170f 	.word	0x0000170f
    1604:	000015e3 	.word	0x000015e3
    1608:	000015e3 	.word	0x000015e3
    160c:	00001829 	.word	0x00001829
			break;
			
			/* CW State */
			
			case 1:
			if(accel){
    1610:	7a23      	ldrb	r3, [r4, #8]
    1612:	b153      	cbz	r3, 162a <motor_state_machine+0x8e>
				if(count < 100 && i > 10){i--;}		
    1614:	6863      	ldr	r3, [r4, #4]
    1616:	2b63      	cmp	r3, #99	; 0x63
    1618:	dc0e      	bgt.n	1638 <motor_state_machine+0x9c>
    161a:	4b77      	ldr	r3, [pc, #476]	; (17f8 <motor_state_machine+0x25c>)
    161c:	681b      	ldr	r3, [r3, #0]
    161e:	2b0a      	cmp	r3, #10
    1620:	dd0a      	ble.n	1638 <motor_state_machine+0x9c>
    1622:	4a75      	ldr	r2, [pc, #468]	; (17f8 <motor_state_machine+0x25c>)
    1624:	6813      	ldr	r3, [r2, #0]
    1626:	3b01      	subs	r3, #1
    1628:	6013      	str	r3, [r2, #0]
				else if((steps - count) < 100 && i < 100){i++;}
			}
		
			switch(phase){
    162a:	9b01      	ldr	r3, [sp, #4]
    162c:	2b03      	cmp	r3, #3
    162e:	d8d8      	bhi.n	15e2 <motor_state_machine+0x46>
    1630:	e8df f003 	tbb	[pc, r3]
    1634:	57412b11 	.word	0x57412b11
				else if((steps - count) < 100 && i < 100){i++;}
    1638:	4b6b      	ldr	r3, [pc, #428]	; (17e8 <motor_state_machine+0x24c>)
    163a:	681b      	ldr	r3, [r3, #0]
    163c:	6862      	ldr	r2, [r4, #4]
    163e:	1a9b      	subs	r3, r3, r2
    1640:	2b63      	cmp	r3, #99	; 0x63
    1642:	dcf2      	bgt.n	162a <motor_state_machine+0x8e>
    1644:	4b6c      	ldr	r3, [pc, #432]	; (17f8 <motor_state_machine+0x25c>)
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	2b63      	cmp	r3, #99	; 0x63
    164a:	dcee      	bgt.n	162a <motor_state_machine+0x8e>
    164c:	4a6a      	ldr	r2, [pc, #424]	; (17f8 <motor_state_machine+0x25c>)
    164e:	6813      	ldr	r3, [r2, #0]
    1650:	3301      	adds	r3, #1
    1652:	6013      	str	r3, [r2, #0]
    1654:	e7e9      	b.n	162a <motor_state_machine+0x8e>
				
				case  0:
				porD->OUTSET.reg = A;
    1656:	4b66      	ldr	r3, [pc, #408]	; (17f0 <motor_state_machine+0x254>)
    1658:	f44f 7280 	mov.w	r2, #256	; 0x100
    165c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				porD->OUTCLR.reg = B;
    1660:	f44f 7200 	mov.w	r2, #512	; 0x200
    1664:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
				wait_motor(i);
    1668:	4b63      	ldr	r3, [pc, #396]	; (17f8 <motor_state_machine+0x25c>)
    166a:	6818      	ldr	r0, [r3, #0]
    166c:	4b61      	ldr	r3, [pc, #388]	; (17f4 <motor_state_machine+0x258>)
    166e:	4798      	blx	r3
				count++;
    1670:	6863      	ldr	r3, [r4, #4]
    1672:	3301      	adds	r3, #1
    1674:	6063      	str	r3, [r4, #4]
				if(count == steps){state = 0;}	//go to brake state
    1676:	6862      	ldr	r2, [r4, #4]
    1678:	4b5b      	ldr	r3, [pc, #364]	; (17e8 <motor_state_machine+0x24c>)
    167a:	681b      	ldr	r3, [r3, #0]
    167c:	429a      	cmp	r2, r3
    167e:	bf04      	itt	eq
    1680:	2300      	moveq	r3, #0
    1682:	602b      	streq	r3, [r5, #0]
				phase = 1;
    1684:	2301      	movs	r3, #1
    1686:	9301      	str	r3, [sp, #4]
				break;
    1688:	e7ab      	b.n	15e2 <motor_state_machine+0x46>
			
				case 1:
				porD->OUTCLR.reg = A;
    168a:	f44f 7280 	mov.w	r2, #256	; 0x100
    168e:	4b58      	ldr	r3, [pc, #352]	; (17f0 <motor_state_machine+0x254>)
    1690:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
				wait_motor(i);
    1694:	4b58      	ldr	r3, [pc, #352]	; (17f8 <motor_state_machine+0x25c>)
    1696:	6818      	ldr	r0, [r3, #0]
    1698:	4b56      	ldr	r3, [pc, #344]	; (17f4 <motor_state_machine+0x258>)
    169a:	4798      	blx	r3
				count++;
    169c:	6863      	ldr	r3, [r4, #4]
    169e:	3301      	adds	r3, #1
    16a0:	6063      	str	r3, [r4, #4]
				if(count == steps){state = 0;}	
    16a2:	6862      	ldr	r2, [r4, #4]
    16a4:	4b50      	ldr	r3, [pc, #320]	; (17e8 <motor_state_machine+0x24c>)
    16a6:	681b      	ldr	r3, [r3, #0]
    16a8:	429a      	cmp	r2, r3
    16aa:	bf04      	itt	eq
    16ac:	2300      	moveq	r3, #0
    16ae:	602b      	streq	r3, [r5, #0]
				phase = 2;
    16b0:	2302      	movs	r3, #2
    16b2:	9301      	str	r3, [sp, #4]
				break;
    16b4:	e795      	b.n	15e2 <motor_state_machine+0x46>
				
				case 2:
				porD->OUTSET.reg = B;
    16b6:	f44f 7200 	mov.w	r2, #512	; 0x200
    16ba:	4b4d      	ldr	r3, [pc, #308]	; (17f0 <motor_state_machine+0x254>)
    16bc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				wait_motor(i);
    16c0:	4b4d      	ldr	r3, [pc, #308]	; (17f8 <motor_state_machine+0x25c>)
    16c2:	6818      	ldr	r0, [r3, #0]
    16c4:	4b4b      	ldr	r3, [pc, #300]	; (17f4 <motor_state_machine+0x258>)
    16c6:	4798      	blx	r3
				count++;
    16c8:	6863      	ldr	r3, [r4, #4]
    16ca:	3301      	adds	r3, #1
    16cc:	6063      	str	r3, [r4, #4]
				if(count == steps){state = 0;}	
    16ce:	6862      	ldr	r2, [r4, #4]
    16d0:	4b45      	ldr	r3, [pc, #276]	; (17e8 <motor_state_machine+0x24c>)
    16d2:	681b      	ldr	r3, [r3, #0]
    16d4:	429a      	cmp	r2, r3
    16d6:	bf04      	itt	eq
    16d8:	2300      	moveq	r3, #0
    16da:	602b      	streq	r3, [r5, #0]
				phase = 3;
    16dc:	2303      	movs	r3, #3
    16de:	9301      	str	r3, [sp, #4]
				break;
    16e0:	e77f      	b.n	15e2 <motor_state_machine+0x46>
				
				case 3:
				porD->OUTSET.reg = A;
    16e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    16e6:	4b42      	ldr	r3, [pc, #264]	; (17f0 <motor_state_machine+0x254>)
    16e8:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				wait_motor(i);
    16ec:	4b42      	ldr	r3, [pc, #264]	; (17f8 <motor_state_machine+0x25c>)
    16ee:	6818      	ldr	r0, [r3, #0]
    16f0:	4b40      	ldr	r3, [pc, #256]	; (17f4 <motor_state_machine+0x258>)
    16f2:	4798      	blx	r3
				count++;
    16f4:	6863      	ldr	r3, [r4, #4]
    16f6:	3301      	adds	r3, #1
    16f8:	6063      	str	r3, [r4, #4]
				if(count == steps){state = 0;}	
    16fa:	6862      	ldr	r2, [r4, #4]
    16fc:	4b3a      	ldr	r3, [pc, #232]	; (17e8 <motor_state_machine+0x24c>)
    16fe:	681b      	ldr	r3, [r3, #0]
    1700:	429a      	cmp	r2, r3
    1702:	bf04      	itt	eq
    1704:	2300      	moveq	r3, #0
    1706:	602b      	streq	r3, [r5, #0]
				phase = 0;
    1708:	2300      	movs	r3, #0
    170a:	9301      	str	r3, [sp, #4]
				break;
    170c:	e769      	b.n	15e2 <motor_state_machine+0x46>
			
			
			
			/* CCW State */
			case 2:
			if(accel){
    170e:	7a23      	ldrb	r3, [r4, #8]
    1710:	b153      	cbz	r3, 1728 <motor_state_machine+0x18c>
				if(count < 100 && i > 10){i--;}
    1712:	6863      	ldr	r3, [r4, #4]
    1714:	2b63      	cmp	r3, #99	; 0x63
    1716:	dc0f      	bgt.n	1738 <motor_state_machine+0x19c>
    1718:	4b37      	ldr	r3, [pc, #220]	; (17f8 <motor_state_machine+0x25c>)
    171a:	681b      	ldr	r3, [r3, #0]
    171c:	2b0a      	cmp	r3, #10
    171e:	dd0b      	ble.n	1738 <motor_state_machine+0x19c>
    1720:	4a35      	ldr	r2, [pc, #212]	; (17f8 <motor_state_machine+0x25c>)
    1722:	6813      	ldr	r3, [r2, #0]
    1724:	3b01      	subs	r3, #1
    1726:	6013      	str	r3, [r2, #0]
				else if((steps - count) < 100 && i < 100){i++;}
			}
			
			switch(phase){
    1728:	9b01      	ldr	r3, [sp, #4]
    172a:	2b03      	cmp	r3, #3
    172c:	f63f af59 	bhi.w	15e2 <motor_state_machine+0x46>
    1730:	e8df f003 	tbb	[pc, r3]
    1734:	64412b11 	.word	0x64412b11
				else if((steps - count) < 100 && i < 100){i++;}
    1738:	4b2b      	ldr	r3, [pc, #172]	; (17e8 <motor_state_machine+0x24c>)
    173a:	681b      	ldr	r3, [r3, #0]
    173c:	6862      	ldr	r2, [r4, #4]
    173e:	1a9b      	subs	r3, r3, r2
    1740:	2b63      	cmp	r3, #99	; 0x63
    1742:	dcf1      	bgt.n	1728 <motor_state_machine+0x18c>
    1744:	4b2c      	ldr	r3, [pc, #176]	; (17f8 <motor_state_machine+0x25c>)
    1746:	681b      	ldr	r3, [r3, #0]
    1748:	2b63      	cmp	r3, #99	; 0x63
    174a:	dced      	bgt.n	1728 <motor_state_machine+0x18c>
    174c:	4a2a      	ldr	r2, [pc, #168]	; (17f8 <motor_state_machine+0x25c>)
    174e:	6813      	ldr	r3, [r2, #0]
    1750:	3301      	adds	r3, #1
    1752:	6013      	str	r3, [r2, #0]
    1754:	e7e8      	b.n	1728 <motor_state_machine+0x18c>
				
				case 0:
				porD->OUTSET.reg = A;
    1756:	4b26      	ldr	r3, [pc, #152]	; (17f0 <motor_state_machine+0x254>)
    1758:	f44f 7280 	mov.w	r2, #256	; 0x100
    175c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				porD->OUTSET.reg = B;
    1760:	f44f 7200 	mov.w	r2, #512	; 0x200
    1764:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				wait_motor(i);
    1768:	4b23      	ldr	r3, [pc, #140]	; (17f8 <motor_state_machine+0x25c>)
    176a:	6818      	ldr	r0, [r3, #0]
    176c:	4b21      	ldr	r3, [pc, #132]	; (17f4 <motor_state_machine+0x258>)
    176e:	4798      	blx	r3
				count ++;
    1770:	6863      	ldr	r3, [r4, #4]
    1772:	3301      	adds	r3, #1
    1774:	6063      	str	r3, [r4, #4]
				if(count == steps){state = 0;}	//go to brake state
    1776:	6862      	ldr	r2, [r4, #4]
    1778:	4b1b      	ldr	r3, [pc, #108]	; (17e8 <motor_state_machine+0x24c>)
    177a:	681b      	ldr	r3, [r3, #0]
    177c:	429a      	cmp	r2, r3
    177e:	bf04      	itt	eq
    1780:	2300      	moveq	r3, #0
    1782:	602b      	streq	r3, [r5, #0]
				phase = 1;
    1784:	2301      	movs	r3, #1
    1786:	9301      	str	r3, [sp, #4]
				break;
    1788:	e72b      	b.n	15e2 <motor_state_machine+0x46>
			
				case 1:
				porD->OUTCLR.reg = A;
    178a:	f44f 7280 	mov.w	r2, #256	; 0x100
    178e:	4b18      	ldr	r3, [pc, #96]	; (17f0 <motor_state_machine+0x254>)
    1790:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
				wait_motor(i);
    1794:	4b18      	ldr	r3, [pc, #96]	; (17f8 <motor_state_machine+0x25c>)
    1796:	6818      	ldr	r0, [r3, #0]
    1798:	4b16      	ldr	r3, [pc, #88]	; (17f4 <motor_state_machine+0x258>)
    179a:	4798      	blx	r3
				count ++;
    179c:	6863      	ldr	r3, [r4, #4]
    179e:	3301      	adds	r3, #1
    17a0:	6063      	str	r3, [r4, #4]
				if(count == steps){state = 0;}
    17a2:	6862      	ldr	r2, [r4, #4]
    17a4:	4b10      	ldr	r3, [pc, #64]	; (17e8 <motor_state_machine+0x24c>)
    17a6:	681b      	ldr	r3, [r3, #0]
    17a8:	429a      	cmp	r2, r3
    17aa:	bf04      	itt	eq
    17ac:	2300      	moveq	r3, #0
    17ae:	602b      	streq	r3, [r5, #0]
				phase = 2;
    17b0:	2302      	movs	r3, #2
    17b2:	9301      	str	r3, [sp, #4]
				break;
    17b4:	e715      	b.n	15e2 <motor_state_machine+0x46>
			
				case 2:
				porD->OUTCLR.reg = B;
    17b6:	f44f 7200 	mov.w	r2, #512	; 0x200
    17ba:	4b0d      	ldr	r3, [pc, #52]	; (17f0 <motor_state_machine+0x254>)
    17bc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
				wait_motor(i);
    17c0:	4b0d      	ldr	r3, [pc, #52]	; (17f8 <motor_state_machine+0x25c>)
    17c2:	6818      	ldr	r0, [r3, #0]
    17c4:	4b0b      	ldr	r3, [pc, #44]	; (17f4 <motor_state_machine+0x258>)
    17c6:	4798      	blx	r3
				count ++;
    17c8:	6863      	ldr	r3, [r4, #4]
    17ca:	3301      	adds	r3, #1
    17cc:	6063      	str	r3, [r4, #4]
				if(count == steps){state = 0;}
    17ce:	6862      	ldr	r2, [r4, #4]
    17d0:	4b05      	ldr	r3, [pc, #20]	; (17e8 <motor_state_machine+0x24c>)
    17d2:	681b      	ldr	r3, [r3, #0]
    17d4:	429a      	cmp	r2, r3
    17d6:	bf04      	itt	eq
    17d8:	2300      	moveq	r3, #0
    17da:	602b      	streq	r3, [r5, #0]
				phase = 3;
    17dc:	2303      	movs	r3, #3
    17de:	9301      	str	r3, [sp, #4]
				break;
    17e0:	e6ff      	b.n	15e2 <motor_state_machine+0x46>
    17e2:	bf00      	nop
    17e4:	20000c18 	.word	0x20000c18
    17e8:	20000c14 	.word	0x20000c14
    17ec:	20000b94 	.word	0x20000b94
    17f0:	41008000 	.word	0x41008000
    17f4:	00001579 	.word	0x00001579
    17f8:	20000720 	.word	0x20000720
	
				case 3:
				porD->OUTSET.reg = A;
    17fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    1800:	4b0c      	ldr	r3, [pc, #48]	; (1834 <motor_state_machine+0x298>)
    1802:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
				wait_motor(i);
    1806:	4b0c      	ldr	r3, [pc, #48]	; (1838 <motor_state_machine+0x29c>)
    1808:	6818      	ldr	r0, [r3, #0]
    180a:	4b0c      	ldr	r3, [pc, #48]	; (183c <motor_state_machine+0x2a0>)
    180c:	4798      	blx	r3
				count++;
    180e:	6863      	ldr	r3, [r4, #4]
    1810:	3301      	adds	r3, #1
    1812:	6063      	str	r3, [r4, #4]
				if(count == steps){state = 0;}
    1814:	6862      	ldr	r2, [r4, #4]
    1816:	4b0a      	ldr	r3, [pc, #40]	; (1840 <motor_state_machine+0x2a4>)
    1818:	681b      	ldr	r3, [r3, #0]
    181a:	429a      	cmp	r2, r3
    181c:	bf04      	itt	eq
    181e:	2300      	moveq	r3, #0
    1820:	602b      	streq	r3, [r5, #0]
				phase = 0;
    1822:	2300      	movs	r3, #0
    1824:	9301      	str	r3, [sp, #4]
				break;
    1826:	e6dc      	b.n	15e2 <motor_state_machine+0x46>
			break;
			
			
			/* Idle State */
			case 5:
			motor_on = false;
    1828:	2300      	movs	r3, #0
    182a:	7063      	strb	r3, [r4, #1]
			break;
    182c:	e6d9      	b.n	15e2 <motor_state_machine+0x46>
			default:
			break;
		}
	}
	
}
    182e:	b002      	add	sp, #8
    1830:	bd70      	pop	{r4, r5, r6, pc}
    1832:	bf00      	nop
    1834:	41008000 	.word	0x41008000
    1838:	20000720 	.word	0x20000720
    183c:	00001579 	.word	0x00001579
    1840:	20000c14 	.word	0x20000c14

00001844 <motor_hone>:
void motor_hone(void){
    1844:	b538      	push	{r3, r4, r5, lr}
	Homing_message_Ptr = Homing_message_Arr;
    1846:	4811      	ldr	r0, [pc, #68]	; (188c <motor_hone+0x48>)
    1848:	4b11      	ldr	r3, [pc, #68]	; (1890 <motor_hone+0x4c>)
    184a:	6018      	str	r0, [r3, #0]
	write_terminal(Homing_message_Ptr);
    184c:	4b11      	ldr	r3, [pc, #68]	; (1894 <motor_hone+0x50>)
    184e:	4798      	blx	r3
	accel = false;
    1850:	4c11      	ldr	r4, [pc, #68]	; (1898 <motor_hone+0x54>)
    1852:	2300      	movs	r3, #0
    1854:	7223      	strb	r3, [r4, #8]
	motor_state_machine(1, 0x400);	//0x400 steps CW
    1856:	f44f 6180 	mov.w	r1, #1024	; 0x400
    185a:	2001      	movs	r0, #1
    185c:	4d0f      	ldr	r5, [pc, #60]	; (189c <motor_hone+0x58>)
    185e:	47a8      	blx	r5
	motor_state_machine(2, 0x2500); 	//CCW look for picth and catch
    1860:	f44f 5114 	mov.w	r1, #9472	; 0x2500
    1864:	2002      	movs	r0, #2
    1866:	47a8      	blx	r5
	if(catch){	//pitch and catch was detected
    1868:	7823      	ldrb	r3, [r4, #0]
    186a:	b953      	cbnz	r3, 1882 <motor_hone+0x3e>
	current_pos = 1;
    186c:	2401      	movs	r4, #1
    186e:	4b0c      	ldr	r3, [pc, #48]	; (18a0 <motor_hone+0x5c>)
    1870:	601c      	str	r4, [r3, #0]
	Homing_message_Ptr = Honing_done_message_Arr;
    1872:	480c      	ldr	r0, [pc, #48]	; (18a4 <motor_hone+0x60>)
    1874:	4b06      	ldr	r3, [pc, #24]	; (1890 <motor_hone+0x4c>)
    1876:	6018      	str	r0, [r3, #0]
	write_terminal(Homing_message_Ptr);
    1878:	4b06      	ldr	r3, [pc, #24]	; (1894 <motor_hone+0x50>)
    187a:	4798      	blx	r3
	hone_done = true;
    187c:	4b06      	ldr	r3, [pc, #24]	; (1898 <motor_hone+0x54>)
    187e:	725c      	strb	r4, [r3, #9]
    1880:	bd38      	pop	{r3, r4, r5, pc}
		motor_state_machine(1, 0x96);	//0x96 steps CW to 1st aper
    1882:	2196      	movs	r1, #150	; 0x96
    1884:	2001      	movs	r0, #1
    1886:	47a8      	blx	r5
    1888:	e7f0      	b.n	186c <motor_hone+0x28>
    188a:	bf00      	nop
    188c:	20000724 	.word	0x20000724
    1890:	20000c1c 	.word	0x20000c1c
    1894:	000004d5 	.word	0x000004d5
    1898:	20000b94 	.word	0x20000b94
    189c:	0000159d 	.word	0x0000159d
    18a0:	20000c20 	.word	0x20000c20
    18a4:	2000072c 	.word	0x2000072c

000018a8 <select_aper>:
void select_aper(char aper){
    18a8:	b508      	push	{r3, lr}
	switch(aper){
    18aa:	3830      	subs	r0, #48	; 0x30
    18ac:	2806      	cmp	r0, #6
    18ae:	f200 80ce 	bhi.w	1a4e <select_aper+0x1a6>
    18b2:	e8df f010 	tbh	[pc, r0, lsl #1]
    18b6:	0007      	.short	0x0007
    18b8:	002c000a 	.word	0x002c000a
    18bc:	0071004f 	.word	0x0071004f
    18c0:	00b50093 	.word	0x00b50093
		motor_hone();
    18c4:	4b67      	ldr	r3, [pc, #412]	; (1a64 <select_aper+0x1bc>)
    18c6:	4798      	blx	r3
		break;
    18c8:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    18ca:	4b67      	ldr	r3, [pc, #412]	; (1a68 <select_aper+0x1c0>)
    18cc:	7a5b      	ldrb	r3, [r3, #9]
    18ce:	b1a3      	cbz	r3, 18fa <select_aper+0x52>
		accel = true;
    18d0:	2201      	movs	r2, #1
    18d2:	4b65      	ldr	r3, [pc, #404]	; (1a68 <select_aper+0x1c0>)
    18d4:	721a      	strb	r2, [r3, #8]
		aper_diff = 1 - current_pos;
    18d6:	4b65      	ldr	r3, [pc, #404]	; (1a6c <select_aper+0x1c4>)
    18d8:	6819      	ldr	r1, [r3, #0]
		if(aper_diff == 0){
    18da:	1a51      	subs	r1, r2, r1
    18dc:	f000 80b7 	beq.w	1a4e <select_aper+0x1a6>
		if(aper_diff < 0){
    18e0:	2900      	cmp	r1, #0
    18e2:	db0d      	blt.n	1900 <select_aper+0x58>
		motor_state_machine(1, (0x340 * aper_diff));	//0x steps CW
    18e4:	f44f 7350 	mov.w	r3, #832	; 0x340
    18e8:	fb03 f101 	mul.w	r1, r3, r1
    18ec:	2001      	movs	r0, #1
    18ee:	4b60      	ldr	r3, [pc, #384]	; (1a70 <select_aper+0x1c8>)
    18f0:	4798      	blx	r3
		current_pos = 1;
    18f2:	2201      	movs	r2, #1
    18f4:	4b5d      	ldr	r3, [pc, #372]	; (1a6c <select_aper+0x1c4>)
    18f6:	601a      	str	r2, [r3, #0]
		break;
    18f8:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    18fa:	4b5a      	ldr	r3, [pc, #360]	; (1a64 <select_aper+0x1bc>)
    18fc:	4798      	blx	r3
    18fe:	e7e7      	b.n	18d0 <select_aper+0x28>
			motor_state_machine(2, (0x340 * aper_diff));	//0x steps CCW
    1900:	4b5c      	ldr	r3, [pc, #368]	; (1a74 <select_aper+0x1cc>)
    1902:	fb03 f101 	mul.w	r1, r3, r1
    1906:	2002      	movs	r0, #2
    1908:	4b59      	ldr	r3, [pc, #356]	; (1a70 <select_aper+0x1c8>)
    190a:	4798      	blx	r3
			break;
    190c:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    190e:	4b56      	ldr	r3, [pc, #344]	; (1a68 <select_aper+0x1c0>)
    1910:	7a5b      	ldrb	r3, [r3, #9]
    1912:	b1ab      	cbz	r3, 1940 <select_aper+0x98>
		accel = true;	
    1914:	2201      	movs	r2, #1
    1916:	4b54      	ldr	r3, [pc, #336]	; (1a68 <select_aper+0x1c0>)
    1918:	721a      	strb	r2, [r3, #8]
		aper_diff = 2 - current_pos;
    191a:	4b54      	ldr	r3, [pc, #336]	; (1a6c <select_aper+0x1c4>)
    191c:	6819      	ldr	r1, [r3, #0]
		if(aper_diff == 0){
    191e:	f1d1 0102 	rsbs	r1, r1, #2
    1922:	f000 8094 	beq.w	1a4e <select_aper+0x1a6>
		if(aper_diff < 0){
    1926:	2900      	cmp	r1, #0
    1928:	db0d      	blt.n	1946 <select_aper+0x9e>
		motor_state_machine(1, (0x340 * aper_diff));	//0x steps CW	
    192a:	f44f 7350 	mov.w	r3, #832	; 0x340
    192e:	fb03 f101 	mul.w	r1, r3, r1
    1932:	2001      	movs	r0, #1
    1934:	4b4e      	ldr	r3, [pc, #312]	; (1a70 <select_aper+0x1c8>)
    1936:	4798      	blx	r3
		current_pos = 2;	
    1938:	2202      	movs	r2, #2
    193a:	4b4c      	ldr	r3, [pc, #304]	; (1a6c <select_aper+0x1c4>)
    193c:	601a      	str	r2, [r3, #0]
		break;
    193e:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    1940:	4b48      	ldr	r3, [pc, #288]	; (1a64 <select_aper+0x1bc>)
    1942:	4798      	blx	r3
    1944:	e7e6      	b.n	1914 <select_aper+0x6c>
			motor_state_machine(2, (0x340 * aper_diff));	//0x steps CCW
    1946:	4b4b      	ldr	r3, [pc, #300]	; (1a74 <select_aper+0x1cc>)
    1948:	fb03 f101 	mul.w	r1, r3, r1
    194c:	2002      	movs	r0, #2
    194e:	4b48      	ldr	r3, [pc, #288]	; (1a70 <select_aper+0x1c8>)
    1950:	4798      	blx	r3
			break;
    1952:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    1954:	4b44      	ldr	r3, [pc, #272]	; (1a68 <select_aper+0x1c0>)
    1956:	7a5b      	ldrb	r3, [r3, #9]
    1958:	b1a3      	cbz	r3, 1984 <select_aper+0xdc>
		accel = true;	
    195a:	2201      	movs	r2, #1
    195c:	4b42      	ldr	r3, [pc, #264]	; (1a68 <select_aper+0x1c0>)
    195e:	721a      	strb	r2, [r3, #8]
		aper_diff = 3 - current_pos;
    1960:	4b42      	ldr	r3, [pc, #264]	; (1a6c <select_aper+0x1c4>)
    1962:	6819      	ldr	r1, [r3, #0]
		if(aper_diff == 0){
    1964:	f1d1 0103 	rsbs	r1, r1, #3
    1968:	d071      	beq.n	1a4e <select_aper+0x1a6>
		if(aper_diff < 0){
    196a:	2900      	cmp	r1, #0
    196c:	db0d      	blt.n	198a <select_aper+0xe2>
		motor_state_machine(1, (0x340 * aper_diff));	//0x steps CW		
    196e:	f44f 7350 	mov.w	r3, #832	; 0x340
    1972:	fb03 f101 	mul.w	r1, r3, r1
    1976:	2001      	movs	r0, #1
    1978:	4b3d      	ldr	r3, [pc, #244]	; (1a70 <select_aper+0x1c8>)
    197a:	4798      	blx	r3
		current_pos = 3;
    197c:	2203      	movs	r2, #3
    197e:	4b3b      	ldr	r3, [pc, #236]	; (1a6c <select_aper+0x1c4>)
    1980:	601a      	str	r2, [r3, #0]
		break;
    1982:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    1984:	4b37      	ldr	r3, [pc, #220]	; (1a64 <select_aper+0x1bc>)
    1986:	4798      	blx	r3
    1988:	e7e7      	b.n	195a <select_aper+0xb2>
			motor_state_machine(2, (0x340 * aper_diff));	//0x steps CCW
    198a:	4b3a      	ldr	r3, [pc, #232]	; (1a74 <select_aper+0x1cc>)
    198c:	fb03 f101 	mul.w	r1, r3, r1
    1990:	2002      	movs	r0, #2
    1992:	4b37      	ldr	r3, [pc, #220]	; (1a70 <select_aper+0x1c8>)
    1994:	4798      	blx	r3
			break;
    1996:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    1998:	4b33      	ldr	r3, [pc, #204]	; (1a68 <select_aper+0x1c0>)
    199a:	7a5b      	ldrb	r3, [r3, #9]
    199c:	b1a3      	cbz	r3, 19c8 <select_aper+0x120>
		accel = true;	
    199e:	2201      	movs	r2, #1
    19a0:	4b31      	ldr	r3, [pc, #196]	; (1a68 <select_aper+0x1c0>)
    19a2:	721a      	strb	r2, [r3, #8]
		aper_diff = 4 - current_pos;
    19a4:	4b31      	ldr	r3, [pc, #196]	; (1a6c <select_aper+0x1c4>)
    19a6:	6819      	ldr	r1, [r3, #0]
		if(aper_diff == 0){
    19a8:	f1d1 0104 	rsbs	r1, r1, #4
    19ac:	d04f      	beq.n	1a4e <select_aper+0x1a6>
		if(aper_diff < 0){
    19ae:	2900      	cmp	r1, #0
    19b0:	db0d      	blt.n	19ce <select_aper+0x126>
		motor_state_machine(1, (0x340 * aper_diff));	//0x steps CW	
    19b2:	f44f 7350 	mov.w	r3, #832	; 0x340
    19b6:	fb03 f101 	mul.w	r1, r3, r1
    19ba:	2001      	movs	r0, #1
    19bc:	4b2c      	ldr	r3, [pc, #176]	; (1a70 <select_aper+0x1c8>)
    19be:	4798      	blx	r3
		current_pos = 4;	
    19c0:	2204      	movs	r2, #4
    19c2:	4b2a      	ldr	r3, [pc, #168]	; (1a6c <select_aper+0x1c4>)
    19c4:	601a      	str	r2, [r3, #0]
		break;
    19c6:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    19c8:	4b26      	ldr	r3, [pc, #152]	; (1a64 <select_aper+0x1bc>)
    19ca:	4798      	blx	r3
    19cc:	e7e7      	b.n	199e <select_aper+0xf6>
			motor_state_machine(2, (0x340 * aper_diff));	//0x steps CCW
    19ce:	4b29      	ldr	r3, [pc, #164]	; (1a74 <select_aper+0x1cc>)
    19d0:	fb03 f101 	mul.w	r1, r3, r1
    19d4:	2002      	movs	r0, #2
    19d6:	4b26      	ldr	r3, [pc, #152]	; (1a70 <select_aper+0x1c8>)
    19d8:	4798      	blx	r3
			break;
    19da:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    19dc:	4b22      	ldr	r3, [pc, #136]	; (1a68 <select_aper+0x1c0>)
    19de:	7a5b      	ldrb	r3, [r3, #9]
    19e0:	b1a3      	cbz	r3, 1a0c <select_aper+0x164>
		accel = true;	
    19e2:	2201      	movs	r2, #1
    19e4:	4b20      	ldr	r3, [pc, #128]	; (1a68 <select_aper+0x1c0>)
    19e6:	721a      	strb	r2, [r3, #8]
		aper_diff = 5 - current_pos;
    19e8:	4b20      	ldr	r3, [pc, #128]	; (1a6c <select_aper+0x1c4>)
    19ea:	6819      	ldr	r1, [r3, #0]
		if(aper_diff == 0){
    19ec:	f1d1 0105 	rsbs	r1, r1, #5
    19f0:	d02d      	beq.n	1a4e <select_aper+0x1a6>
		if(aper_diff < 0){
    19f2:	2900      	cmp	r1, #0
    19f4:	db0d      	blt.n	1a12 <select_aper+0x16a>
		motor_state_machine(1, (0x340 * aper_diff));	//0x steps CW	
    19f6:	f44f 7350 	mov.w	r3, #832	; 0x340
    19fa:	fb03 f101 	mul.w	r1, r3, r1
    19fe:	2001      	movs	r0, #1
    1a00:	4b1b      	ldr	r3, [pc, #108]	; (1a70 <select_aper+0x1c8>)
    1a02:	4798      	blx	r3
		current_pos = 5;	
    1a04:	2205      	movs	r2, #5
    1a06:	4b19      	ldr	r3, [pc, #100]	; (1a6c <select_aper+0x1c4>)
    1a08:	601a      	str	r2, [r3, #0]
		break;
    1a0a:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    1a0c:	4b15      	ldr	r3, [pc, #84]	; (1a64 <select_aper+0x1bc>)
    1a0e:	4798      	blx	r3
    1a10:	e7e7      	b.n	19e2 <select_aper+0x13a>
			motor_state_machine(2, (0x340 * aper_diff));	//0x steps CCW
    1a12:	4b18      	ldr	r3, [pc, #96]	; (1a74 <select_aper+0x1cc>)
    1a14:	fb03 f101 	mul.w	r1, r3, r1
    1a18:	2002      	movs	r0, #2
    1a1a:	4b15      	ldr	r3, [pc, #84]	; (1a70 <select_aper+0x1c8>)
    1a1c:	4798      	blx	r3
			break;
    1a1e:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    1a20:	4b11      	ldr	r3, [pc, #68]	; (1a68 <select_aper+0x1c0>)
    1a22:	7a5b      	ldrb	r3, [r3, #9]
    1a24:	b1a3      	cbz	r3, 1a50 <select_aper+0x1a8>
		accel = true;	
    1a26:	2201      	movs	r2, #1
    1a28:	4b0f      	ldr	r3, [pc, #60]	; (1a68 <select_aper+0x1c0>)
    1a2a:	721a      	strb	r2, [r3, #8]
		aper_diff = 6 - current_pos;
    1a2c:	4b0f      	ldr	r3, [pc, #60]	; (1a6c <select_aper+0x1c4>)
    1a2e:	6819      	ldr	r1, [r3, #0]
		if(aper_diff == 0){
    1a30:	f1d1 0106 	rsbs	r1, r1, #6
    1a34:	d00b      	beq.n	1a4e <select_aper+0x1a6>
		if(aper_diff < 0){
    1a36:	2900      	cmp	r1, #0
    1a38:	db0d      	blt.n	1a56 <select_aper+0x1ae>
		motor_state_machine(1, (0x340 * aper_diff));	//0x steps CW	
    1a3a:	f44f 7350 	mov.w	r3, #832	; 0x340
    1a3e:	fb03 f101 	mul.w	r1, r3, r1
    1a42:	2001      	movs	r0, #1
    1a44:	4b0a      	ldr	r3, [pc, #40]	; (1a70 <select_aper+0x1c8>)
    1a46:	4798      	blx	r3
		current_pos = 6;	
    1a48:	2206      	movs	r2, #6
    1a4a:	4b08      	ldr	r3, [pc, #32]	; (1a6c <select_aper+0x1c4>)
    1a4c:	601a      	str	r2, [r3, #0]
    1a4e:	bd08      	pop	{r3, pc}
		if(!hone_done){motor_hone();}
    1a50:	4b04      	ldr	r3, [pc, #16]	; (1a64 <select_aper+0x1bc>)
    1a52:	4798      	blx	r3
    1a54:	e7e7      	b.n	1a26 <select_aper+0x17e>
			motor_state_machine(2, (0x340 * aper_diff));	//0x steps CCW
    1a56:	4b07      	ldr	r3, [pc, #28]	; (1a74 <select_aper+0x1cc>)
    1a58:	fb03 f101 	mul.w	r1, r3, r1
    1a5c:	2002      	movs	r0, #2
    1a5e:	4b04      	ldr	r3, [pc, #16]	; (1a70 <select_aper+0x1c8>)
    1a60:	4798      	blx	r3
			break;
    1a62:	bd08      	pop	{r3, pc}
    1a64:	00001845 	.word	0x00001845
    1a68:	20000b94 	.word	0x20000b94
    1a6c:	20000c20 	.word	0x20000c20
    1a70:	0000159d 	.word	0x0000159d
    1a74:	fffffcc0 	.word	0xfffffcc0

00001a78 <rtd_port_setup>:
	PortGroup *porC = &(por->Group[2]);
	PortGroup *porD = &(por->Group[3]);
	
	//12MHz crystal on board selected mapped to PB22/PB23
	
	porB->PMUX[2].bit.PMUXE = 1;	//PB04 ADC1 AIN[6] temp sensor
    1a78:	4b3e      	ldr	r3, [pc, #248]	; (1b74 <rtd_port_setup+0xfc>)
    1a7a:	f893 10b2 	ldrb.w	r1, [r3, #178]	; 0xb2
    1a7e:	2201      	movs	r2, #1
    1a80:	f362 0103 	bfi	r1, r2, #0, #4
    1a84:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
	porB->PINCFG[4].bit.PMUXEN = 1;
    1a88:	f893 10c4 	ldrb.w	r1, [r3, #196]	; 0xc4
    1a8c:	4311      	orrs	r1, r2
    1a8e:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
	
	porC->PMUX[0].bit.PMUXE = 1;	//PC00 ADC1 AIN[10] extra
    1a92:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
    1a96:	f362 0103 	bfi	r1, r2, #0, #4
    1a9a:	f883 1130 	strb.w	r1, [r3, #304]	; 0x130
	porC->PINCFG[0].bit.PMUXEN = 1;
    1a9e:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
    1aa2:	4311      	orrs	r1, r2
    1aa4:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
	
	porC->PMUX[0].bit.PMUXO = 1;	//PC01 ADC1 AIN[11] extra
    1aa8:	f893 1130 	ldrb.w	r1, [r3, #304]	; 0x130
    1aac:	f362 1107 	bfi	r1, r2, #4, #4
    1ab0:	f883 1130 	strb.w	r1, [r3, #304]	; 0x130
	porC->PINCFG[1].bit.PMUXEN = 1;
    1ab4:	f893 1141 	ldrb.w	r1, [r3, #321]	; 0x141
    1ab8:	4311      	orrs	r1, r2
    1aba:	f883 1141 	strb.w	r1, [r3, #321]	; 0x141

	porC->PMUX[1].bit.PMUXE = 1;	//PC02 ADC1 AIN[4] RTD0
    1abe:	f893 1131 	ldrb.w	r1, [r3, #305]	; 0x131
    1ac2:	f362 0103 	bfi	r1, r2, #0, #4
    1ac6:	f883 1131 	strb.w	r1, [r3, #305]	; 0x131
	porC->PINCFG[2].bit.PMUXEN = 1;
    1aca:	f893 1142 	ldrb.w	r1, [r3, #322]	; 0x142
    1ace:	4311      	orrs	r1, r2
    1ad0:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
	
	porC->PMUX[1].bit.PMUXO = 1;	//PC03 ADC1 AIN[5] RTD1
    1ad4:	f893 1131 	ldrb.w	r1, [r3, #305]	; 0x131
    1ad8:	f362 1107 	bfi	r1, r2, #4, #4
    1adc:	f883 1131 	strb.w	r1, [r3, #305]	; 0x131
	porC->PINCFG[3].bit.PMUXEN = 1;
    1ae0:	f893 1143 	ldrb.w	r1, [r3, #323]	; 0x143
    1ae4:	4311      	orrs	r1, r2
    1ae6:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
	
	porA->PMUX[1].bit.PMUXE = 1;	//PA02 ADC0 AIN[0] RTD2
    1aea:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    1aee:	f362 0103 	bfi	r1, r2, #0, #4
    1af2:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	porA->PINCFG[2].bit.PMUXEN = 1;
    1af6:	f893 1042 	ldrb.w	r1, [r3, #66]	; 0x42
    1afa:	4311      	orrs	r1, r2
    1afc:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
	
	porA->PMUX[1].bit.PMUXO = 1;	//PA03 ADC0 AIN[1] RTD3
    1b00:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
    1b04:	f362 1107 	bfi	r1, r2, #4, #4
    1b08:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	porA->PINCFG[3].bit.PMUXEN = 1;
    1b0c:	f893 1043 	ldrb.w	r1, [r3, #67]	; 0x43
    1b10:	4311      	orrs	r1, r2
    1b12:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
	
	porB->PMUX[2].bit.PMUXO = 1;	//PB05 ADC1 AIN[7] RTD4
    1b16:	f893 10b2 	ldrb.w	r1, [r3, #178]	; 0xb2
    1b1a:	f362 1107 	bfi	r1, r2, #4, #4
    1b1e:	f883 10b2 	strb.w	r1, [r3, #178]	; 0xb2
	porB->PINCFG[5].bit.PMUXEN = 1;
    1b22:	f893 10c5 	ldrb.w	r1, [r3, #197]	; 0xc5
    1b26:	4311      	orrs	r1, r2
    1b28:	f883 10c5 	strb.w	r1, [r3, #197]	; 0xc5
	
	porD->PMUX[0].bit.PMUXE = 1;	//PD00 ADC1 AIN[14] RTD5
    1b2c:	f893 11b0 	ldrb.w	r1, [r3, #432]	; 0x1b0
    1b30:	f362 0103 	bfi	r1, r2, #0, #4
    1b34:	f883 11b0 	strb.w	r1, [r3, #432]	; 0x1b0
	porD->PINCFG[0].bit.PMUXEN = 1;
    1b38:	f893 11c0 	ldrb.w	r1, [r3, #448]	; 0x1c0
    1b3c:	4311      	orrs	r1, r2
    1b3e:	f883 11c0 	strb.w	r1, [r3, #448]	; 0x1c0
	
	porD->PMUX[0].bit.PMUXO = 1;	//PD01 ADC1 AIN[15] RTD6
    1b42:	f893 11b0 	ldrb.w	r1, [r3, #432]	; 0x1b0
    1b46:	f362 1107 	bfi	r1, r2, #4, #4
    1b4a:	f883 11b0 	strb.w	r1, [r3, #432]	; 0x1b0
	porD->PINCFG[1].bit.PMUXEN = 1;
    1b4e:	f893 11c1 	ldrb.w	r1, [r3, #449]	; 0x1c1
    1b52:	4311      	orrs	r1, r2
    1b54:	f883 11c1 	strb.w	r1, [r3, #449]	; 0x1c1

	porB->PMUX[4].bit.PMUXE = 1;	//PB06 ADC1 AIN[8] RTD7
    1b58:	f893 10b4 	ldrb.w	r1, [r3, #180]	; 0xb4
    1b5c:	f362 0103 	bfi	r1, r2, #0, #4
    1b60:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	porB->PINCFG[8].bit.PMUXEN = 1;
    1b64:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
    1b68:	f042 0201 	orr.w	r2, r2, #1
    1b6c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
    1b70:	4770      	bx	lr
    1b72:	bf00      	nop
    1b74:	41008000 	.word	0x41008000

00001b78 <ADC_1_Setup>:
	
}

/* Setup ADC1 */
void ADC_1_Setup(void){
	ADC1->CTRLA.reg = 0<<1;	//disable so that we can reset
    1b78:	2200      	movs	r2, #0
    1b7a:	4b1d      	ldr	r3, [pc, #116]	; (1bf0 <ADC_1_Setup+0x78>)
    1b7c:	801a      	strh	r2, [r3, #0]
	while (ADC1->SYNCBUSY.reg){}	//wait for disable to complete
    1b7e:	461a      	mov	r2, r3
    1b80:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1b82:	2b00      	cmp	r3, #0
    1b84:	d1fc      	bne.n	1b80 <ADC_1_Setup+0x8>
	ADC1->CTRLA.bit.PRESCALER = 0;	//2^n
    1b86:	4b1a      	ldr	r3, [pc, #104]	; (1bf0 <ADC_1_Setup+0x78>)
    1b88:	881a      	ldrh	r2, [r3, #0]
    1b8a:	f36f 220a 	bfc	r2, #8, #3
    1b8e:	801a      	strh	r2, [r3, #0]
	ADC1->CTRLA.bit.ONDEMAND = 1;
    1b90:	881a      	ldrh	r2, [r3, #0]
    1b92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1b96:	801a      	strh	r2, [r3, #0]
	
	ADC1->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;	//internal reference = VDDann
    1b98:	2203      	movs	r2, #3
    1b9a:	721a      	strb	r2, [r3, #8]
	while(ADC1->SYNCBUSY.bit.REFCTRL){}
    1b9c:	461a      	mov	r2, r3
    1b9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1ba0:	f013 0f10 	tst.w	r3, #16
    1ba4:	d1fb      	bne.n	1b9e <ADC_1_Setup+0x26>
	//ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 | ADC_CTRLB_RESSEL_8BIT | ADC_CTRLB_FREERUN | 0<<0 | ADC_CTRLB_CORREN;
	ADC1->CTRLB.reg = ADC_CTRLB_RESSEL_8BIT | 0<<1 | 0<<0;	// freerun mode off, right adjust
    1ba6:	2218      	movs	r2, #24
    1ba8:	4b11      	ldr	r3, [pc, #68]	; (1bf0 <ADC_1_Setup+0x78>)
    1baa:	80da      	strh	r2, [r3, #6]
	while (ADC1->SYNCBUSY.bit.CTRLB){}	//wait for sync to complete
    1bac:	461a      	mov	r2, r3
    1bae:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1bb0:	f013 0f08 	tst.w	r3, #8
    1bb4:	d1fb      	bne.n	1bae <ADC_1_Setup+0x36>
	ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN6;	//AIN6=PB04
    1bb6:	f641 0206 	movw	r2, #6150	; 0x1806
    1bba:	4b0d      	ldr	r3, [pc, #52]	; (1bf0 <ADC_1_Setup+0x78>)
    1bbc:	809a      	strh	r2, [r3, #4]
	while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1bbe:	461a      	mov	r2, r3
    1bc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1bc2:	f013 0f04 	tst.w	r3, #4
    1bc6:	d1fb      	bne.n	1bc0 <ADC_1_Setup+0x48>
	ADC1->SWTRIG.bit.START = 1;	//start conversion
    1bc8:	4a09      	ldr	r2, [pc, #36]	; (1bf0 <ADC_1_Setup+0x78>)
    1bca:	7d13      	ldrb	r3, [r2, #20]
    1bcc:	f043 0302 	orr.w	r3, r3, #2
    1bd0:	7513      	strb	r3, [r2, #20]
	while (ADC1->SYNCBUSY.bit.SWTRIG){}	//wait for sync to complete
    1bd2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1bd4:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1bd8:	d1fb      	bne.n	1bd2 <ADC_1_Setup+0x5a>
	//ADC1->INTENSET.reg = ADC_INTENSET_RESRDY;	//setup interrupt when reg is ready to be read
	ADC1->CTRLA.reg |= 1<<1;	//enable ADC
    1bda:	4a05      	ldr	r2, [pc, #20]	; (1bf0 <ADC_1_Setup+0x78>)
    1bdc:	8813      	ldrh	r3, [r2, #0]
    1bde:	b29b      	uxth	r3, r3
    1be0:	f043 0302 	orr.w	r3, r3, #2
    1be4:	8013      	strh	r3, [r2, #0]
	while (ADC1->SYNCBUSY.reg){}	//wait for enable to complete
    1be6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1be8:	2b00      	cmp	r3, #0
    1bea:	d1fc      	bne.n	1be6 <ADC_1_Setup+0x6e>
	//NVIC->ISER[3] |= 1<<25;	//enable the NVIC handler
	//ADC0->OFFSETCORR.reg = 0b000000110100;	//shift down by 52, 2's comp
	//ADC0->GAINCORR.reg =   0b100010100000;	//when corren is enabled it enables gain comp too, fractional
}
    1bec:	4770      	bx	lr
    1bee:	bf00      	nop
    1bf0:	43002000 	.word	0x43002000

00001bf4 <ADC_0_Setup>:

/* Setup ADC0 */
void ADC_0_Setup(void){
	ADC0->CTRLA.reg = 0<<1;	//disable so that we can reset
    1bf4:	2200      	movs	r2, #0
    1bf6:	4b1d      	ldr	r3, [pc, #116]	; (1c6c <ADC_0_Setup+0x78>)
    1bf8:	801a      	strh	r2, [r3, #0]
	while (ADC0->SYNCBUSY.reg){}	//wait for disable to complete
    1bfa:	461a      	mov	r2, r3
    1bfc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1bfe:	2b00      	cmp	r3, #0
    1c00:	d1fc      	bne.n	1bfc <ADC_0_Setup+0x8>
	ADC0->CTRLA.bit.PRESCALER = 0;	//2^n
    1c02:	4b1a      	ldr	r3, [pc, #104]	; (1c6c <ADC_0_Setup+0x78>)
    1c04:	881a      	ldrh	r2, [r3, #0]
    1c06:	f36f 220a 	bfc	r2, #8, #3
    1c0a:	801a      	strh	r2, [r3, #0]
	ADC0->CTRLA.bit.ONDEMAND = 1;
    1c0c:	881a      	ldrh	r2, [r3, #0]
    1c0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1c12:	801a      	strh	r2, [r3, #0]
	
	ADC0->REFCTRL.reg = ADC_REFCTRL_REFSEL_INTVCC1;	//internal reference = VDDann
    1c14:	2203      	movs	r2, #3
    1c16:	721a      	strb	r2, [r3, #8]
	while(ADC0->SYNCBUSY.bit.REFCTRL){}
    1c18:	461a      	mov	r2, r3
    1c1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1c1c:	f013 0f10 	tst.w	r3, #16
    1c20:	d1fb      	bne.n	1c1a <ADC_0_Setup+0x26>
	//ADC->CTRLB.reg = ADC_CTRLB_PRESCALER_DIV512 | ADC_CTRLB_RESSEL_8BIT | ADC_CTRLB_FREERUN | 0<<0 | ADC_CTRLB_CORREN;
	ADC0->CTRLB.reg = ADC_CTRLB_RESSEL_8BIT | 0<<1 | 0<<0;	// freerun mode off, right adjust
    1c22:	2218      	movs	r2, #24
    1c24:	4b11      	ldr	r3, [pc, #68]	; (1c6c <ADC_0_Setup+0x78>)
    1c26:	80da      	strh	r2, [r3, #6]
	while (ADC0->SYNCBUSY.bit.CTRLB){}	//wait for sync to complete
    1c28:	461a      	mov	r2, r3
    1c2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1c2c:	f013 0f08 	tst.w	r3, #8
    1c30:	d1fb      	bne.n	1c2a <ADC_0_Setup+0x36>
	ADC0->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN6;	//AIN6=PB04
    1c32:	f641 0206 	movw	r2, #6150	; 0x1806
    1c36:	4b0d      	ldr	r3, [pc, #52]	; (1c6c <ADC_0_Setup+0x78>)
    1c38:	809a      	strh	r2, [r3, #4]
	while (ADC0->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1c3a:	461a      	mov	r2, r3
    1c3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1c3e:	f013 0f04 	tst.w	r3, #4
    1c42:	d1fb      	bne.n	1c3c <ADC_0_Setup+0x48>
	ADC0->SWTRIG.bit.START = 1;	//start conversion
    1c44:	4a09      	ldr	r2, [pc, #36]	; (1c6c <ADC_0_Setup+0x78>)
    1c46:	7d13      	ldrb	r3, [r2, #20]
    1c48:	f043 0302 	orr.w	r3, r3, #2
    1c4c:	7513      	strb	r3, [r2, #20]
	while (ADC0->SYNCBUSY.bit.SWTRIG){}	//wait for sync to complete
    1c4e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1c50:	f413 6f00 	tst.w	r3, #2048	; 0x800
    1c54:	d1fb      	bne.n	1c4e <ADC_0_Setup+0x5a>
	//ADC0->INTENSET.reg = ADC_INTENSET_RESRDY;	//setup interrupt when reg is ready to be read
	ADC0->CTRLA.reg |= 1<<1;	//enable ADC
    1c56:	4a05      	ldr	r2, [pc, #20]	; (1c6c <ADC_0_Setup+0x78>)
    1c58:	8813      	ldrh	r3, [r2, #0]
    1c5a:	b29b      	uxth	r3, r3
    1c5c:	f043 0302 	orr.w	r3, r3, #2
    1c60:	8013      	strh	r3, [r2, #0]
	while (ADC0->SYNCBUSY.reg){}	//wait for enable to complete
    1c62:	6b13      	ldr	r3, [r2, #48]	; 0x30
    1c64:	2b00      	cmp	r3, #0
    1c66:	d1fc      	bne.n	1c62 <ADC_0_Setup+0x6e>
	//NVIC->ISER[3] |= 1<<25;	//enable the NVIC handler
	//ADC0->OFFSETCORR.reg = 0b000000110100;	//shift down by 52, 2's comp
	//ADC0->GAINCORR.reg =   0b100010100000;	//when corren is enabled it enables gain comp too, fractional
}
    1c68:	4770      	bx	lr
    1c6a:	bf00      	nop
    1c6c:	43001c00 	.word	0x43001c00

00001c70 <rtd_TC_Setup>:

/* Timer for RTD temp (1 sec) */
void rtd_TC_Setup(void){	
	Tc *tc = TC4;
	TcCount16 *tc4 = &tc->COUNT16;
	tc4->CTRLA.reg = 0;	//disable the TC4
    1c70:	2200      	movs	r2, #0
    1c72:	4b15      	ldr	r3, [pc, #84]	; (1cc8 <rtd_TC_Setup+0x58>)
    1c74:	601a      	str	r2, [r3, #0]
	while(tc4->SYNCBUSY.reg){}	//wait for sync of disable
    1c76:	461a      	mov	r2, r3
    1c78:	6913      	ldr	r3, [r2, #16]
    1c7a:	2b00      	cmp	r3, #0
    1c7c:	d1fc      	bne.n	1c78 <rtd_TC_Setup+0x8>
	tc4->CTRLA.bit.PRESCALER = 4;	//2^n;
    1c7e:	4b12      	ldr	r3, [pc, #72]	; (1cc8 <rtd_TC_Setup+0x58>)
    1c80:	681a      	ldr	r2, [r3, #0]
    1c82:	2104      	movs	r1, #4
    1c84:	f361 220a 	bfi	r2, r1, #8, #3
    1c88:	601a      	str	r2, [r3, #0]
	tc4->CTRLA.bit.MODE = 0;	//16 bit mode
    1c8a:	681a      	ldr	r2, [r3, #0]
    1c8c:	f36f 0283 	bfc	r2, #2, #2
    1c90:	601a      	str	r2, [r3, #0]
	tc4->CTRLBSET.bit.ONESHOT = 1;	//turn on one shot mode
    1c92:	795a      	ldrb	r2, [r3, #5]
    1c94:	430a      	orrs	r2, r1
    1c96:	715a      	strb	r2, [r3, #5]
	while(tc4->SYNCBUSY.bit.CTRLB){}	//wait for sync to complete
    1c98:	461a      	mov	r2, r3
    1c9a:	6913      	ldr	r3, [r2, #16]
    1c9c:	f013 0f04 	tst.w	r3, #4
    1ca0:	d1fb      	bne.n	1c9a <rtd_TC_Setup+0x2a>
	tc4->INTENSET.bit.OVF = 1;	//enable the overflow interrupt
    1ca2:	4b09      	ldr	r3, [pc, #36]	; (1cc8 <rtd_TC_Setup+0x58>)
    1ca4:	7a5a      	ldrb	r2, [r3, #9]
    1ca6:	f042 0201 	orr.w	r2, r2, #1
    1caa:	725a      	strb	r2, [r3, #9]
	tc4->CTRLA.reg |= 1<<1;	//enable the TC4
    1cac:	681a      	ldr	r2, [r3, #0]
    1cae:	f042 0202 	orr.w	r2, r2, #2
    1cb2:	601a      	str	r2, [r3, #0]
	while(tc4->SYNCBUSY.reg){}	//wait for sync of enable
    1cb4:	461a      	mov	r2, r3
    1cb6:	6913      	ldr	r3, [r2, #16]
    1cb8:	2b00      	cmp	r3, #0
    1cba:	d1fc      	bne.n	1cb6 <rtd_TC_Setup+0x46>
	NVIC->ISER[3] |= 1<<15;	//enable the NVIC handler for TC4
    1cbc:	4a03      	ldr	r2, [pc, #12]	; (1ccc <rtd_TC_Setup+0x5c>)
    1cbe:	68d3      	ldr	r3, [r2, #12]
    1cc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    1cc4:	60d3      	str	r3, [r2, #12]
    1cc6:	4770      	bx	lr
    1cc8:	42001400 	.word	0x42001400
    1ccc:	e000e100 	.word	0xe000e100

00001cd0 <check_RTDs>:
	tc4->CTRLBSET.bit.CMD = 1;	//force retrigger
	while(tc4->SYNCBUSY.bit.CTRLB){}	//wait for sync to complete
}

/* Check each RTD and store in array */
void check_RTDs(void){
    1cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1cd4:	b082      	sub	sp, #8
	volatile int RTD = 0;
    1cd6:	2300      	movs	r3, #0
    1cd8:	9301      	str	r3, [sp, #4]
	
	while(RTD < 8){
    1cda:	9b01      	ldr	r3, [sp, #4]
    1cdc:	2b07      	cmp	r3, #7
    1cde:	f300 80d3 	bgt.w	1e88 <check_RTDs+0x1b8>
		switch(RTD){
			
			case 0:	//rtd 0
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN4;	//AIN4=PC02
    1ce2:	4b6b      	ldr	r3, [pc, #428]	; (1e90 <check_RTDs+0x1c0>)
    1ce4:	f641 0c04 	movw	ip, #6148	; 0x1804
			while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
			ADC1->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1ce8:	2401      	movs	r4, #1
			while(ADC1->INTFLAG.bit.RESRDY == 0){}
			RTD_array[RTD] = ADC1->RESULT.reg;
    1cea:	486a      	ldr	r0, [pc, #424]	; (1e94 <check_RTDs+0x1c4>)
			break;
			
			case 1:	//rtd1
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN5;	//AIN5=PC03
    1cec:	f641 0e05 	movw	lr, #6149	; 0x1805
			while(ADC1->INTFLAG.bit.RESRDY == 0){}
			RTD_array[RTD] = ADC1->RESULT.reg;
			break;
			
			case 2:	//rtd2
			ADC0->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN0;	//AIN0=PA02
    1cf0:	4a69      	ldr	r2, [pc, #420]	; (1e98 <check_RTDs+0x1c8>)
    1cf2:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
			while(ADC0->INTFLAG.bit.RESRDY == 0){}
			RTD_array[RTD] = ADC0->RESULT.reg;
			break;
			
			case 3:	//rtd3
			ADC0->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN1;	//AIN1=PA03
    1cf6:	f641 0601 	movw	r6, #6145	; 0x1801
			while(ADC0->INTFLAG.bit.RESRDY == 0){}
			RTD_array[RTD] = ADC0->RESULT.reg;
			break;
			
			case 4:	//rtd4
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN7;	//AIN7=PB05
    1cfa:	f641 0507 	movw	r5, #6151	; 0x1807
    1cfe:	e019      	b.n	1d34 <check_RTDs+0x64>
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN4;	//AIN4=PC02
    1d00:	f8a3 c004 	strh.w	ip, [r3, #4]
			while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1d04:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1d06:	f011 0f04 	tst.w	r1, #4
    1d0a:	d1fb      	bne.n	1d04 <check_RTDs+0x34>
			ADC1->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1d0c:	751c      	strb	r4, [r3, #20]
			while(ADC1->INTFLAG.bit.RESRDY == 0){}
    1d0e:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    1d12:	f011 0f01 	tst.w	r1, #1
    1d16:	d0fa      	beq.n	1d0e <check_RTDs+0x3e>
			RTD_array[RTD] = ADC1->RESULT.reg;
    1d18:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1d1c:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
    1d20:	b289      	uxth	r1, r1
    1d22:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
			
			default:
			RTD_array[RTD] = 99;
			break;
		}
		RTD++;
    1d26:	9901      	ldr	r1, [sp, #4]
    1d28:	3101      	adds	r1, #1
    1d2a:	9101      	str	r1, [sp, #4]
	while(RTD < 8){
    1d2c:	9901      	ldr	r1, [sp, #4]
    1d2e:	2907      	cmp	r1, #7
    1d30:	f300 80aa 	bgt.w	1e88 <check_RTDs+0x1b8>
		switch(RTD){
    1d34:	9901      	ldr	r1, [sp, #4]
    1d36:	2907      	cmp	r1, #7
    1d38:	f200 80a0 	bhi.w	1e7c <check_RTDs+0x1ac>
    1d3c:	f20f 0804 	addw	r8, pc, #4
    1d40:	f858 f021 	ldr.w	pc, [r8, r1, lsl #2]
    1d44:	00001d01 	.word	0x00001d01
    1d48:	00001d65 	.word	0x00001d65
    1d4c:	00001d8d 	.word	0x00001d8d
    1d50:	00001db3 	.word	0x00001db3
    1d54:	00001dd9 	.word	0x00001dd9
    1d58:	00001dff 	.word	0x00001dff
    1d5c:	00001e29 	.word	0x00001e29
    1d60:	00001e53 	.word	0x00001e53
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN5;	//AIN5=PC03
    1d64:	f8a3 e004 	strh.w	lr, [r3, #4]
			while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1d68:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1d6a:	f011 0f04 	tst.w	r1, #4
    1d6e:	d1fb      	bne.n	1d68 <check_RTDs+0x98>
			ADC1->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1d70:	751c      	strb	r4, [r3, #20]
			while(ADC1->INTFLAG.bit.RESRDY == 0){}
    1d72:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    1d76:	f011 0f01 	tst.w	r1, #1
    1d7a:	d0fa      	beq.n	1d72 <check_RTDs+0xa2>
			RTD_array[RTD] = ADC1->RESULT.reg;
    1d7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1d80:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
    1d84:	b289      	uxth	r1, r1
    1d86:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
			break;
    1d8a:	e7cc      	b.n	1d26 <check_RTDs+0x56>
			ADC0->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN0;	//AIN0=PA02
    1d8c:	8097      	strh	r7, [r2, #4]
			while (ADC0->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1d8e:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1d90:	f011 0f04 	tst.w	r1, #4
    1d94:	d1fb      	bne.n	1d8e <check_RTDs+0xbe>
			ADC0->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1d96:	7514      	strb	r4, [r2, #20]
			while(ADC0->INTFLAG.bit.RESRDY == 0){}
    1d98:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    1d9c:	f011 0f01 	tst.w	r1, #1
    1da0:	d0fa      	beq.n	1d98 <check_RTDs+0xc8>
			RTD_array[RTD] = ADC0->RESULT.reg;
    1da2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1da6:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
    1daa:	b289      	uxth	r1, r1
    1dac:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
			break;
    1db0:	e7b9      	b.n	1d26 <check_RTDs+0x56>
			ADC0->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN1;	//AIN1=PA03
    1db2:	8096      	strh	r6, [r2, #4]
			while (ADC0->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1db4:	6b11      	ldr	r1, [r2, #48]	; 0x30
    1db6:	f011 0f04 	tst.w	r1, #4
    1dba:	d1fb      	bne.n	1db4 <check_RTDs+0xe4>
			ADC0->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1dbc:	7514      	strb	r4, [r2, #20]
			while(ADC0->INTFLAG.bit.RESRDY == 0){}
    1dbe:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    1dc2:	f011 0f01 	tst.w	r1, #1
    1dc6:	d0fa      	beq.n	1dbe <check_RTDs+0xee>
			RTD_array[RTD] = ADC0->RESULT.reg;
    1dc8:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1dcc:	f8b2 1040 	ldrh.w	r1, [r2, #64]	; 0x40
    1dd0:	b289      	uxth	r1, r1
    1dd2:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
			break;
    1dd6:	e7a6      	b.n	1d26 <check_RTDs+0x56>
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN7;	//AIN7=PB05
    1dd8:	809d      	strh	r5, [r3, #4]
			while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1ddc:	f011 0f04 	tst.w	r1, #4
    1de0:	d1fb      	bne.n	1dda <check_RTDs+0x10a>
			ADC1->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1de2:	751c      	strb	r4, [r3, #20]
			while(ADC1->INTFLAG.bit.RESRDY == 0){}
    1de4:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    1de8:	f011 0f01 	tst.w	r1, #1
    1dec:	d0fa      	beq.n	1de4 <check_RTDs+0x114>
			RTD_array[RTD] = ADC1->RESULT.reg;
    1dee:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1df2:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
    1df6:	b289      	uxth	r1, r1
    1df8:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
			break;
    1dfc:	e793      	b.n	1d26 <check_RTDs+0x56>
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN14;	//AIN14=PD00
    1dfe:	f641 010e 	movw	r1, #6158	; 0x180e
    1e02:	8099      	strh	r1, [r3, #4]
			while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1e04:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1e06:	f011 0f04 	tst.w	r1, #4
    1e0a:	d1fb      	bne.n	1e04 <check_RTDs+0x134>
			ADC1->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1e0c:	751c      	strb	r4, [r3, #20]
			while(ADC1->INTFLAG.bit.RESRDY == 0){}
    1e0e:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    1e12:	f011 0f01 	tst.w	r1, #1
    1e16:	d0fa      	beq.n	1e0e <check_RTDs+0x13e>
			RTD_array[RTD] = ADC1->RESULT.reg;
    1e18:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1e1c:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
    1e20:	b289      	uxth	r1, r1
    1e22:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
			break;
    1e26:	e77e      	b.n	1d26 <check_RTDs+0x56>
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN15;	//AIN15=PD01
    1e28:	f641 010f 	movw	r1, #6159	; 0x180f
    1e2c:	8099      	strh	r1, [r3, #4]
			while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1e30:	f011 0f04 	tst.w	r1, #4
    1e34:	d1fb      	bne.n	1e2e <check_RTDs+0x15e>
			ADC1->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1e36:	751c      	strb	r4, [r3, #20]
			while(ADC1->INTFLAG.bit.RESRDY == 0){}
    1e38:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    1e3c:	f011 0f01 	tst.w	r1, #1
    1e40:	d0fa      	beq.n	1e38 <check_RTDs+0x168>
			RTD_array[RTD] = ADC1->RESULT.reg;
    1e42:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1e46:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
    1e4a:	b289      	uxth	r1, r1
    1e4c:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
			break;
    1e50:	e769      	b.n	1d26 <check_RTDs+0x56>
			ADC1->INPUTCTRL.reg = ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_MUXPOS_AIN8;	//AIN8=PB06
    1e52:	f641 0108 	movw	r1, #6152	; 0x1808
    1e56:	8099      	strh	r1, [r3, #4]
			while (ADC1->SYNCBUSY.bit.INPUTCTRL){}	//wait for sync to complete
    1e58:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1e5a:	f011 0f04 	tst.w	r1, #4
    1e5e:	d1fb      	bne.n	1e58 <check_RTDs+0x188>
			ADC1->SWTRIG.reg = 1;	//trigger ADC to start conversion
    1e60:	751c      	strb	r4, [r3, #20]
			while(ADC1->INTFLAG.bit.RESRDY == 0){}
    1e62:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
    1e66:	f011 0f01 	tst.w	r1, #1
    1e6a:	d0fa      	beq.n	1e62 <check_RTDs+0x192>
			RTD_array[RTD] = ADC1->RESULT.reg;
    1e6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
    1e70:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
    1e74:	b289      	uxth	r1, r1
    1e76:	f840 1028 	str.w	r1, [r0, r8, lsl #2]
			break;
    1e7a:	e754      	b.n	1d26 <check_RTDs+0x56>
			RTD_array[RTD] = 99;
    1e7c:	9901      	ldr	r1, [sp, #4]
    1e7e:	f04f 0863 	mov.w	r8, #99	; 0x63
    1e82:	f840 8021 	str.w	r8, [r0, r1, lsl #2]
			break;
    1e86:	e74e      	b.n	1d26 <check_RTDs+0x56>
	}
}
    1e88:	b002      	add	sp, #8
    1e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e8e:	bf00      	nop
    1e90:	43002000 	.word	0x43002000
    1e94:	20000ba0 	.word	0x20000ba0
    1e98:	43001c00 	.word	0x43001c00

00001e9c <TC4_Handler>:
void TC4_Handler(void){
    1e9c:	b510      	push	{r4, lr}
	tc4->INTFLAG.bit.OVF = 1;	//clear the int flag
    1e9e:	4c09      	ldr	r4, [pc, #36]	; (1ec4 <TC4_Handler+0x28>)
    1ea0:	7aa3      	ldrb	r3, [r4, #10]
    1ea2:	f043 0301 	orr.w	r3, r3, #1
    1ea6:	72a3      	strb	r3, [r4, #10]
	check_RTDs();	
    1ea8:	4b07      	ldr	r3, [pc, #28]	; (1ec8 <TC4_Handler+0x2c>)
    1eaa:	4798      	blx	r3
	tc4->CTRLBSET.bit.CMD = 1;	//force retrigger
    1eac:	7963      	ldrb	r3, [r4, #5]
    1eae:	2201      	movs	r2, #1
    1eb0:	f362 1347 	bfi	r3, r2, #5, #3
    1eb4:	7163      	strb	r3, [r4, #5]
	while(tc4->SYNCBUSY.bit.CTRLB){}	//wait for sync to complete
    1eb6:	4622      	mov	r2, r4
    1eb8:	6913      	ldr	r3, [r2, #16]
    1eba:	f013 0f04 	tst.w	r3, #4
    1ebe:	d1fb      	bne.n	1eb8 <TC4_Handler+0x1c>
}
    1ec0:	bd10      	pop	{r4, pc}
    1ec2:	bf00      	nop
    1ec4:	42001400 	.word	0x42001400
    1ec8:	00001cd1 	.word	0x00001cd1

00001ecc <display_RTDs>:

void display_RTDs(void){
    1ecc:	b570      	push	{r4, r5, r6, lr}
    1ece:	2408      	movs	r4, #8
	int i = 0;
	while(i < 8){
		convert(RTD_array_ptr++);
    1ed0:	4d04      	ldr	r5, [pc, #16]	; (1ee4 <display_RTDs+0x18>)
    1ed2:	4e05      	ldr	r6, [pc, #20]	; (1ee8 <display_RTDs+0x1c>)
    1ed4:	6828      	ldr	r0, [r5, #0]
    1ed6:	1d03      	adds	r3, r0, #4
    1ed8:	602b      	str	r3, [r5, #0]
    1eda:	47b0      	blx	r6
	while(i < 8){
    1edc:	3c01      	subs	r4, #1
    1ede:	d1f9      	bne.n	1ed4 <display_RTDs+0x8>
		i++;
	}
}
    1ee0:	bd70      	pop	{r4, r5, r6, pc}
    1ee2:	bf00      	nop
    1ee4:	20000c24 	.word	0x20000c24
    1ee8:	00001085 	.word	0x00001085

00001eec <__aeabi_drsub>:
    1eec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    1ef0:	e002      	b.n	1ef8 <__adddf3>
    1ef2:	bf00      	nop

00001ef4 <__aeabi_dsub>:
    1ef4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00001ef8 <__adddf3>:
    1ef8:	b530      	push	{r4, r5, lr}
    1efa:	ea4f 0441 	mov.w	r4, r1, lsl #1
    1efe:	ea4f 0543 	mov.w	r5, r3, lsl #1
    1f02:	ea94 0f05 	teq	r4, r5
    1f06:	bf08      	it	eq
    1f08:	ea90 0f02 	teqeq	r0, r2
    1f0c:	bf1f      	itttt	ne
    1f0e:	ea54 0c00 	orrsne.w	ip, r4, r0
    1f12:	ea55 0c02 	orrsne.w	ip, r5, r2
    1f16:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    1f1a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1f1e:	f000 80e2 	beq.w	20e6 <__adddf3+0x1ee>
    1f22:	ea4f 5454 	mov.w	r4, r4, lsr #21
    1f26:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    1f2a:	bfb8      	it	lt
    1f2c:	426d      	neglt	r5, r5
    1f2e:	dd0c      	ble.n	1f4a <__adddf3+0x52>
    1f30:	442c      	add	r4, r5
    1f32:	ea80 0202 	eor.w	r2, r0, r2
    1f36:	ea81 0303 	eor.w	r3, r1, r3
    1f3a:	ea82 0000 	eor.w	r0, r2, r0
    1f3e:	ea83 0101 	eor.w	r1, r3, r1
    1f42:	ea80 0202 	eor.w	r2, r0, r2
    1f46:	ea81 0303 	eor.w	r3, r1, r3
    1f4a:	2d36      	cmp	r5, #54	; 0x36
    1f4c:	bf88      	it	hi
    1f4e:	bd30      	pophi	{r4, r5, pc}
    1f50:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    1f54:	ea4f 3101 	mov.w	r1, r1, lsl #12
    1f58:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1f5c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1f60:	d002      	beq.n	1f68 <__adddf3+0x70>
    1f62:	4240      	negs	r0, r0
    1f64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1f68:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1f6c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1f70:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    1f74:	d002      	beq.n	1f7c <__adddf3+0x84>
    1f76:	4252      	negs	r2, r2
    1f78:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1f7c:	ea94 0f05 	teq	r4, r5
    1f80:	f000 80a7 	beq.w	20d2 <__adddf3+0x1da>
    1f84:	f1a4 0401 	sub.w	r4, r4, #1
    1f88:	f1d5 0e20 	rsbs	lr, r5, #32
    1f8c:	db0d      	blt.n	1faa <__adddf3+0xb2>
    1f8e:	fa02 fc0e 	lsl.w	ip, r2, lr
    1f92:	fa22 f205 	lsr.w	r2, r2, r5
    1f96:	1880      	adds	r0, r0, r2
    1f98:	f141 0100 	adc.w	r1, r1, #0
    1f9c:	fa03 f20e 	lsl.w	r2, r3, lr
    1fa0:	1880      	adds	r0, r0, r2
    1fa2:	fa43 f305 	asr.w	r3, r3, r5
    1fa6:	4159      	adcs	r1, r3
    1fa8:	e00e      	b.n	1fc8 <__adddf3+0xd0>
    1faa:	f1a5 0520 	sub.w	r5, r5, #32
    1fae:	f10e 0e20 	add.w	lr, lr, #32
    1fb2:	2a01      	cmp	r2, #1
    1fb4:	fa03 fc0e 	lsl.w	ip, r3, lr
    1fb8:	bf28      	it	cs
    1fba:	f04c 0c02 	orrcs.w	ip, ip, #2
    1fbe:	fa43 f305 	asr.w	r3, r3, r5
    1fc2:	18c0      	adds	r0, r0, r3
    1fc4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    1fc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1fcc:	d507      	bpl.n	1fde <__adddf3+0xe6>
    1fce:	f04f 0e00 	mov.w	lr, #0
    1fd2:	f1dc 0c00 	rsbs	ip, ip, #0
    1fd6:	eb7e 0000 	sbcs.w	r0, lr, r0
    1fda:	eb6e 0101 	sbc.w	r1, lr, r1
    1fde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    1fe2:	d31b      	bcc.n	201c <__adddf3+0x124>
    1fe4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    1fe8:	d30c      	bcc.n	2004 <__adddf3+0x10c>
    1fea:	0849      	lsrs	r1, r1, #1
    1fec:	ea5f 0030 	movs.w	r0, r0, rrx
    1ff0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    1ff4:	f104 0401 	add.w	r4, r4, #1
    1ff8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    1ffc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    2000:	f080 809a 	bcs.w	2138 <__adddf3+0x240>
    2004:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    2008:	bf08      	it	eq
    200a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    200e:	f150 0000 	adcs.w	r0, r0, #0
    2012:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    2016:	ea41 0105 	orr.w	r1, r1, r5
    201a:	bd30      	pop	{r4, r5, pc}
    201c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    2020:	4140      	adcs	r0, r0
    2022:	eb41 0101 	adc.w	r1, r1, r1
    2026:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    202a:	f1a4 0401 	sub.w	r4, r4, #1
    202e:	d1e9      	bne.n	2004 <__adddf3+0x10c>
    2030:	f091 0f00 	teq	r1, #0
    2034:	bf04      	itt	eq
    2036:	4601      	moveq	r1, r0
    2038:	2000      	moveq	r0, #0
    203a:	fab1 f381 	clz	r3, r1
    203e:	bf08      	it	eq
    2040:	3320      	addeq	r3, #32
    2042:	f1a3 030b 	sub.w	r3, r3, #11
    2046:	f1b3 0220 	subs.w	r2, r3, #32
    204a:	da0c      	bge.n	2066 <__adddf3+0x16e>
    204c:	320c      	adds	r2, #12
    204e:	dd08      	ble.n	2062 <__adddf3+0x16a>
    2050:	f102 0c14 	add.w	ip, r2, #20
    2054:	f1c2 020c 	rsb	r2, r2, #12
    2058:	fa01 f00c 	lsl.w	r0, r1, ip
    205c:	fa21 f102 	lsr.w	r1, r1, r2
    2060:	e00c      	b.n	207c <__adddf3+0x184>
    2062:	f102 0214 	add.w	r2, r2, #20
    2066:	bfd8      	it	le
    2068:	f1c2 0c20 	rsble	ip, r2, #32
    206c:	fa01 f102 	lsl.w	r1, r1, r2
    2070:	fa20 fc0c 	lsr.w	ip, r0, ip
    2074:	bfdc      	itt	le
    2076:	ea41 010c 	orrle.w	r1, r1, ip
    207a:	4090      	lslle	r0, r2
    207c:	1ae4      	subs	r4, r4, r3
    207e:	bfa2      	ittt	ge
    2080:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    2084:	4329      	orrge	r1, r5
    2086:	bd30      	popge	{r4, r5, pc}
    2088:	ea6f 0404 	mvn.w	r4, r4
    208c:	3c1f      	subs	r4, #31
    208e:	da1c      	bge.n	20ca <__adddf3+0x1d2>
    2090:	340c      	adds	r4, #12
    2092:	dc0e      	bgt.n	20b2 <__adddf3+0x1ba>
    2094:	f104 0414 	add.w	r4, r4, #20
    2098:	f1c4 0220 	rsb	r2, r4, #32
    209c:	fa20 f004 	lsr.w	r0, r0, r4
    20a0:	fa01 f302 	lsl.w	r3, r1, r2
    20a4:	ea40 0003 	orr.w	r0, r0, r3
    20a8:	fa21 f304 	lsr.w	r3, r1, r4
    20ac:	ea45 0103 	orr.w	r1, r5, r3
    20b0:	bd30      	pop	{r4, r5, pc}
    20b2:	f1c4 040c 	rsb	r4, r4, #12
    20b6:	f1c4 0220 	rsb	r2, r4, #32
    20ba:	fa20 f002 	lsr.w	r0, r0, r2
    20be:	fa01 f304 	lsl.w	r3, r1, r4
    20c2:	ea40 0003 	orr.w	r0, r0, r3
    20c6:	4629      	mov	r1, r5
    20c8:	bd30      	pop	{r4, r5, pc}
    20ca:	fa21 f004 	lsr.w	r0, r1, r4
    20ce:	4629      	mov	r1, r5
    20d0:	bd30      	pop	{r4, r5, pc}
    20d2:	f094 0f00 	teq	r4, #0
    20d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    20da:	bf06      	itte	eq
    20dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    20e0:	3401      	addeq	r4, #1
    20e2:	3d01      	subne	r5, #1
    20e4:	e74e      	b.n	1f84 <__adddf3+0x8c>
    20e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    20ea:	bf18      	it	ne
    20ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    20f0:	d029      	beq.n	2146 <__adddf3+0x24e>
    20f2:	ea94 0f05 	teq	r4, r5
    20f6:	bf08      	it	eq
    20f8:	ea90 0f02 	teqeq	r0, r2
    20fc:	d005      	beq.n	210a <__adddf3+0x212>
    20fe:	ea54 0c00 	orrs.w	ip, r4, r0
    2102:	bf04      	itt	eq
    2104:	4619      	moveq	r1, r3
    2106:	4610      	moveq	r0, r2
    2108:	bd30      	pop	{r4, r5, pc}
    210a:	ea91 0f03 	teq	r1, r3
    210e:	bf1e      	ittt	ne
    2110:	2100      	movne	r1, #0
    2112:	2000      	movne	r0, #0
    2114:	bd30      	popne	{r4, r5, pc}
    2116:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    211a:	d105      	bne.n	2128 <__adddf3+0x230>
    211c:	0040      	lsls	r0, r0, #1
    211e:	4149      	adcs	r1, r1
    2120:	bf28      	it	cs
    2122:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    2126:	bd30      	pop	{r4, r5, pc}
    2128:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    212c:	bf3c      	itt	cc
    212e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    2132:	bd30      	popcc	{r4, r5, pc}
    2134:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    2138:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    213c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    2140:	f04f 0000 	mov.w	r0, #0
    2144:	bd30      	pop	{r4, r5, pc}
    2146:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    214a:	bf1a      	itte	ne
    214c:	4619      	movne	r1, r3
    214e:	4610      	movne	r0, r2
    2150:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    2154:	bf1c      	itt	ne
    2156:	460b      	movne	r3, r1
    2158:	4602      	movne	r2, r0
    215a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    215e:	bf06      	itte	eq
    2160:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    2164:	ea91 0f03 	teqeq	r1, r3
    2168:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    216c:	bd30      	pop	{r4, r5, pc}
    216e:	bf00      	nop

00002170 <__aeabi_ui2d>:
    2170:	f090 0f00 	teq	r0, #0
    2174:	bf04      	itt	eq
    2176:	2100      	moveq	r1, #0
    2178:	4770      	bxeq	lr
    217a:	b530      	push	{r4, r5, lr}
    217c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    2180:	f104 0432 	add.w	r4, r4, #50	; 0x32
    2184:	f04f 0500 	mov.w	r5, #0
    2188:	f04f 0100 	mov.w	r1, #0
    218c:	e750      	b.n	2030 <__adddf3+0x138>
    218e:	bf00      	nop

00002190 <__aeabi_i2d>:
    2190:	f090 0f00 	teq	r0, #0
    2194:	bf04      	itt	eq
    2196:	2100      	moveq	r1, #0
    2198:	4770      	bxeq	lr
    219a:	b530      	push	{r4, r5, lr}
    219c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    21a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    21a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    21a8:	bf48      	it	mi
    21aa:	4240      	negmi	r0, r0
    21ac:	f04f 0100 	mov.w	r1, #0
    21b0:	e73e      	b.n	2030 <__adddf3+0x138>
    21b2:	bf00      	nop

000021b4 <__aeabi_f2d>:
    21b4:	0042      	lsls	r2, r0, #1
    21b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    21ba:	ea4f 0131 	mov.w	r1, r1, rrx
    21be:	ea4f 7002 	mov.w	r0, r2, lsl #28
    21c2:	bf1f      	itttt	ne
    21c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    21c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    21cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    21d0:	4770      	bxne	lr
    21d2:	f092 0f00 	teq	r2, #0
    21d6:	bf14      	ite	ne
    21d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    21dc:	4770      	bxeq	lr
    21de:	b530      	push	{r4, r5, lr}
    21e0:	f44f 7460 	mov.w	r4, #896	; 0x380
    21e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    21e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    21ec:	e720      	b.n	2030 <__adddf3+0x138>
    21ee:	bf00      	nop

000021f0 <__aeabi_ul2d>:
    21f0:	ea50 0201 	orrs.w	r2, r0, r1
    21f4:	bf08      	it	eq
    21f6:	4770      	bxeq	lr
    21f8:	b530      	push	{r4, r5, lr}
    21fa:	f04f 0500 	mov.w	r5, #0
    21fe:	e00a      	b.n	2216 <__aeabi_l2d+0x16>

00002200 <__aeabi_l2d>:
    2200:	ea50 0201 	orrs.w	r2, r0, r1
    2204:	bf08      	it	eq
    2206:	4770      	bxeq	lr
    2208:	b530      	push	{r4, r5, lr}
    220a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    220e:	d502      	bpl.n	2216 <__aeabi_l2d+0x16>
    2210:	4240      	negs	r0, r0
    2212:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    2216:	f44f 6480 	mov.w	r4, #1024	; 0x400
    221a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    221e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    2222:	f43f aedc 	beq.w	1fde <__adddf3+0xe6>
    2226:	f04f 0203 	mov.w	r2, #3
    222a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    222e:	bf18      	it	ne
    2230:	3203      	addne	r2, #3
    2232:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    2236:	bf18      	it	ne
    2238:	3203      	addne	r2, #3
    223a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    223e:	f1c2 0320 	rsb	r3, r2, #32
    2242:	fa00 fc03 	lsl.w	ip, r0, r3
    2246:	fa20 f002 	lsr.w	r0, r0, r2
    224a:	fa01 fe03 	lsl.w	lr, r1, r3
    224e:	ea40 000e 	orr.w	r0, r0, lr
    2252:	fa21 f102 	lsr.w	r1, r1, r2
    2256:	4414      	add	r4, r2
    2258:	e6c1      	b.n	1fde <__adddf3+0xe6>
    225a:	bf00      	nop

0000225c <__aeabi_dmul>:
    225c:	b570      	push	{r4, r5, r6, lr}
    225e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2262:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    2266:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    226a:	bf1d      	ittte	ne
    226c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    2270:	ea94 0f0c 	teqne	r4, ip
    2274:	ea95 0f0c 	teqne	r5, ip
    2278:	f000 f8de 	bleq	2438 <__aeabi_dmul+0x1dc>
    227c:	442c      	add	r4, r5
    227e:	ea81 0603 	eor.w	r6, r1, r3
    2282:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    2286:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    228a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    228e:	bf18      	it	ne
    2290:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    2294:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    229c:	d038      	beq.n	2310 <__aeabi_dmul+0xb4>
    229e:	fba0 ce02 	umull	ip, lr, r0, r2
    22a2:	f04f 0500 	mov.w	r5, #0
    22a6:	fbe1 e502 	umlal	lr, r5, r1, r2
    22aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    22ae:	fbe0 e503 	umlal	lr, r5, r0, r3
    22b2:	f04f 0600 	mov.w	r6, #0
    22b6:	fbe1 5603 	umlal	r5, r6, r1, r3
    22ba:	f09c 0f00 	teq	ip, #0
    22be:	bf18      	it	ne
    22c0:	f04e 0e01 	orrne.w	lr, lr, #1
    22c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    22c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    22cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    22d0:	d204      	bcs.n	22dc <__aeabi_dmul+0x80>
    22d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    22d6:	416d      	adcs	r5, r5
    22d8:	eb46 0606 	adc.w	r6, r6, r6
    22dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    22e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    22e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    22e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    22ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    22f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    22f4:	bf88      	it	hi
    22f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    22fa:	d81e      	bhi.n	233a <__aeabi_dmul+0xde>
    22fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    2300:	bf08      	it	eq
    2302:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    2306:	f150 0000 	adcs.w	r0, r0, #0
    230a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    230e:	bd70      	pop	{r4, r5, r6, pc}
    2310:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    2314:	ea46 0101 	orr.w	r1, r6, r1
    2318:	ea40 0002 	orr.w	r0, r0, r2
    231c:	ea81 0103 	eor.w	r1, r1, r3
    2320:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    2324:	bfc2      	ittt	gt
    2326:	ebd4 050c 	rsbsgt	r5, r4, ip
    232a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    232e:	bd70      	popgt	{r4, r5, r6, pc}
    2330:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2334:	f04f 0e00 	mov.w	lr, #0
    2338:	3c01      	subs	r4, #1
    233a:	f300 80ab 	bgt.w	2494 <__aeabi_dmul+0x238>
    233e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    2342:	bfde      	ittt	le
    2344:	2000      	movle	r0, #0
    2346:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    234a:	bd70      	pople	{r4, r5, r6, pc}
    234c:	f1c4 0400 	rsb	r4, r4, #0
    2350:	3c20      	subs	r4, #32
    2352:	da35      	bge.n	23c0 <__aeabi_dmul+0x164>
    2354:	340c      	adds	r4, #12
    2356:	dc1b      	bgt.n	2390 <__aeabi_dmul+0x134>
    2358:	f104 0414 	add.w	r4, r4, #20
    235c:	f1c4 0520 	rsb	r5, r4, #32
    2360:	fa00 f305 	lsl.w	r3, r0, r5
    2364:	fa20 f004 	lsr.w	r0, r0, r4
    2368:	fa01 f205 	lsl.w	r2, r1, r5
    236c:	ea40 0002 	orr.w	r0, r0, r2
    2370:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    2374:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    2378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    237c:	fa21 f604 	lsr.w	r6, r1, r4
    2380:	eb42 0106 	adc.w	r1, r2, r6
    2384:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    2388:	bf08      	it	eq
    238a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    238e:	bd70      	pop	{r4, r5, r6, pc}
    2390:	f1c4 040c 	rsb	r4, r4, #12
    2394:	f1c4 0520 	rsb	r5, r4, #32
    2398:	fa00 f304 	lsl.w	r3, r0, r4
    239c:	fa20 f005 	lsr.w	r0, r0, r5
    23a0:	fa01 f204 	lsl.w	r2, r1, r4
    23a4:	ea40 0002 	orr.w	r0, r0, r2
    23a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    23ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    23b0:	f141 0100 	adc.w	r1, r1, #0
    23b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    23b8:	bf08      	it	eq
    23ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    23be:	bd70      	pop	{r4, r5, r6, pc}
    23c0:	f1c4 0520 	rsb	r5, r4, #32
    23c4:	fa00 f205 	lsl.w	r2, r0, r5
    23c8:	ea4e 0e02 	orr.w	lr, lr, r2
    23cc:	fa20 f304 	lsr.w	r3, r0, r4
    23d0:	fa01 f205 	lsl.w	r2, r1, r5
    23d4:	ea43 0302 	orr.w	r3, r3, r2
    23d8:	fa21 f004 	lsr.w	r0, r1, r4
    23dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    23e0:	fa21 f204 	lsr.w	r2, r1, r4
    23e4:	ea20 0002 	bic.w	r0, r0, r2
    23e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    23ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    23f0:	bf08      	it	eq
    23f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    23f6:	bd70      	pop	{r4, r5, r6, pc}
    23f8:	f094 0f00 	teq	r4, #0
    23fc:	d10f      	bne.n	241e <__aeabi_dmul+0x1c2>
    23fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    2402:	0040      	lsls	r0, r0, #1
    2404:	eb41 0101 	adc.w	r1, r1, r1
    2408:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    240c:	bf08      	it	eq
    240e:	3c01      	subeq	r4, #1
    2410:	d0f7      	beq.n	2402 <__aeabi_dmul+0x1a6>
    2412:	ea41 0106 	orr.w	r1, r1, r6
    2416:	f095 0f00 	teq	r5, #0
    241a:	bf18      	it	ne
    241c:	4770      	bxne	lr
    241e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    2422:	0052      	lsls	r2, r2, #1
    2424:	eb43 0303 	adc.w	r3, r3, r3
    2428:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    242c:	bf08      	it	eq
    242e:	3d01      	subeq	r5, #1
    2430:	d0f7      	beq.n	2422 <__aeabi_dmul+0x1c6>
    2432:	ea43 0306 	orr.w	r3, r3, r6
    2436:	4770      	bx	lr
    2438:	ea94 0f0c 	teq	r4, ip
    243c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    2440:	bf18      	it	ne
    2442:	ea95 0f0c 	teqne	r5, ip
    2446:	d00c      	beq.n	2462 <__aeabi_dmul+0x206>
    2448:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    244c:	bf18      	it	ne
    244e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2452:	d1d1      	bne.n	23f8 <__aeabi_dmul+0x19c>
    2454:	ea81 0103 	eor.w	r1, r1, r3
    2458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    245c:	f04f 0000 	mov.w	r0, #0
    2460:	bd70      	pop	{r4, r5, r6, pc}
    2462:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2466:	bf06      	itte	eq
    2468:	4610      	moveq	r0, r2
    246a:	4619      	moveq	r1, r3
    246c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2470:	d019      	beq.n	24a6 <__aeabi_dmul+0x24a>
    2472:	ea94 0f0c 	teq	r4, ip
    2476:	d102      	bne.n	247e <__aeabi_dmul+0x222>
    2478:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    247c:	d113      	bne.n	24a6 <__aeabi_dmul+0x24a>
    247e:	ea95 0f0c 	teq	r5, ip
    2482:	d105      	bne.n	2490 <__aeabi_dmul+0x234>
    2484:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    2488:	bf1c      	itt	ne
    248a:	4610      	movne	r0, r2
    248c:	4619      	movne	r1, r3
    248e:	d10a      	bne.n	24a6 <__aeabi_dmul+0x24a>
    2490:	ea81 0103 	eor.w	r1, r1, r3
    2494:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    2498:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    249c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    24a0:	f04f 0000 	mov.w	r0, #0
    24a4:	bd70      	pop	{r4, r5, r6, pc}
    24a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    24aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    24ae:	bd70      	pop	{r4, r5, r6, pc}

000024b0 <__aeabi_ddiv>:
    24b0:	b570      	push	{r4, r5, r6, lr}
    24b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    24b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    24ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    24be:	bf1d      	ittte	ne
    24c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    24c4:	ea94 0f0c 	teqne	r4, ip
    24c8:	ea95 0f0c 	teqne	r5, ip
    24cc:	f000 f8a7 	bleq	261e <__aeabi_ddiv+0x16e>
    24d0:	eba4 0405 	sub.w	r4, r4, r5
    24d4:	ea81 0e03 	eor.w	lr, r1, r3
    24d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    24dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    24e0:	f000 8088 	beq.w	25f4 <__aeabi_ddiv+0x144>
    24e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    24e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    24ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    24f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    24f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    24f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    24fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    2500:	ea4f 2600 	mov.w	r6, r0, lsl #8
    2504:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    2508:	429d      	cmp	r5, r3
    250a:	bf08      	it	eq
    250c:	4296      	cmpeq	r6, r2
    250e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    2512:	f504 7440 	add.w	r4, r4, #768	; 0x300
    2516:	d202      	bcs.n	251e <__aeabi_ddiv+0x6e>
    2518:	085b      	lsrs	r3, r3, #1
    251a:	ea4f 0232 	mov.w	r2, r2, rrx
    251e:	1ab6      	subs	r6, r6, r2
    2520:	eb65 0503 	sbc.w	r5, r5, r3
    2524:	085b      	lsrs	r3, r3, #1
    2526:	ea4f 0232 	mov.w	r2, r2, rrx
    252a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    252e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    2532:	ebb6 0e02 	subs.w	lr, r6, r2
    2536:	eb75 0e03 	sbcs.w	lr, r5, r3
    253a:	bf22      	ittt	cs
    253c:	1ab6      	subcs	r6, r6, r2
    253e:	4675      	movcs	r5, lr
    2540:	ea40 000c 	orrcs.w	r0, r0, ip
    2544:	085b      	lsrs	r3, r3, #1
    2546:	ea4f 0232 	mov.w	r2, r2, rrx
    254a:	ebb6 0e02 	subs.w	lr, r6, r2
    254e:	eb75 0e03 	sbcs.w	lr, r5, r3
    2552:	bf22      	ittt	cs
    2554:	1ab6      	subcs	r6, r6, r2
    2556:	4675      	movcs	r5, lr
    2558:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    255c:	085b      	lsrs	r3, r3, #1
    255e:	ea4f 0232 	mov.w	r2, r2, rrx
    2562:	ebb6 0e02 	subs.w	lr, r6, r2
    2566:	eb75 0e03 	sbcs.w	lr, r5, r3
    256a:	bf22      	ittt	cs
    256c:	1ab6      	subcs	r6, r6, r2
    256e:	4675      	movcs	r5, lr
    2570:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    2574:	085b      	lsrs	r3, r3, #1
    2576:	ea4f 0232 	mov.w	r2, r2, rrx
    257a:	ebb6 0e02 	subs.w	lr, r6, r2
    257e:	eb75 0e03 	sbcs.w	lr, r5, r3
    2582:	bf22      	ittt	cs
    2584:	1ab6      	subcs	r6, r6, r2
    2586:	4675      	movcs	r5, lr
    2588:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    258c:	ea55 0e06 	orrs.w	lr, r5, r6
    2590:	d018      	beq.n	25c4 <__aeabi_ddiv+0x114>
    2592:	ea4f 1505 	mov.w	r5, r5, lsl #4
    2596:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    259a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    259e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    25a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    25a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    25aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    25ae:	d1c0      	bne.n	2532 <__aeabi_ddiv+0x82>
    25b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    25b4:	d10b      	bne.n	25ce <__aeabi_ddiv+0x11e>
    25b6:	ea41 0100 	orr.w	r1, r1, r0
    25ba:	f04f 0000 	mov.w	r0, #0
    25be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    25c2:	e7b6      	b.n	2532 <__aeabi_ddiv+0x82>
    25c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    25c8:	bf04      	itt	eq
    25ca:	4301      	orreq	r1, r0
    25cc:	2000      	moveq	r0, #0
    25ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    25d2:	bf88      	it	hi
    25d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    25d8:	f63f aeaf 	bhi.w	233a <__aeabi_dmul+0xde>
    25dc:	ebb5 0c03 	subs.w	ip, r5, r3
    25e0:	bf04      	itt	eq
    25e2:	ebb6 0c02 	subseq.w	ip, r6, r2
    25e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    25ea:	f150 0000 	adcs.w	r0, r0, #0
    25ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    25f2:	bd70      	pop	{r4, r5, r6, pc}
    25f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    25f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    25fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    2600:	bfc2      	ittt	gt
    2602:	ebd4 050c 	rsbsgt	r5, r4, ip
    2606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    260a:	bd70      	popgt	{r4, r5, r6, pc}
    260c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    2610:	f04f 0e00 	mov.w	lr, #0
    2614:	3c01      	subs	r4, #1
    2616:	e690      	b.n	233a <__aeabi_dmul+0xde>
    2618:	ea45 0e06 	orr.w	lr, r5, r6
    261c:	e68d      	b.n	233a <__aeabi_dmul+0xde>
    261e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    2622:	ea94 0f0c 	teq	r4, ip
    2626:	bf08      	it	eq
    2628:	ea95 0f0c 	teqeq	r5, ip
    262c:	f43f af3b 	beq.w	24a6 <__aeabi_dmul+0x24a>
    2630:	ea94 0f0c 	teq	r4, ip
    2634:	d10a      	bne.n	264c <__aeabi_ddiv+0x19c>
    2636:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    263a:	f47f af34 	bne.w	24a6 <__aeabi_dmul+0x24a>
    263e:	ea95 0f0c 	teq	r5, ip
    2642:	f47f af25 	bne.w	2490 <__aeabi_dmul+0x234>
    2646:	4610      	mov	r0, r2
    2648:	4619      	mov	r1, r3
    264a:	e72c      	b.n	24a6 <__aeabi_dmul+0x24a>
    264c:	ea95 0f0c 	teq	r5, ip
    2650:	d106      	bne.n	2660 <__aeabi_ddiv+0x1b0>
    2652:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    2656:	f43f aefd 	beq.w	2454 <__aeabi_dmul+0x1f8>
    265a:	4610      	mov	r0, r2
    265c:	4619      	mov	r1, r3
    265e:	e722      	b.n	24a6 <__aeabi_dmul+0x24a>
    2660:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    2664:	bf18      	it	ne
    2666:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    266a:	f47f aec5 	bne.w	23f8 <__aeabi_dmul+0x19c>
    266e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    2672:	f47f af0d 	bne.w	2490 <__aeabi_dmul+0x234>
    2676:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    267a:	f47f aeeb 	bne.w	2454 <__aeabi_dmul+0x1f8>
    267e:	e712      	b.n	24a6 <__aeabi_dmul+0x24a>

00002680 <__aeabi_d2f>:
    2680:	ea4f 0241 	mov.w	r2, r1, lsl #1
    2684:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    2688:	bf24      	itt	cs
    268a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    268e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    2692:	d90d      	bls.n	26b0 <__aeabi_d2f+0x30>
    2694:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    2698:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    269c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    26a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    26a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    26a8:	bf08      	it	eq
    26aa:	f020 0001 	biceq.w	r0, r0, #1
    26ae:	4770      	bx	lr
    26b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    26b4:	d121      	bne.n	26fa <__aeabi_d2f+0x7a>
    26b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    26ba:	bfbc      	itt	lt
    26bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    26c0:	4770      	bxlt	lr
    26c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    26c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
    26ca:	f1c2 0218 	rsb	r2, r2, #24
    26ce:	f1c2 0c20 	rsb	ip, r2, #32
    26d2:	fa10 f30c 	lsls.w	r3, r0, ip
    26d6:	fa20 f002 	lsr.w	r0, r0, r2
    26da:	bf18      	it	ne
    26dc:	f040 0001 	orrne.w	r0, r0, #1
    26e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    26e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    26e8:	fa03 fc0c 	lsl.w	ip, r3, ip
    26ec:	ea40 000c 	orr.w	r0, r0, ip
    26f0:	fa23 f302 	lsr.w	r3, r3, r2
    26f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    26f8:	e7cc      	b.n	2694 <__aeabi_d2f+0x14>
    26fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
    26fe:	d107      	bne.n	2710 <__aeabi_d2f+0x90>
    2700:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    2704:	bf1e      	ittt	ne
    2706:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    270a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    270e:	4770      	bxne	lr
    2710:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    2714:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    2718:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    271c:	4770      	bx	lr
    271e:	bf00      	nop

00002720 <__aeabi_frsub>:
    2720:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    2724:	e002      	b.n	272c <__addsf3>
    2726:	bf00      	nop

00002728 <__aeabi_fsub>:
    2728:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000272c <__addsf3>:
    272c:	0042      	lsls	r2, r0, #1
    272e:	bf1f      	itttt	ne
    2730:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    2734:	ea92 0f03 	teqne	r2, r3
    2738:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    273c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    2740:	d06a      	beq.n	2818 <__addsf3+0xec>
    2742:	ea4f 6212 	mov.w	r2, r2, lsr #24
    2746:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    274a:	bfc1      	itttt	gt
    274c:	18d2      	addgt	r2, r2, r3
    274e:	4041      	eorgt	r1, r0
    2750:	4048      	eorgt	r0, r1
    2752:	4041      	eorgt	r1, r0
    2754:	bfb8      	it	lt
    2756:	425b      	neglt	r3, r3
    2758:	2b19      	cmp	r3, #25
    275a:	bf88      	it	hi
    275c:	4770      	bxhi	lr
    275e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    2762:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2766:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    276a:	bf18      	it	ne
    276c:	4240      	negne	r0, r0
    276e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    2772:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    2776:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    277a:	bf18      	it	ne
    277c:	4249      	negne	r1, r1
    277e:	ea92 0f03 	teq	r2, r3
    2782:	d03f      	beq.n	2804 <__addsf3+0xd8>
    2784:	f1a2 0201 	sub.w	r2, r2, #1
    2788:	fa41 fc03 	asr.w	ip, r1, r3
    278c:	eb10 000c 	adds.w	r0, r0, ip
    2790:	f1c3 0320 	rsb	r3, r3, #32
    2794:	fa01 f103 	lsl.w	r1, r1, r3
    2798:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    279c:	d502      	bpl.n	27a4 <__addsf3+0x78>
    279e:	4249      	negs	r1, r1
    27a0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    27a4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    27a8:	d313      	bcc.n	27d2 <__addsf3+0xa6>
    27aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    27ae:	d306      	bcc.n	27be <__addsf3+0x92>
    27b0:	0840      	lsrs	r0, r0, #1
    27b2:	ea4f 0131 	mov.w	r1, r1, rrx
    27b6:	f102 0201 	add.w	r2, r2, #1
    27ba:	2afe      	cmp	r2, #254	; 0xfe
    27bc:	d251      	bcs.n	2862 <__addsf3+0x136>
    27be:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    27c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    27c6:	bf08      	it	eq
    27c8:	f020 0001 	biceq.w	r0, r0, #1
    27cc:	ea40 0003 	orr.w	r0, r0, r3
    27d0:	4770      	bx	lr
    27d2:	0049      	lsls	r1, r1, #1
    27d4:	eb40 0000 	adc.w	r0, r0, r0
    27d8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    27dc:	f1a2 0201 	sub.w	r2, r2, #1
    27e0:	d1ed      	bne.n	27be <__addsf3+0x92>
    27e2:	fab0 fc80 	clz	ip, r0
    27e6:	f1ac 0c08 	sub.w	ip, ip, #8
    27ea:	ebb2 020c 	subs.w	r2, r2, ip
    27ee:	fa00 f00c 	lsl.w	r0, r0, ip
    27f2:	bfaa      	itet	ge
    27f4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    27f8:	4252      	neglt	r2, r2
    27fa:	4318      	orrge	r0, r3
    27fc:	bfbc      	itt	lt
    27fe:	40d0      	lsrlt	r0, r2
    2800:	4318      	orrlt	r0, r3
    2802:	4770      	bx	lr
    2804:	f092 0f00 	teq	r2, #0
    2808:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    280c:	bf06      	itte	eq
    280e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    2812:	3201      	addeq	r2, #1
    2814:	3b01      	subne	r3, #1
    2816:	e7b5      	b.n	2784 <__addsf3+0x58>
    2818:	ea4f 0341 	mov.w	r3, r1, lsl #1
    281c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    2820:	bf18      	it	ne
    2822:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    2826:	d021      	beq.n	286c <__addsf3+0x140>
    2828:	ea92 0f03 	teq	r2, r3
    282c:	d004      	beq.n	2838 <__addsf3+0x10c>
    282e:	f092 0f00 	teq	r2, #0
    2832:	bf08      	it	eq
    2834:	4608      	moveq	r0, r1
    2836:	4770      	bx	lr
    2838:	ea90 0f01 	teq	r0, r1
    283c:	bf1c      	itt	ne
    283e:	2000      	movne	r0, #0
    2840:	4770      	bxne	lr
    2842:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    2846:	d104      	bne.n	2852 <__addsf3+0x126>
    2848:	0040      	lsls	r0, r0, #1
    284a:	bf28      	it	cs
    284c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    2850:	4770      	bx	lr
    2852:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    2856:	bf3c      	itt	cc
    2858:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    285c:	4770      	bxcc	lr
    285e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    2862:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    2866:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    286a:	4770      	bx	lr
    286c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    2870:	bf16      	itet	ne
    2872:	4608      	movne	r0, r1
    2874:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    2878:	4601      	movne	r1, r0
    287a:	0242      	lsls	r2, r0, #9
    287c:	bf06      	itte	eq
    287e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    2882:	ea90 0f01 	teqeq	r0, r1
    2886:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    288a:	4770      	bx	lr

0000288c <__aeabi_ui2f>:
    288c:	f04f 0300 	mov.w	r3, #0
    2890:	e004      	b.n	289c <__aeabi_i2f+0x8>
    2892:	bf00      	nop

00002894 <__aeabi_i2f>:
    2894:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    2898:	bf48      	it	mi
    289a:	4240      	negmi	r0, r0
    289c:	ea5f 0c00 	movs.w	ip, r0
    28a0:	bf08      	it	eq
    28a2:	4770      	bxeq	lr
    28a4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    28a8:	4601      	mov	r1, r0
    28aa:	f04f 0000 	mov.w	r0, #0
    28ae:	e01c      	b.n	28ea <__aeabi_l2f+0x2a>

000028b0 <__aeabi_ul2f>:
    28b0:	ea50 0201 	orrs.w	r2, r0, r1
    28b4:	bf08      	it	eq
    28b6:	4770      	bxeq	lr
    28b8:	f04f 0300 	mov.w	r3, #0
    28bc:	e00a      	b.n	28d4 <__aeabi_l2f+0x14>
    28be:	bf00      	nop

000028c0 <__aeabi_l2f>:
    28c0:	ea50 0201 	orrs.w	r2, r0, r1
    28c4:	bf08      	it	eq
    28c6:	4770      	bxeq	lr
    28c8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    28cc:	d502      	bpl.n	28d4 <__aeabi_l2f+0x14>
    28ce:	4240      	negs	r0, r0
    28d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    28d4:	ea5f 0c01 	movs.w	ip, r1
    28d8:	bf02      	ittt	eq
    28da:	4684      	moveq	ip, r0
    28dc:	4601      	moveq	r1, r0
    28de:	2000      	moveq	r0, #0
    28e0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    28e4:	bf08      	it	eq
    28e6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    28ea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    28ee:	fabc f28c 	clz	r2, ip
    28f2:	3a08      	subs	r2, #8
    28f4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    28f8:	db10      	blt.n	291c <__aeabi_l2f+0x5c>
    28fa:	fa01 fc02 	lsl.w	ip, r1, r2
    28fe:	4463      	add	r3, ip
    2900:	fa00 fc02 	lsl.w	ip, r0, r2
    2904:	f1c2 0220 	rsb	r2, r2, #32
    2908:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    290c:	fa20 f202 	lsr.w	r2, r0, r2
    2910:	eb43 0002 	adc.w	r0, r3, r2
    2914:	bf08      	it	eq
    2916:	f020 0001 	biceq.w	r0, r0, #1
    291a:	4770      	bx	lr
    291c:	f102 0220 	add.w	r2, r2, #32
    2920:	fa01 fc02 	lsl.w	ip, r1, r2
    2924:	f1c2 0220 	rsb	r2, r2, #32
    2928:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    292c:	fa21 f202 	lsr.w	r2, r1, r2
    2930:	eb43 0002 	adc.w	r0, r3, r2
    2934:	bf08      	it	eq
    2936:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    293a:	4770      	bx	lr

0000293c <__aeabi_fmul>:
    293c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2940:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    2944:	bf1e      	ittt	ne
    2946:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    294a:	ea92 0f0c 	teqne	r2, ip
    294e:	ea93 0f0c 	teqne	r3, ip
    2952:	d06f      	beq.n	2a34 <__aeabi_fmul+0xf8>
    2954:	441a      	add	r2, r3
    2956:	ea80 0c01 	eor.w	ip, r0, r1
    295a:	0240      	lsls	r0, r0, #9
    295c:	bf18      	it	ne
    295e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    2962:	d01e      	beq.n	29a2 <__aeabi_fmul+0x66>
    2964:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    2968:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    296c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    2970:	fba0 3101 	umull	r3, r1, r0, r1
    2974:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    2978:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    297c:	bf3e      	ittt	cc
    297e:	0049      	lslcc	r1, r1, #1
    2980:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    2984:	005b      	lslcc	r3, r3, #1
    2986:	ea40 0001 	orr.w	r0, r0, r1
    298a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    298e:	2afd      	cmp	r2, #253	; 0xfd
    2990:	d81d      	bhi.n	29ce <__aeabi_fmul+0x92>
    2992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    2996:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    299a:	bf08      	it	eq
    299c:	f020 0001 	biceq.w	r0, r0, #1
    29a0:	4770      	bx	lr
    29a2:	f090 0f00 	teq	r0, #0
    29a6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    29aa:	bf08      	it	eq
    29ac:	0249      	lsleq	r1, r1, #9
    29ae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    29b2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    29b6:	3a7f      	subs	r2, #127	; 0x7f
    29b8:	bfc2      	ittt	gt
    29ba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    29be:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    29c2:	4770      	bxgt	lr
    29c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    29c8:	f04f 0300 	mov.w	r3, #0
    29cc:	3a01      	subs	r2, #1
    29ce:	dc5d      	bgt.n	2a8c <__aeabi_fmul+0x150>
    29d0:	f112 0f19 	cmn.w	r2, #25
    29d4:	bfdc      	itt	le
    29d6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    29da:	4770      	bxle	lr
    29dc:	f1c2 0200 	rsb	r2, r2, #0
    29e0:	0041      	lsls	r1, r0, #1
    29e2:	fa21 f102 	lsr.w	r1, r1, r2
    29e6:	f1c2 0220 	rsb	r2, r2, #32
    29ea:	fa00 fc02 	lsl.w	ip, r0, r2
    29ee:	ea5f 0031 	movs.w	r0, r1, rrx
    29f2:	f140 0000 	adc.w	r0, r0, #0
    29f6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    29fa:	bf08      	it	eq
    29fc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    2a00:	4770      	bx	lr
    2a02:	f092 0f00 	teq	r2, #0
    2a06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    2a0a:	bf02      	ittt	eq
    2a0c:	0040      	lsleq	r0, r0, #1
    2a0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    2a12:	3a01      	subeq	r2, #1
    2a14:	d0f9      	beq.n	2a0a <__aeabi_fmul+0xce>
    2a16:	ea40 000c 	orr.w	r0, r0, ip
    2a1a:	f093 0f00 	teq	r3, #0
    2a1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    2a22:	bf02      	ittt	eq
    2a24:	0049      	lsleq	r1, r1, #1
    2a26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    2a2a:	3b01      	subeq	r3, #1
    2a2c:	d0f9      	beq.n	2a22 <__aeabi_fmul+0xe6>
    2a2e:	ea41 010c 	orr.w	r1, r1, ip
    2a32:	e78f      	b.n	2954 <__aeabi_fmul+0x18>
    2a34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    2a38:	ea92 0f0c 	teq	r2, ip
    2a3c:	bf18      	it	ne
    2a3e:	ea93 0f0c 	teqne	r3, ip
    2a42:	d00a      	beq.n	2a5a <__aeabi_fmul+0x11e>
    2a44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    2a48:	bf18      	it	ne
    2a4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    2a4e:	d1d8      	bne.n	2a02 <__aeabi_fmul+0xc6>
    2a50:	ea80 0001 	eor.w	r0, r0, r1
    2a54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    2a58:	4770      	bx	lr
    2a5a:	f090 0f00 	teq	r0, #0
    2a5e:	bf17      	itett	ne
    2a60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    2a64:	4608      	moveq	r0, r1
    2a66:	f091 0f00 	teqne	r1, #0
    2a6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    2a6e:	d014      	beq.n	2a9a <__aeabi_fmul+0x15e>
    2a70:	ea92 0f0c 	teq	r2, ip
    2a74:	d101      	bne.n	2a7a <__aeabi_fmul+0x13e>
    2a76:	0242      	lsls	r2, r0, #9
    2a78:	d10f      	bne.n	2a9a <__aeabi_fmul+0x15e>
    2a7a:	ea93 0f0c 	teq	r3, ip
    2a7e:	d103      	bne.n	2a88 <__aeabi_fmul+0x14c>
    2a80:	024b      	lsls	r3, r1, #9
    2a82:	bf18      	it	ne
    2a84:	4608      	movne	r0, r1
    2a86:	d108      	bne.n	2a9a <__aeabi_fmul+0x15e>
    2a88:	ea80 0001 	eor.w	r0, r0, r1
    2a8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    2a90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    2a94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2a98:	4770      	bx	lr
    2a9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    2a9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    2aa2:	4770      	bx	lr

00002aa4 <__aeabi_fdiv>:
    2aa4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2aa8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    2aac:	bf1e      	ittt	ne
    2aae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    2ab2:	ea92 0f0c 	teqne	r2, ip
    2ab6:	ea93 0f0c 	teqne	r3, ip
    2aba:	d069      	beq.n	2b90 <__aeabi_fdiv+0xec>
    2abc:	eba2 0203 	sub.w	r2, r2, r3
    2ac0:	ea80 0c01 	eor.w	ip, r0, r1
    2ac4:	0249      	lsls	r1, r1, #9
    2ac6:	ea4f 2040 	mov.w	r0, r0, lsl #9
    2aca:	d037      	beq.n	2b3c <__aeabi_fdiv+0x98>
    2acc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2ad0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    2ad4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    2ad8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    2adc:	428b      	cmp	r3, r1
    2ade:	bf38      	it	cc
    2ae0:	005b      	lslcc	r3, r3, #1
    2ae2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    2ae6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    2aea:	428b      	cmp	r3, r1
    2aec:	bf24      	itt	cs
    2aee:	1a5b      	subcs	r3, r3, r1
    2af0:	ea40 000c 	orrcs.w	r0, r0, ip
    2af4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    2af8:	bf24      	itt	cs
    2afa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    2afe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    2b02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    2b06:	bf24      	itt	cs
    2b08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    2b0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    2b10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    2b14:	bf24      	itt	cs
    2b16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    2b1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    2b1e:	011b      	lsls	r3, r3, #4
    2b20:	bf18      	it	ne
    2b22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    2b26:	d1e0      	bne.n	2aea <__aeabi_fdiv+0x46>
    2b28:	2afd      	cmp	r2, #253	; 0xfd
    2b2a:	f63f af50 	bhi.w	29ce <__aeabi_fmul+0x92>
    2b2e:	428b      	cmp	r3, r1
    2b30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    2b34:	bf08      	it	eq
    2b36:	f020 0001 	biceq.w	r0, r0, #1
    2b3a:	4770      	bx	lr
    2b3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    2b40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    2b44:	327f      	adds	r2, #127	; 0x7f
    2b46:	bfc2      	ittt	gt
    2b48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    2b4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    2b50:	4770      	bxgt	lr
    2b52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2b56:	f04f 0300 	mov.w	r3, #0
    2b5a:	3a01      	subs	r2, #1
    2b5c:	e737      	b.n	29ce <__aeabi_fmul+0x92>
    2b5e:	f092 0f00 	teq	r2, #0
    2b62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    2b66:	bf02      	ittt	eq
    2b68:	0040      	lsleq	r0, r0, #1
    2b6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    2b6e:	3a01      	subeq	r2, #1
    2b70:	d0f9      	beq.n	2b66 <__aeabi_fdiv+0xc2>
    2b72:	ea40 000c 	orr.w	r0, r0, ip
    2b76:	f093 0f00 	teq	r3, #0
    2b7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    2b7e:	bf02      	ittt	eq
    2b80:	0049      	lsleq	r1, r1, #1
    2b82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    2b86:	3b01      	subeq	r3, #1
    2b88:	d0f9      	beq.n	2b7e <__aeabi_fdiv+0xda>
    2b8a:	ea41 010c 	orr.w	r1, r1, ip
    2b8e:	e795      	b.n	2abc <__aeabi_fdiv+0x18>
    2b90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    2b94:	ea92 0f0c 	teq	r2, ip
    2b98:	d108      	bne.n	2bac <__aeabi_fdiv+0x108>
    2b9a:	0242      	lsls	r2, r0, #9
    2b9c:	f47f af7d 	bne.w	2a9a <__aeabi_fmul+0x15e>
    2ba0:	ea93 0f0c 	teq	r3, ip
    2ba4:	f47f af70 	bne.w	2a88 <__aeabi_fmul+0x14c>
    2ba8:	4608      	mov	r0, r1
    2baa:	e776      	b.n	2a9a <__aeabi_fmul+0x15e>
    2bac:	ea93 0f0c 	teq	r3, ip
    2bb0:	d104      	bne.n	2bbc <__aeabi_fdiv+0x118>
    2bb2:	024b      	lsls	r3, r1, #9
    2bb4:	f43f af4c 	beq.w	2a50 <__aeabi_fmul+0x114>
    2bb8:	4608      	mov	r0, r1
    2bba:	e76e      	b.n	2a9a <__aeabi_fmul+0x15e>
    2bbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    2bc0:	bf18      	it	ne
    2bc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    2bc6:	d1ca      	bne.n	2b5e <__aeabi_fdiv+0xba>
    2bc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    2bcc:	f47f af5c 	bne.w	2a88 <__aeabi_fmul+0x14c>
    2bd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    2bd4:	f47f af3c 	bne.w	2a50 <__aeabi_fmul+0x114>
    2bd8:	e75f      	b.n	2a9a <__aeabi_fmul+0x15e>
    2bda:	bf00      	nop

00002bdc <__aeabi_f2iz>:
    2bdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
    2be0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    2be4:	d30f      	bcc.n	2c06 <__aeabi_f2iz+0x2a>
    2be6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    2bea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    2bee:	d90d      	bls.n	2c0c <__aeabi_f2iz+0x30>
    2bf0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    2bf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2bf8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    2bfc:	fa23 f002 	lsr.w	r0, r3, r2
    2c00:	bf18      	it	ne
    2c02:	4240      	negne	r0, r0
    2c04:	4770      	bx	lr
    2c06:	f04f 0000 	mov.w	r0, #0
    2c0a:	4770      	bx	lr
    2c0c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    2c10:	d101      	bne.n	2c16 <__aeabi_f2iz+0x3a>
    2c12:	0242      	lsls	r2, r0, #9
    2c14:	d105      	bne.n	2c22 <__aeabi_f2iz+0x46>
    2c16:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    2c1a:	bf08      	it	eq
    2c1c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    2c20:	4770      	bx	lr
    2c22:	f04f 0000 	mov.w	r0, #0
    2c26:	4770      	bx	lr

00002c28 <__libc_init_array>:
    2c28:	b570      	push	{r4, r5, r6, lr}
    2c2a:	4e0f      	ldr	r6, [pc, #60]	; (2c68 <__libc_init_array+0x40>)
    2c2c:	4d0f      	ldr	r5, [pc, #60]	; (2c6c <__libc_init_array+0x44>)
    2c2e:	1b76      	subs	r6, r6, r5
    2c30:	10b6      	asrs	r6, r6, #2
    2c32:	bf18      	it	ne
    2c34:	2400      	movne	r4, #0
    2c36:	d005      	beq.n	2c44 <__libc_init_array+0x1c>
    2c38:	3401      	adds	r4, #1
    2c3a:	f855 3b04 	ldr.w	r3, [r5], #4
    2c3e:	4798      	blx	r3
    2c40:	42a6      	cmp	r6, r4
    2c42:	d1f9      	bne.n	2c38 <__libc_init_array+0x10>
    2c44:	4e0a      	ldr	r6, [pc, #40]	; (2c70 <__libc_init_array+0x48>)
    2c46:	4d0b      	ldr	r5, [pc, #44]	; (2c74 <__libc_init_array+0x4c>)
    2c48:	1b76      	subs	r6, r6, r5
    2c4a:	f000 f8ab 	bl	2da4 <_init>
    2c4e:	10b6      	asrs	r6, r6, #2
    2c50:	bf18      	it	ne
    2c52:	2400      	movne	r4, #0
    2c54:	d006      	beq.n	2c64 <__libc_init_array+0x3c>
    2c56:	3401      	adds	r4, #1
    2c58:	f855 3b04 	ldr.w	r3, [r5], #4
    2c5c:	4798      	blx	r3
    2c5e:	42a6      	cmp	r6, r4
    2c60:	d1f9      	bne.n	2c56 <__libc_init_array+0x2e>
    2c62:	bd70      	pop	{r4, r5, r6, pc}
    2c64:	bd70      	pop	{r4, r5, r6, pc}
    2c66:	bf00      	nop
    2c68:	00002db0 	.word	0x00002db0
    2c6c:	00002db0 	.word	0x00002db0
    2c70:	00002db8 	.word	0x00002db8
    2c74:	00002db0 	.word	0x00002db0

00002c78 <register_fini>:
    2c78:	4b02      	ldr	r3, [pc, #8]	; (2c84 <register_fini+0xc>)
    2c7a:	b113      	cbz	r3, 2c82 <register_fini+0xa>
    2c7c:	4802      	ldr	r0, [pc, #8]	; (2c88 <register_fini+0x10>)
    2c7e:	f000 b805 	b.w	2c8c <atexit>
    2c82:	4770      	bx	lr
    2c84:	00000000 	.word	0x00000000
    2c88:	00002c99 	.word	0x00002c99

00002c8c <atexit>:
    2c8c:	2300      	movs	r3, #0
    2c8e:	4601      	mov	r1, r0
    2c90:	461a      	mov	r2, r3
    2c92:	4618      	mov	r0, r3
    2c94:	f000 b81e 	b.w	2cd4 <__register_exitproc>

00002c98 <__libc_fini_array>:
    2c98:	b538      	push	{r3, r4, r5, lr}
    2c9a:	4c0a      	ldr	r4, [pc, #40]	; (2cc4 <__libc_fini_array+0x2c>)
    2c9c:	4d0a      	ldr	r5, [pc, #40]	; (2cc8 <__libc_fini_array+0x30>)
    2c9e:	1b64      	subs	r4, r4, r5
    2ca0:	10a4      	asrs	r4, r4, #2
    2ca2:	d00a      	beq.n	2cba <__libc_fini_array+0x22>
    2ca4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
    2ca8:	3b01      	subs	r3, #1
    2caa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2cae:	3c01      	subs	r4, #1
    2cb0:	f855 3904 	ldr.w	r3, [r5], #-4
    2cb4:	4798      	blx	r3
    2cb6:	2c00      	cmp	r4, #0
    2cb8:	d1f9      	bne.n	2cae <__libc_fini_array+0x16>
    2cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2cbe:	f000 b87b 	b.w	2db8 <_fini>
    2cc2:	bf00      	nop
    2cc4:	00002dc8 	.word	0x00002dc8
    2cc8:	00002dc4 	.word	0x00002dc4

00002ccc <__retarget_lock_acquire_recursive>:
    2ccc:	4770      	bx	lr
    2cce:	bf00      	nop

00002cd0 <__retarget_lock_release_recursive>:
    2cd0:	4770      	bx	lr
    2cd2:	bf00      	nop

00002cd4 <__register_exitproc>:
    2cd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2cd8:	4d2c      	ldr	r5, [pc, #176]	; (2d8c <__register_exitproc+0xb8>)
    2cda:	4606      	mov	r6, r0
    2cdc:	6828      	ldr	r0, [r5, #0]
    2cde:	4698      	mov	r8, r3
    2ce0:	460f      	mov	r7, r1
    2ce2:	4691      	mov	r9, r2
    2ce4:	f7ff fff2 	bl	2ccc <__retarget_lock_acquire_recursive>
    2ce8:	4b29      	ldr	r3, [pc, #164]	; (2d90 <__register_exitproc+0xbc>)
    2cea:	681c      	ldr	r4, [r3, #0]
    2cec:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    2cf0:	2b00      	cmp	r3, #0
    2cf2:	d03e      	beq.n	2d72 <__register_exitproc+0x9e>
    2cf4:	685a      	ldr	r2, [r3, #4]
    2cf6:	2a1f      	cmp	r2, #31
    2cf8:	dc1c      	bgt.n	2d34 <__register_exitproc+0x60>
    2cfa:	f102 0e01 	add.w	lr, r2, #1
    2cfe:	b176      	cbz	r6, 2d1e <__register_exitproc+0x4a>
    2d00:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    2d04:	2401      	movs	r4, #1
    2d06:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    2d0a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
    2d0e:	4094      	lsls	r4, r2
    2d10:	4320      	orrs	r0, r4
    2d12:	2e02      	cmp	r6, #2
    2d14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
    2d18:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    2d1c:	d023      	beq.n	2d66 <__register_exitproc+0x92>
    2d1e:	3202      	adds	r2, #2
    2d20:	f8c3 e004 	str.w	lr, [r3, #4]
    2d24:	6828      	ldr	r0, [r5, #0]
    2d26:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
    2d2a:	f7ff ffd1 	bl	2cd0 <__retarget_lock_release_recursive>
    2d2e:	2000      	movs	r0, #0
    2d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d34:	4b17      	ldr	r3, [pc, #92]	; (2d94 <__register_exitproc+0xc0>)
    2d36:	b30b      	cbz	r3, 2d7c <__register_exitproc+0xa8>
    2d38:	f44f 70c8 	mov.w	r0, #400	; 0x190
    2d3c:	f3af 8000 	nop.w
    2d40:	4603      	mov	r3, r0
    2d42:	b1d8      	cbz	r0, 2d7c <__register_exitproc+0xa8>
    2d44:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
    2d48:	6002      	str	r2, [r0, #0]
    2d4a:	2100      	movs	r1, #0
    2d4c:	6041      	str	r1, [r0, #4]
    2d4e:	460a      	mov	r2, r1
    2d50:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
    2d54:	f04f 0e01 	mov.w	lr, #1
    2d58:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
    2d5c:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
    2d60:	2e00      	cmp	r6, #0
    2d62:	d0dc      	beq.n	2d1e <__register_exitproc+0x4a>
    2d64:	e7cc      	b.n	2d00 <__register_exitproc+0x2c>
    2d66:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
    2d6a:	430c      	orrs	r4, r1
    2d6c:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
    2d70:	e7d5      	b.n	2d1e <__register_exitproc+0x4a>
    2d72:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
    2d76:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    2d7a:	e7bb      	b.n	2cf4 <__register_exitproc+0x20>
    2d7c:	6828      	ldr	r0, [r5, #0]
    2d7e:	f7ff ffa7 	bl	2cd0 <__retarget_lock_release_recursive>
    2d82:	f04f 30ff 	mov.w	r0, #4294967295
    2d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2d8a:	bf00      	nop
    2d8c:	20000b60 	.word	0x20000b60
    2d90:	00002da0 	.word	0x00002da0
    2d94:	00000000 	.word	0x00000000
    2d98:	72617453 	.word	0x72617453
    2d9c:	00000a74 	.word	0x00000a74

00002da0 <_global_impure_ptr>:
    2da0:	20000738                                8.. 

00002da4 <_init>:
    2da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2da6:	bf00      	nop
    2da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2daa:	bc08      	pop	{r3}
    2dac:	469e      	mov	lr, r3
    2dae:	4770      	bx	lr

00002db0 <__init_array_start>:
    2db0:	00002c79 	.word	0x00002c79

00002db4 <__frame_dummy_init_array_entry>:
    2db4:	00000289                                ....

00002db8 <_fini>:
    2db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dba:	bf00      	nop
    2dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2dbe:	bc08      	pop	{r3}
    2dc0:	469e      	mov	lr, r3
    2dc2:	4770      	bx	lr

00002dc4 <__fini_array_start>:
    2dc4:	00000265 	.word	0x00000265
